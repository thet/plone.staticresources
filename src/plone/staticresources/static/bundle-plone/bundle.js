/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		143: 0,
/******/ 		146: 0
/******/ 	};
/******/
/******/
/******/
/******/ 	// script path function
/******/ 	function jsonpScriptSrc(chunkId) {
/******/ 		return __webpack_require__.p + "chunks/" + ({}[chunkId]||chunkId) + "." + {"0":"7680c9d9566917288e3b","1":"b82c837a7769dd2bf220","2":"f6da4a8fead05c41ac76","3":"70b5fcad4b9794b47131","4":"821130320b62c736f00c","5":"ba1982f4db3229247b4e","6":"5733e19f61c954ac4c7f","7":"db6f183a0c66db5fa7c8","8":"1ff5b6b9d483b8f53db5","9":"e88ae20fb87c0bbd3de4","10":"558fe4cdce314ed5f1b0","11":"5a630480d4e3d31c2fbe","12":"fe6a41d2f1b5ad35dbe5","13":"effde7d502e16000b404","14":"fa94d0a911488aa53419","15":"99ff39ebc2b1bf6b433f","16":"8f799472ba3508b5c39f","17":"395f8ea5a94a9e769946","18":"3c73af8f195854cc1b43","19":"b4ee39c750b001f2be88","20":"176ae203faeafa863fe7","21":"0e30ab855782d0bf6933","22":"366bc79a353ae09f3cda","23":"a4a84e55adc9ea3f4ac1","24":"199b03f4ab3def70909f","25":"8244806e430cab493145","26":"a009920f8bc60bad9142","27":"aecaed3a3f3fe2c908d5","28":"e367c059922da3ff542e","29":"64116d7d854250c84e6a","30":"ed231139d7e4499378ad","31":"a33292a6b5585ab061a6","32":"1e7dd8aba40b7d7ecb36","33":"3e28668899f8fc6892ac","34":"fac6d615bb86ef08ed46","35":"a8d43c708df4359eeb0e","36":"02610298dd57a62e52e1","37":"2fea7e3ea4d9bb3c0aa0","38":"57e62317c03dcd0b1fcc","39":"6550bd9caaa226de39a5","40":"8913c0924e2f1a599370","41":"a75a89851ed62206cdaa","42":"d9c8f6acb86681771d0b","43":"9164616ad94b8dc9c5e1","44":"1bcf000bbd913094c1d5","45":"3a72e91c38b6946f74c1","46":"23ffbdac0809ac27c016","47":"2e46d33492d870a4c4f2","48":"4b2ba75e27b1bd84ca33","49":"112c0fd3c6d8bf603d72","50":"ed163f1437a7f8f3ec39","51":"b19c85cea17a31b2b9fb","52":"2b8e125a3cec973e6747","53":"c09a7e206611e0f8d2b1","54":"fb0ccd51d5c76092d718","55":"06d3fb834163854ecb7c","56":"fec694bb3a0c3762c28a","57":"2a80423f5b40038b49b2","58":"368a8fddc8f159b2dd28","59":"8ad672b6c9003c12e441","60":"fb9e5949fb2558899f8c","61":"2304703926ca7a05bf87","62":"f0eb1ac97d5a9cd29622","63":"f95fb4ef18a0a571b12c","64":"74159c50c9f5254f45bc","65":"f3f8bfa9198c293d282f","66":"448f2cf7de43c0a5dc0d","67":"035786d0cda5c7936051","68":"20388003c0e8c36e1da3","69":"bbbe390d3cf62221904f","70":"1e9dd7e19e44ac80d85c","71":"48e20f405ef88a553d40","72":"aba739ca48df4f1e68f7","73":"3ff7693f41cfd347991a","74":"8e9f673c48234fef9008","75":"b1fa5be5d141f5d93365","76":"8b5bd4ed2b397747f4ed","77":"01f0a0550fa86a70a1a0","78":"40d5d2db377493f3f502","79":"03a0cc5857c7a78aa223","80":"58e06334b862b252fb8f","81":"dbacb6a6a527978374d0","82":"a54fbe18651463ad73b2","83":"bfb9a75f6fef7e096d0d","84":"943610b0c9d3fa997fd1","85":"f87764f3c591dcda2357","86":"e3e6c461ac5a37736f54","87":"d9069f722d7fe3847209","88":"505d5f91a990ca67505e","89":"49a7e855531a69449e14","90":"33df1d23f3ee7e05d0d5","91":"f681ca3f1bd5bd1710d2","92":"301f3dd294c491b74135","93":"c8ed897e0a7b21e9a7f7","94":"d2f4706024bf6a58eda8","95":"b1b712e3cf0a2a403da0","96":"862834c31e8641806968","97":"fba8b4a4cee9c0726a59","98":"b1f38621c3700477fc6a","99":"15fb4bca71e060e343ba","100":"c517bbd6992303e5ecac","101":"0bde5c60fa6debca8f4b","102":"5d76367c8e677d11970b","103":"32525df9004cd2dd11a0","104":"6df2b78b064d5523ac73","105":"e40459f0ad07ac8be76f","106":"b28e093602007af2bcb1","107":"8f57228177fd819d6393","108":"0a6008554a05aedbb4fc","109":"61ce701f70ad77d9670b","110":"b9bbd8889018d2db1fa5","111":"671efc089700d45896a8","112":"47e25c8a6b1c83517e26","113":"f4036c062726dc14d633","114":"8bf177db498d43f3e6de","115":"2a9678f1faf79bd81f56","116":"f90dcf6b05668fd7fcc0","117":"2d67c824250cded3b73c","118":"5fa55f6c05f2845e8e27","119":"2d8abf612000eb4a1217","120":"a1309169d0961ecaa178","121":"b3b6884b73a7cc05fb29","122":"0a4237df3d9425691e6d","123":"93f046deeac09c2b43dd","124":"0724c077606169d144df","125":"697522e981435a030ba3","126":"f4b66ff1b7f9e888e6e8","127":"45fb82228dd561ddd203","128":"9a64ca9da9a7a418d0cc","129":"ff7f84ce00bcd1672340","130":"fda59e038ac1a5ea7b76","131":"d71f0b432009683c2139","132":"dd3563a4accd7415b828","133":"e6368226b59bd2f602d7","134":"b599734fd0623792297f","135":"0d8f130e24cc25c3a398","136":"a690884daca7e2590279","137":"a67d5ecb88a8a98dc93f","138":"b2ad359160a0b66e0edf","139":"740a06d8bca8bf1bc02b","140":"315740f881890e5a6546","141":"025f3d2d8a704963692f","142":"4ab5c16e1f236833505f","147":"0d997fbe11dae7f6c314","148":"1322bcbb8ff5fa45b440","149":"78db74d5942297494f07","150":"ae84b8200dc522e348a2","151":"6ab142217cff0e192c50","152":"d5cce3fa07659af0d59d","153":"40f452c6f819c799a6d1","154":"290fc49d7069b7fb3a32","155":"b8987d5bd811ac245123","156":"88fc11ffbfc1e3304192","157":"080d440aa9b9355e84f2","158":"3376b56cc9d4c7f48f33","159":"b31aeb9ffc3d3004f93c","160":"9fa9f0c44b98090b4a6b","161":"aecc610c3b9474c5a9f6","162":"83d5d1a585404814d2c0","163":"d282a33b0f0d1f632599","164":"4c269c54fabe8c8b0478","165":"4fff3d22b519205e421d","166":"b3e8fc827027ac8ce741","167":"ab87332c817beec77b18","168":"5ee38561497cceecf81a","169":"bd775cd5cc4526d09c3c","170":"4500cf66760b4a813f6e","171":"a804efb5a97f7ef0aaa1","172":"54561ed220dde4550834","173":"2bbcc5e842b3f31e601f","174":"57ff5dc1ef75854a7ea1","175":"618be889375632f9d937","176":"1478b9319ac813f9ba29","177":"79edda2d5996b104241d","178":"a381a399451482071f9f","179":"2d61cca2043e7f40d710","180":"2564df8ac034c1282ebe","181":"8ee0e9981f55fdb2e8d4","182":"ce3d5a57f8c79b664fca","183":"42448cf6028f2ca4ee34","184":"ad52a0a2f6b9ff8f9f22","185":"a6de9dfdbea436f1a403","186":"830aeb21c2dbcb9fd234","187":"f3535856b6460814a381","188":"bfd954d1d4ae585c0ca9","189":"2778df2ad1f58e3a1802","190":"c72b45084882d15d0962","191":"b7b9f3fb23cc08d7d205","192":"60040758e1fd23b3d445"}[chunkId] + ".min.js"
/******/ 	}
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var promises = [];
/******/
/******/
/******/ 		// JSONP chunk loading for javascript
/******/
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData !== 0) { // 0 means "already installed".
/******/
/******/ 			// a Promise means "currently loading".
/******/ 			if(installedChunkData) {
/******/ 				promises.push(installedChunkData[2]);
/******/ 			} else {
/******/ 				// setup Promise in chunk cache
/******/ 				var promise = new Promise(function(resolve, reject) {
/******/ 					installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 				});
/******/ 				promises.push(installedChunkData[2] = promise);
/******/
/******/ 				// start chunk loading
/******/ 				var script = document.createElement('script');
/******/ 				var onScriptComplete;
/******/
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.src = jsonpScriptSrc(chunkId);
/******/
/******/ 				// create error before stack unwound to get useful stacktrace later
/******/ 				var error = new Error();
/******/ 				onScriptComplete = function (event) {
/******/ 					// avoid mem leaks in IE.
/******/ 					script.onerror = script.onload = null;
/******/ 					clearTimeout(timeout);
/******/ 					var chunk = installedChunks[chunkId];
/******/ 					if(chunk !== 0) {
/******/ 						if(chunk) {
/******/ 							var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 							var realSrc = event && event.target && event.target.src;
/******/ 							error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 							error.name = 'ChunkLoadError';
/******/ 							error.type = errorType;
/******/ 							error.request = realSrc;
/******/ 							chunk[1](error);
/******/ 						}
/******/ 						installedChunks[chunkId] = undefined;
/******/ 					}
/******/ 				};
/******/ 				var timeout = setTimeout(function(){
/******/ 					onScriptComplete({ type: 'timeout', target: script });
/******/ 				}, 120000);
/******/ 				script.onerror = script.onload = onScriptComplete;
/******/ 				document.head.appendChild(script);
/******/ 			}
/******/ 		}
/******/ 		return Promise.all(promises);
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 581);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["$"] = __webpack_require__(365);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(59)))

/***/ }),

/***/ 1:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "default", function() { return /* reexport */ index_default; });
__webpack_require__.d(__webpack_exports__, "VERSION", function() { return /* reexport */ _setup["e" /* VERSION */]; });
__webpack_require__.d(__webpack_exports__, "restArguments", function() { return /* reexport */ restArguments; });
__webpack_require__.d(__webpack_exports__, "isObject", function() { return /* reexport */ isObject; });
__webpack_require__.d(__webpack_exports__, "isNull", function() { return /* reexport */ isNull; });
__webpack_require__.d(__webpack_exports__, "isUndefined", function() { return /* reexport */ isUndefined; });
__webpack_require__.d(__webpack_exports__, "isBoolean", function() { return /* reexport */ isBoolean; });
__webpack_require__.d(__webpack_exports__, "isElement", function() { return /* reexport */ isElement; });
__webpack_require__.d(__webpack_exports__, "isString", function() { return /* reexport */ isString; });
__webpack_require__.d(__webpack_exports__, "isNumber", function() { return /* reexport */ isNumber; });
__webpack_require__.d(__webpack_exports__, "isDate", function() { return /* reexport */ isDate; });
__webpack_require__.d(__webpack_exports__, "isRegExp", function() { return /* reexport */ isRegExp; });
__webpack_require__.d(__webpack_exports__, "isError", function() { return /* reexport */ isError; });
__webpack_require__.d(__webpack_exports__, "isSymbol", function() { return /* reexport */ isSymbol; });
__webpack_require__.d(__webpack_exports__, "isArrayBuffer", function() { return /* reexport */ isArrayBuffer; });
__webpack_require__.d(__webpack_exports__, "isDataView", function() { return /* reexport */ modules_isDataView; });
__webpack_require__.d(__webpack_exports__, "isArray", function() { return /* reexport */ isArray; });
__webpack_require__.d(__webpack_exports__, "isFunction", function() { return /* reexport */ modules_isFunction; });
__webpack_require__.d(__webpack_exports__, "isArguments", function() { return /* reexport */ modules_isArguments; });
__webpack_require__.d(__webpack_exports__, "isFinite", function() { return /* reexport */ isFinite_isFinite; });
__webpack_require__.d(__webpack_exports__, "isNaN", function() { return /* reexport */ isNaN_isNaN; });
__webpack_require__.d(__webpack_exports__, "isTypedArray", function() { return /* reexport */ modules_isTypedArray; });
__webpack_require__.d(__webpack_exports__, "isEmpty", function() { return /* reexport */ isEmpty; });
__webpack_require__.d(__webpack_exports__, "isMatch", function() { return /* reexport */ isMatch; });
__webpack_require__.d(__webpack_exports__, "isEqual", function() { return /* reexport */ isEqual; });
__webpack_require__.d(__webpack_exports__, "isMap", function() { return /* reexport */ isMap; });
__webpack_require__.d(__webpack_exports__, "isWeakMap", function() { return /* reexport */ isWeakMap; });
__webpack_require__.d(__webpack_exports__, "isSet", function() { return /* reexport */ isSet; });
__webpack_require__.d(__webpack_exports__, "isWeakSet", function() { return /* reexport */ isWeakSet; });
__webpack_require__.d(__webpack_exports__, "keys", function() { return /* reexport */ keys_keys; });
__webpack_require__.d(__webpack_exports__, "allKeys", function() { return /* reexport */ allKeys; });
__webpack_require__.d(__webpack_exports__, "values", function() { return /* reexport */ values_values; });
__webpack_require__.d(__webpack_exports__, "pairs", function() { return /* reexport */ pairs_pairs; });
__webpack_require__.d(__webpack_exports__, "invert", function() { return /* reexport */ invert; });
__webpack_require__.d(__webpack_exports__, "functions", function() { return /* reexport */ functions; });
__webpack_require__.d(__webpack_exports__, "methods", function() { return /* reexport */ functions; });
__webpack_require__.d(__webpack_exports__, "extend", function() { return /* reexport */ extend; });
__webpack_require__.d(__webpack_exports__, "extendOwn", function() { return /* reexport */ extendOwn; });
__webpack_require__.d(__webpack_exports__, "assign", function() { return /* reexport */ extendOwn; });
__webpack_require__.d(__webpack_exports__, "defaults", function() { return /* reexport */ defaults; });
__webpack_require__.d(__webpack_exports__, "create", function() { return /* reexport */ create; });
__webpack_require__.d(__webpack_exports__, "clone", function() { return /* reexport */ clone; });
__webpack_require__.d(__webpack_exports__, "tap", function() { return /* reexport */ tap; });
__webpack_require__.d(__webpack_exports__, "get", function() { return /* reexport */ get; });
__webpack_require__.d(__webpack_exports__, "has", function() { return /* reexport */ has_has; });
__webpack_require__.d(__webpack_exports__, "mapObject", function() { return /* reexport */ mapObject; });
__webpack_require__.d(__webpack_exports__, "identity", function() { return /* reexport */ identity; });
__webpack_require__.d(__webpack_exports__, "constant", function() { return /* reexport */ constant; });
__webpack_require__.d(__webpack_exports__, "noop", function() { return /* reexport */ noop; });
__webpack_require__.d(__webpack_exports__, "toPath", function() { return /* reexport */ toPath; });
__webpack_require__.d(__webpack_exports__, "property", function() { return /* reexport */ property; });
__webpack_require__.d(__webpack_exports__, "propertyOf", function() { return /* reexport */ propertyOf; });
__webpack_require__.d(__webpack_exports__, "matcher", function() { return /* reexport */ matcher_matcher; });
__webpack_require__.d(__webpack_exports__, "matches", function() { return /* reexport */ matcher_matcher; });
__webpack_require__.d(__webpack_exports__, "times", function() { return /* reexport */ times; });
__webpack_require__.d(__webpack_exports__, "random", function() { return /* reexport */ random; });
__webpack_require__.d(__webpack_exports__, "now", function() { return /* reexport */ now; });
__webpack_require__.d(__webpack_exports__, "escape", function() { return /* reexport */ modules_escape; });
__webpack_require__.d(__webpack_exports__, "unescape", function() { return /* reexport */ modules_unescape; });
__webpack_require__.d(__webpack_exports__, "templateSettings", function() { return /* reexport */ templateSettings; });
__webpack_require__.d(__webpack_exports__, "template", function() { return /* reexport */ template_template; });
__webpack_require__.d(__webpack_exports__, "result", function() { return /* reexport */ result_result; });
__webpack_require__.d(__webpack_exports__, "uniqueId", function() { return /* reexport */ uniqueId; });
__webpack_require__.d(__webpack_exports__, "chain", function() { return /* reexport */ chain; });
__webpack_require__.d(__webpack_exports__, "iteratee", function() { return /* reexport */ iteratee_iteratee; });
__webpack_require__.d(__webpack_exports__, "partial", function() { return /* reexport */ modules_partial; });
__webpack_require__.d(__webpack_exports__, "bind", function() { return /* reexport */ bind; });
__webpack_require__.d(__webpack_exports__, "bindAll", function() { return /* reexport */ bindAll; });
__webpack_require__.d(__webpack_exports__, "memoize", function() { return /* reexport */ memoize_memoize; });
__webpack_require__.d(__webpack_exports__, "delay", function() { return /* reexport */ delay; });
__webpack_require__.d(__webpack_exports__, "defer", function() { return /* reexport */ defer; });
__webpack_require__.d(__webpack_exports__, "throttle", function() { return /* reexport */ throttle; });
__webpack_require__.d(__webpack_exports__, "debounce", function() { return /* reexport */ debounce; });
__webpack_require__.d(__webpack_exports__, "wrap", function() { return /* reexport */ wrap; });
__webpack_require__.d(__webpack_exports__, "negate", function() { return /* reexport */ negate; });
__webpack_require__.d(__webpack_exports__, "compose", function() { return /* reexport */ compose; });
__webpack_require__.d(__webpack_exports__, "after", function() { return /* reexport */ after; });
__webpack_require__.d(__webpack_exports__, "before", function() { return /* reexport */ before; });
__webpack_require__.d(__webpack_exports__, "once", function() { return /* reexport */ once; });
__webpack_require__.d(__webpack_exports__, "findKey", function() { return /* reexport */ findKey; });
__webpack_require__.d(__webpack_exports__, "findIndex", function() { return /* reexport */ findIndex; });
__webpack_require__.d(__webpack_exports__, "findLastIndex", function() { return /* reexport */ findLastIndex; });
__webpack_require__.d(__webpack_exports__, "sortedIndex", function() { return /* reexport */ sortedIndex_sortedIndex; });
__webpack_require__.d(__webpack_exports__, "indexOf", function() { return /* reexport */ indexOf; });
__webpack_require__.d(__webpack_exports__, "lastIndexOf", function() { return /* reexport */ lastIndexOf; });
__webpack_require__.d(__webpack_exports__, "find", function() { return /* reexport */ find; });
__webpack_require__.d(__webpack_exports__, "detect", function() { return /* reexport */ find; });
__webpack_require__.d(__webpack_exports__, "findWhere", function() { return /* reexport */ findWhere; });
__webpack_require__.d(__webpack_exports__, "each", function() { return /* reexport */ each; });
__webpack_require__.d(__webpack_exports__, "forEach", function() { return /* reexport */ each; });
__webpack_require__.d(__webpack_exports__, "map", function() { return /* reexport */ map_map; });
__webpack_require__.d(__webpack_exports__, "collect", function() { return /* reexport */ map_map; });
__webpack_require__.d(__webpack_exports__, "reduce", function() { return /* reexport */ reduce; });
__webpack_require__.d(__webpack_exports__, "foldl", function() { return /* reexport */ reduce; });
__webpack_require__.d(__webpack_exports__, "inject", function() { return /* reexport */ reduce; });
__webpack_require__.d(__webpack_exports__, "reduceRight", function() { return /* reexport */ reduceRight; });
__webpack_require__.d(__webpack_exports__, "foldr", function() { return /* reexport */ reduceRight; });
__webpack_require__.d(__webpack_exports__, "filter", function() { return /* reexport */ filter; });
__webpack_require__.d(__webpack_exports__, "select", function() { return /* reexport */ filter; });
__webpack_require__.d(__webpack_exports__, "reject", function() { return /* reexport */ reject; });
__webpack_require__.d(__webpack_exports__, "every", function() { return /* reexport */ every; });
__webpack_require__.d(__webpack_exports__, "all", function() { return /* reexport */ every; });
__webpack_require__.d(__webpack_exports__, "some", function() { return /* reexport */ some; });
__webpack_require__.d(__webpack_exports__, "any", function() { return /* reexport */ some; });
__webpack_require__.d(__webpack_exports__, "contains", function() { return /* reexport */ contains; });
__webpack_require__.d(__webpack_exports__, "includes", function() { return /* reexport */ contains; });
__webpack_require__.d(__webpack_exports__, "include", function() { return /* reexport */ contains; });
__webpack_require__.d(__webpack_exports__, "invoke", function() { return /* reexport */ invoke; });
__webpack_require__.d(__webpack_exports__, "pluck", function() { return /* reexport */ pluck; });
__webpack_require__.d(__webpack_exports__, "where", function() { return /* reexport */ where; });
__webpack_require__.d(__webpack_exports__, "max", function() { return /* reexport */ max; });
__webpack_require__.d(__webpack_exports__, "min", function() { return /* reexport */ min; });
__webpack_require__.d(__webpack_exports__, "shuffle", function() { return /* reexport */ shuffle; });
__webpack_require__.d(__webpack_exports__, "sample", function() { return /* reexport */ sample_sample; });
__webpack_require__.d(__webpack_exports__, "sortBy", function() { return /* reexport */ sortBy; });
__webpack_require__.d(__webpack_exports__, "groupBy", function() { return /* reexport */ groupBy; });
__webpack_require__.d(__webpack_exports__, "indexBy", function() { return /* reexport */ indexBy; });
__webpack_require__.d(__webpack_exports__, "countBy", function() { return /* reexport */ countBy; });
__webpack_require__.d(__webpack_exports__, "partition", function() { return /* reexport */ modules_partition; });
__webpack_require__.d(__webpack_exports__, "toArray", function() { return /* reexport */ toArray; });
__webpack_require__.d(__webpack_exports__, "size", function() { return /* reexport */ size; });
__webpack_require__.d(__webpack_exports__, "pick", function() { return /* reexport */ pick; });
__webpack_require__.d(__webpack_exports__, "omit", function() { return /* reexport */ omit; });
__webpack_require__.d(__webpack_exports__, "first", function() { return /* reexport */ first; });
__webpack_require__.d(__webpack_exports__, "head", function() { return /* reexport */ first; });
__webpack_require__.d(__webpack_exports__, "take", function() { return /* reexport */ first; });
__webpack_require__.d(__webpack_exports__, "initial", function() { return /* reexport */ initial_initial; });
__webpack_require__.d(__webpack_exports__, "last", function() { return /* reexport */ last_last; });
__webpack_require__.d(__webpack_exports__, "rest", function() { return /* reexport */ rest_rest; });
__webpack_require__.d(__webpack_exports__, "tail", function() { return /* reexport */ rest_rest; });
__webpack_require__.d(__webpack_exports__, "drop", function() { return /* reexport */ rest_rest; });
__webpack_require__.d(__webpack_exports__, "compact", function() { return /* reexport */ compact; });
__webpack_require__.d(__webpack_exports__, "flatten", function() { return /* reexport */ flatten_flatten; });
__webpack_require__.d(__webpack_exports__, "without", function() { return /* reexport */ without; });
__webpack_require__.d(__webpack_exports__, "uniq", function() { return /* reexport */ uniq; });
__webpack_require__.d(__webpack_exports__, "unique", function() { return /* reexport */ uniq; });
__webpack_require__.d(__webpack_exports__, "union", function() { return /* reexport */ union; });
__webpack_require__.d(__webpack_exports__, "intersection", function() { return /* reexport */ intersection; });
__webpack_require__.d(__webpack_exports__, "difference", function() { return /* reexport */ difference; });
__webpack_require__.d(__webpack_exports__, "unzip", function() { return /* reexport */ unzip; });
__webpack_require__.d(__webpack_exports__, "transpose", function() { return /* reexport */ unzip; });
__webpack_require__.d(__webpack_exports__, "zip", function() { return /* reexport */ zip; });
__webpack_require__.d(__webpack_exports__, "object", function() { return /* reexport */ object_object; });
__webpack_require__.d(__webpack_exports__, "range", function() { return /* reexport */ range; });
__webpack_require__.d(__webpack_exports__, "chunk", function() { return /* reexport */ chunk; });
__webpack_require__.d(__webpack_exports__, "mixin", function() { return /* reexport */ mixin; });

// NAMESPACE OBJECT: ./node_modules/underscore/modules/index.js
var modules_namespaceObject = {};
__webpack_require__.r(modules_namespaceObject);
__webpack_require__.d(modules_namespaceObject, "VERSION", function() { return _setup["e" /* VERSION */]; });
__webpack_require__.d(modules_namespaceObject, "restArguments", function() { return restArguments; });
__webpack_require__.d(modules_namespaceObject, "isObject", function() { return isObject; });
__webpack_require__.d(modules_namespaceObject, "isNull", function() { return isNull; });
__webpack_require__.d(modules_namespaceObject, "isUndefined", function() { return isUndefined; });
__webpack_require__.d(modules_namespaceObject, "isBoolean", function() { return isBoolean; });
__webpack_require__.d(modules_namespaceObject, "isElement", function() { return isElement; });
__webpack_require__.d(modules_namespaceObject, "isString", function() { return isString; });
__webpack_require__.d(modules_namespaceObject, "isNumber", function() { return isNumber; });
__webpack_require__.d(modules_namespaceObject, "isDate", function() { return isDate; });
__webpack_require__.d(modules_namespaceObject, "isRegExp", function() { return isRegExp; });
__webpack_require__.d(modules_namespaceObject, "isError", function() { return isError; });
__webpack_require__.d(modules_namespaceObject, "isSymbol", function() { return isSymbol; });
__webpack_require__.d(modules_namespaceObject, "isArrayBuffer", function() { return isArrayBuffer; });
__webpack_require__.d(modules_namespaceObject, "isDataView", function() { return modules_isDataView; });
__webpack_require__.d(modules_namespaceObject, "isArray", function() { return isArray; });
__webpack_require__.d(modules_namespaceObject, "isFunction", function() { return modules_isFunction; });
__webpack_require__.d(modules_namespaceObject, "isArguments", function() { return modules_isArguments; });
__webpack_require__.d(modules_namespaceObject, "isFinite", function() { return isFinite_isFinite; });
__webpack_require__.d(modules_namespaceObject, "isNaN", function() { return isNaN_isNaN; });
__webpack_require__.d(modules_namespaceObject, "isTypedArray", function() { return modules_isTypedArray; });
__webpack_require__.d(modules_namespaceObject, "isEmpty", function() { return isEmpty; });
__webpack_require__.d(modules_namespaceObject, "isMatch", function() { return isMatch; });
__webpack_require__.d(modules_namespaceObject, "isEqual", function() { return isEqual; });
__webpack_require__.d(modules_namespaceObject, "isMap", function() { return isMap; });
__webpack_require__.d(modules_namespaceObject, "isWeakMap", function() { return isWeakMap; });
__webpack_require__.d(modules_namespaceObject, "isSet", function() { return isSet; });
__webpack_require__.d(modules_namespaceObject, "isWeakSet", function() { return isWeakSet; });
__webpack_require__.d(modules_namespaceObject, "keys", function() { return keys_keys; });
__webpack_require__.d(modules_namespaceObject, "allKeys", function() { return allKeys; });
__webpack_require__.d(modules_namespaceObject, "values", function() { return values_values; });
__webpack_require__.d(modules_namespaceObject, "pairs", function() { return pairs_pairs; });
__webpack_require__.d(modules_namespaceObject, "invert", function() { return invert; });
__webpack_require__.d(modules_namespaceObject, "functions", function() { return functions; });
__webpack_require__.d(modules_namespaceObject, "methods", function() { return functions; });
__webpack_require__.d(modules_namespaceObject, "extend", function() { return extend; });
__webpack_require__.d(modules_namespaceObject, "extendOwn", function() { return extendOwn; });
__webpack_require__.d(modules_namespaceObject, "assign", function() { return extendOwn; });
__webpack_require__.d(modules_namespaceObject, "defaults", function() { return defaults; });
__webpack_require__.d(modules_namespaceObject, "create", function() { return create; });
__webpack_require__.d(modules_namespaceObject, "clone", function() { return clone; });
__webpack_require__.d(modules_namespaceObject, "tap", function() { return tap; });
__webpack_require__.d(modules_namespaceObject, "get", function() { return get; });
__webpack_require__.d(modules_namespaceObject, "has", function() { return has_has; });
__webpack_require__.d(modules_namespaceObject, "mapObject", function() { return mapObject; });
__webpack_require__.d(modules_namespaceObject, "identity", function() { return identity; });
__webpack_require__.d(modules_namespaceObject, "constant", function() { return constant; });
__webpack_require__.d(modules_namespaceObject, "noop", function() { return noop; });
__webpack_require__.d(modules_namespaceObject, "toPath", function() { return toPath; });
__webpack_require__.d(modules_namespaceObject, "property", function() { return property; });
__webpack_require__.d(modules_namespaceObject, "propertyOf", function() { return propertyOf; });
__webpack_require__.d(modules_namespaceObject, "matcher", function() { return matcher_matcher; });
__webpack_require__.d(modules_namespaceObject, "matches", function() { return matcher_matcher; });
__webpack_require__.d(modules_namespaceObject, "times", function() { return times; });
__webpack_require__.d(modules_namespaceObject, "random", function() { return random; });
__webpack_require__.d(modules_namespaceObject, "now", function() { return now; });
__webpack_require__.d(modules_namespaceObject, "escape", function() { return modules_escape; });
__webpack_require__.d(modules_namespaceObject, "unescape", function() { return modules_unescape; });
__webpack_require__.d(modules_namespaceObject, "templateSettings", function() { return templateSettings; });
__webpack_require__.d(modules_namespaceObject, "template", function() { return template_template; });
__webpack_require__.d(modules_namespaceObject, "result", function() { return result_result; });
__webpack_require__.d(modules_namespaceObject, "uniqueId", function() { return uniqueId; });
__webpack_require__.d(modules_namespaceObject, "chain", function() { return chain; });
__webpack_require__.d(modules_namespaceObject, "iteratee", function() { return iteratee_iteratee; });
__webpack_require__.d(modules_namespaceObject, "partial", function() { return modules_partial; });
__webpack_require__.d(modules_namespaceObject, "bind", function() { return bind; });
__webpack_require__.d(modules_namespaceObject, "bindAll", function() { return bindAll; });
__webpack_require__.d(modules_namespaceObject, "memoize", function() { return memoize_memoize; });
__webpack_require__.d(modules_namespaceObject, "delay", function() { return delay; });
__webpack_require__.d(modules_namespaceObject, "defer", function() { return defer; });
__webpack_require__.d(modules_namespaceObject, "throttle", function() { return throttle; });
__webpack_require__.d(modules_namespaceObject, "debounce", function() { return debounce; });
__webpack_require__.d(modules_namespaceObject, "wrap", function() { return wrap; });
__webpack_require__.d(modules_namespaceObject, "negate", function() { return negate; });
__webpack_require__.d(modules_namespaceObject, "compose", function() { return compose; });
__webpack_require__.d(modules_namespaceObject, "after", function() { return after; });
__webpack_require__.d(modules_namespaceObject, "before", function() { return before; });
__webpack_require__.d(modules_namespaceObject, "once", function() { return once; });
__webpack_require__.d(modules_namespaceObject, "findKey", function() { return findKey; });
__webpack_require__.d(modules_namespaceObject, "findIndex", function() { return findIndex; });
__webpack_require__.d(modules_namespaceObject, "findLastIndex", function() { return findLastIndex; });
__webpack_require__.d(modules_namespaceObject, "sortedIndex", function() { return sortedIndex_sortedIndex; });
__webpack_require__.d(modules_namespaceObject, "indexOf", function() { return indexOf; });
__webpack_require__.d(modules_namespaceObject, "lastIndexOf", function() { return lastIndexOf; });
__webpack_require__.d(modules_namespaceObject, "find", function() { return find; });
__webpack_require__.d(modules_namespaceObject, "detect", function() { return find; });
__webpack_require__.d(modules_namespaceObject, "findWhere", function() { return findWhere; });
__webpack_require__.d(modules_namespaceObject, "each", function() { return each; });
__webpack_require__.d(modules_namespaceObject, "forEach", function() { return each; });
__webpack_require__.d(modules_namespaceObject, "map", function() { return map_map; });
__webpack_require__.d(modules_namespaceObject, "collect", function() { return map_map; });
__webpack_require__.d(modules_namespaceObject, "reduce", function() { return reduce; });
__webpack_require__.d(modules_namespaceObject, "foldl", function() { return reduce; });
__webpack_require__.d(modules_namespaceObject, "inject", function() { return reduce; });
__webpack_require__.d(modules_namespaceObject, "reduceRight", function() { return reduceRight; });
__webpack_require__.d(modules_namespaceObject, "foldr", function() { return reduceRight; });
__webpack_require__.d(modules_namespaceObject, "filter", function() { return filter; });
__webpack_require__.d(modules_namespaceObject, "select", function() { return filter; });
__webpack_require__.d(modules_namespaceObject, "reject", function() { return reject; });
__webpack_require__.d(modules_namespaceObject, "every", function() { return every; });
__webpack_require__.d(modules_namespaceObject, "all", function() { return every; });
__webpack_require__.d(modules_namespaceObject, "some", function() { return some; });
__webpack_require__.d(modules_namespaceObject, "any", function() { return some; });
__webpack_require__.d(modules_namespaceObject, "contains", function() { return contains; });
__webpack_require__.d(modules_namespaceObject, "includes", function() { return contains; });
__webpack_require__.d(modules_namespaceObject, "include", function() { return contains; });
__webpack_require__.d(modules_namespaceObject, "invoke", function() { return invoke; });
__webpack_require__.d(modules_namespaceObject, "pluck", function() { return pluck; });
__webpack_require__.d(modules_namespaceObject, "where", function() { return where; });
__webpack_require__.d(modules_namespaceObject, "max", function() { return max; });
__webpack_require__.d(modules_namespaceObject, "min", function() { return min; });
__webpack_require__.d(modules_namespaceObject, "shuffle", function() { return shuffle; });
__webpack_require__.d(modules_namespaceObject, "sample", function() { return sample_sample; });
__webpack_require__.d(modules_namespaceObject, "sortBy", function() { return sortBy; });
__webpack_require__.d(modules_namespaceObject, "groupBy", function() { return groupBy; });
__webpack_require__.d(modules_namespaceObject, "indexBy", function() { return indexBy; });
__webpack_require__.d(modules_namespaceObject, "countBy", function() { return countBy; });
__webpack_require__.d(modules_namespaceObject, "partition", function() { return modules_partition; });
__webpack_require__.d(modules_namespaceObject, "toArray", function() { return toArray; });
__webpack_require__.d(modules_namespaceObject, "size", function() { return size; });
__webpack_require__.d(modules_namespaceObject, "pick", function() { return pick; });
__webpack_require__.d(modules_namespaceObject, "omit", function() { return omit; });
__webpack_require__.d(modules_namespaceObject, "first", function() { return first; });
__webpack_require__.d(modules_namespaceObject, "head", function() { return first; });
__webpack_require__.d(modules_namespaceObject, "take", function() { return first; });
__webpack_require__.d(modules_namespaceObject, "initial", function() { return initial_initial; });
__webpack_require__.d(modules_namespaceObject, "last", function() { return last_last; });
__webpack_require__.d(modules_namespaceObject, "rest", function() { return rest_rest; });
__webpack_require__.d(modules_namespaceObject, "tail", function() { return rest_rest; });
__webpack_require__.d(modules_namespaceObject, "drop", function() { return rest_rest; });
__webpack_require__.d(modules_namespaceObject, "compact", function() { return compact; });
__webpack_require__.d(modules_namespaceObject, "flatten", function() { return flatten_flatten; });
__webpack_require__.d(modules_namespaceObject, "without", function() { return without; });
__webpack_require__.d(modules_namespaceObject, "uniq", function() { return uniq; });
__webpack_require__.d(modules_namespaceObject, "unique", function() { return uniq; });
__webpack_require__.d(modules_namespaceObject, "union", function() { return union; });
__webpack_require__.d(modules_namespaceObject, "intersection", function() { return intersection; });
__webpack_require__.d(modules_namespaceObject, "difference", function() { return difference; });
__webpack_require__.d(modules_namespaceObject, "unzip", function() { return unzip; });
__webpack_require__.d(modules_namespaceObject, "transpose", function() { return unzip; });
__webpack_require__.d(modules_namespaceObject, "zip", function() { return zip; });
__webpack_require__.d(modules_namespaceObject, "object", function() { return object_object; });
__webpack_require__.d(modules_namespaceObject, "range", function() { return range; });
__webpack_require__.d(modules_namespaceObject, "chunk", function() { return chunk; });
__webpack_require__.d(modules_namespaceObject, "mixin", function() { return mixin; });
__webpack_require__.d(modules_namespaceObject, "default", function() { return underscore_array_methods; });

// EXTERNAL MODULE: ./node_modules/underscore/modules/_setup.js
var _setup = __webpack_require__(6);

// CONCATENATED MODULE: ./node_modules/underscore/modules/restArguments.js
// Some functions take a variable number of arguments, or a few expected
// arguments at the beginning and then a variable number of values to operate
// on. This helper accumulates all remaining arguments past the function’s
// argument length (or an explicit `startIndex`), into an array that becomes
// the last argument. Similar to ES6’s "rest parameter".
function restArguments(func, startIndex) {
  startIndex = startIndex == null ? func.length - 1 : +startIndex;
  return function() {
    var length = Math.max(arguments.length - startIndex, 0),
        rest = Array(length),
        index = 0;
    for (; index < length; index++) {
      rest[index] = arguments[index + startIndex];
    }
    switch (startIndex) {
      case 0: return func.call(this, rest);
      case 1: return func.call(this, arguments[0], rest);
      case 2: return func.call(this, arguments[0], arguments[1], rest);
    }
    var args = Array(startIndex + 1);
    for (index = 0; index < startIndex; index++) {
      args[index] = arguments[index];
    }
    args[startIndex] = rest;
    return func.apply(this, args);
  };
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/isObject.js
// Is a given variable an object?
function isObject(obj) {
  var type = typeof obj;
  return type === 'function' || type === 'object' && !!obj;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/isNull.js
// Is a given value equal to null?
function isNull(obj) {
  return obj === null;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/isUndefined.js
// Is a given variable undefined?
function isUndefined(obj) {
  return obj === void 0;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/isBoolean.js


// Is a given value a boolean?
function isBoolean(obj) {
  return obj === true || obj === false || _setup["t" /* toString */].call(obj) === '[object Boolean]';
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/isElement.js
// Is a given value a DOM element?
function isElement(obj) {
  return !!(obj && obj.nodeType === 1);
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/_tagTester.js


// Internal function for creating a `toString`-based type tester.
function tagTester(name) {
  var tag = '[object ' + name + ']';
  return function(obj) {
    return _setup["t" /* toString */].call(obj) === tag;
  };
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/isString.js


/* harmony default export */ var isString = (tagTester('String'));

// CONCATENATED MODULE: ./node_modules/underscore/modules/isNumber.js


/* harmony default export */ var isNumber = (tagTester('Number'));

// CONCATENATED MODULE: ./node_modules/underscore/modules/isDate.js


/* harmony default export */ var isDate = (tagTester('Date'));

// CONCATENATED MODULE: ./node_modules/underscore/modules/isRegExp.js


/* harmony default export */ var isRegExp = (tagTester('RegExp'));

// CONCATENATED MODULE: ./node_modules/underscore/modules/isError.js


/* harmony default export */ var isError = (tagTester('Error'));

// CONCATENATED MODULE: ./node_modules/underscore/modules/isSymbol.js


/* harmony default export */ var isSymbol = (tagTester('Symbol'));

// CONCATENATED MODULE: ./node_modules/underscore/modules/isArrayBuffer.js


/* harmony default export */ var isArrayBuffer = (tagTester('ArrayBuffer'));

// CONCATENATED MODULE: ./node_modules/underscore/modules/isFunction.js



var isFunction = tagTester('Function');

// Optimize `isFunction` if appropriate. Work around some `typeof` bugs in old
// v8, IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
var nodelist = _setup["p" /* root */].document && _setup["p" /* root */].document.childNodes;
if ( true && typeof Int8Array != 'object' && typeof nodelist != 'function') {
  isFunction = function(obj) {
    return typeof obj == 'function' || false;
  };
}

/* harmony default export */ var modules_isFunction = (isFunction);

// CONCATENATED MODULE: ./node_modules/underscore/modules/_hasObjectTag.js


/* harmony default export */ var _hasObjectTag = (tagTester('Object'));

// CONCATENATED MODULE: ./node_modules/underscore/modules/_stringTagBug.js



// In IE 10 - Edge 13, `DataView` has string tag `'[object Object]'`.
// In IE 11, the most common among them, this problem also applies to
// `Map`, `WeakMap` and `Set`.
var hasStringTagBug = (
      _setup["s" /* supportsDataView */] && _hasObjectTag(new DataView(new ArrayBuffer(8)))
    ),
    isIE11 = (typeof Map !== 'undefined' && _hasObjectTag(new Map));

// CONCATENATED MODULE: ./node_modules/underscore/modules/isDataView.js





var isDataView = tagTester('DataView');

// In IE 10 - Edge 13, we need a different heuristic
// to determine whether an object is a `DataView`.
function ie10IsDataView(obj) {
  return obj != null && modules_isFunction(obj.getInt8) && isArrayBuffer(obj.buffer);
}

/* harmony default export */ var modules_isDataView = (hasStringTagBug ? ie10IsDataView : isDataView);

// CONCATENATED MODULE: ./node_modules/underscore/modules/isArray.js



// Is a given value an array?
// Delegates to ECMA5's native `Array.isArray`.
/* harmony default export */ var isArray = (_setup["k" /* nativeIsArray */] || tagTester('Array'));

// CONCATENATED MODULE: ./node_modules/underscore/modules/_has.js


// Internal function to check whether `key` is an own property name of `obj`.
function has(obj, key) {
  return obj != null && _setup["i" /* hasOwnProperty */].call(obj, key);
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/isArguments.js



var isArguments = tagTester('Arguments');

// Define a fallback version of the method in browsers (ahem, IE < 9), where
// there isn't any inspectable "Arguments" type.
(function() {
  if (!isArguments(arguments)) {
    isArguments = function(obj) {
      return has(obj, 'callee');
    };
  }
}());

/* harmony default export */ var modules_isArguments = (isArguments);

// CONCATENATED MODULE: ./node_modules/underscore/modules/isFinite.js



// Is a given object a finite number?
function isFinite_isFinite(obj) {
  return !isSymbol(obj) && Object(_setup["f" /* _isFinite */])(obj) && !isNaN(parseFloat(obj));
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/isNaN.js



// Is the given value `NaN`?
function isNaN_isNaN(obj) {
  return isNumber(obj) && Object(_setup["g" /* _isNaN */])(obj);
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/constant.js
// Predicate-generating function. Often useful outside of Underscore.
function constant(value) {
  return function() {
    return value;
  };
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/_createSizePropertyCheck.js


// Common internal logic for `isArrayLike` and `isBufferLike`.
function createSizePropertyCheck(getSizeProperty) {
  return function(collection) {
    var sizeProperty = getSizeProperty(collection);
    return typeof sizeProperty == 'number' && sizeProperty >= 0 && sizeProperty <= _setup["b" /* MAX_ARRAY_INDEX */];
  }
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/_shallowProperty.js
// Internal helper to generate a function to obtain property `key` from `obj`.
function shallowProperty(key) {
  return function(obj) {
    return obj == null ? void 0 : obj[key];
  };
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/_getByteLength.js


// Internal helper to obtain the `byteLength` property of an object.
/* harmony default export */ var _getByteLength = (shallowProperty('byteLength'));

// CONCATENATED MODULE: ./node_modules/underscore/modules/_isBufferLike.js



// Internal helper to determine whether we should spend extensive checks against
// `ArrayBuffer` et al.
/* harmony default export */ var _isBufferLike = (createSizePropertyCheck(_getByteLength));

// CONCATENATED MODULE: ./node_modules/underscore/modules/isTypedArray.js





// Is a given value a typed array?
var typedArrayPattern = /\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;
function isTypedArray(obj) {
  // `ArrayBuffer.isView` is the most future-proof, so use it when available.
  // Otherwise, fall back on the above regular expression.
  return _setup["l" /* nativeIsView */] ? (Object(_setup["l" /* nativeIsView */])(obj) && !modules_isDataView(obj)) :
                _isBufferLike(obj) && typedArrayPattern.test(_setup["t" /* toString */].call(obj));
}

/* harmony default export */ var modules_isTypedArray = (_setup["r" /* supportsArrayBuffer */] ? isTypedArray : constant(false));

// CONCATENATED MODULE: ./node_modules/underscore/modules/_getLength.js


// Internal helper to obtain the `length` property of an object.
/* harmony default export */ var _getLength = (shallowProperty('length'));

// CONCATENATED MODULE: ./node_modules/underscore/modules/_collectNonEnumProps.js




// Internal helper to create a simple lookup structure.
// `collectNonEnumProps` used to depend on `_.contains`, but this led to
// circular imports. `emulatedSet` is a one-off solution that only works for
// arrays of strings.
function emulatedSet(keys) {
  var hash = {};
  for (var l = keys.length, i = 0; i < l; ++i) hash[keys[i]] = true;
  return {
    contains: function(key) { return hash[key]; },
    push: function(key) {
      hash[key] = true;
      return keys.push(key);
    }
  };
}

// Internal helper. Checks `keys` for the presence of keys in IE < 9 that won't
// be iterated by `for key in ...` and thus missed. Extends `keys` in place if
// needed.
function collectNonEnumProps(obj, keys) {
  keys = emulatedSet(keys);
  var nonEnumIdx = _setup["n" /* nonEnumerableProps */].length;
  var constructor = obj.constructor;
  var proto = modules_isFunction(constructor) && constructor.prototype || _setup["c" /* ObjProto */];

  // Constructor is a special case.
  var prop = 'constructor';
  if (has(obj, prop) && !keys.contains(prop)) keys.push(prop);

  while (nonEnumIdx--) {
    prop = _setup["n" /* nonEnumerableProps */][nonEnumIdx];
    if (prop in obj && obj[prop] !== proto[prop] && !keys.contains(prop)) {
      keys.push(prop);
    }
  }
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/keys.js





// Retrieve the names of an object's own properties.
// Delegates to **ECMAScript 5**'s native `Object.keys`.
function keys_keys(obj) {
  if (!isObject(obj)) return [];
  if (_setup["m" /* nativeKeys */]) return Object(_setup["m" /* nativeKeys */])(obj);
  var keys = [];
  for (var key in obj) if (has(obj, key)) keys.push(key);
  // Ahem, IE < 9.
  if (_setup["h" /* hasEnumBug */]) collectNonEnumProps(obj, keys);
  return keys;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/isEmpty.js






// Is a given array, string, or object empty?
// An "empty" object has no enumerable own-properties.
function isEmpty(obj) {
  if (obj == null) return true;
  // Skip the more expensive `toString`-based type checks if `obj` has no
  // `.length`.
  var length = _getLength(obj);
  if (typeof length == 'number' && (
    isArray(obj) || isString(obj) || modules_isArguments(obj)
  )) return length === 0;
  return _getLength(keys_keys(obj)) === 0;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/isMatch.js


// Returns whether an object has a given set of `key:value` pairs.
function isMatch(object, attrs) {
  var _keys = keys_keys(attrs), length = _keys.length;
  if (object == null) return !length;
  var obj = Object(object);
  for (var i = 0; i < length; i++) {
    var key = _keys[i];
    if (attrs[key] !== obj[key] || !(key in obj)) return false;
  }
  return true;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/underscore.js


// If Underscore is called as a function, it returns a wrapped object that can
// be used OO-style. This wrapper holds altered versions of all functions added
// through `_.mixin`. Wrapped objects may be chained.
function _(obj) {
  if (obj instanceof _) return obj;
  if (!(this instanceof _)) return new _(obj);
  this._wrapped = obj;
}

_.VERSION = _setup["e" /* VERSION */];

// Extracts the result from a wrapped and chained object.
_.prototype.value = function() {
  return this._wrapped;
};

// Provide unwrapping proxies for some methods used in engine operations
// such as arithmetic and JSON stringification.
_.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

_.prototype.toString = function() {
  return String(this._wrapped);
};

// CONCATENATED MODULE: ./node_modules/underscore/modules/_toBufferView.js


// Internal function to wrap or shallow-copy an ArrayBuffer,
// typed array or DataView to a new view, reusing the buffer.
function toBufferView(bufferSource) {
  return new Uint8Array(
    bufferSource.buffer || bufferSource,
    bufferSource.byteOffset || 0,
    _getByteLength(bufferSource)
  );
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/isEqual.js











// We use this string twice, so give it a name for minification.
var tagDataView = '[object DataView]';

// Internal recursive comparison function for `_.isEqual`.
function eq(a, b, aStack, bStack) {
  // Identical objects are equal. `0 === -0`, but they aren't identical.
  // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).
  if (a === b) return a !== 0 || 1 / a === 1 / b;
  // `null` or `undefined` only equal to itself (strict comparison).
  if (a == null || b == null) return false;
  // `NaN`s are equivalent, but non-reflexive.
  if (a !== a) return b !== b;
  // Exhaust primitive checks
  var type = typeof a;
  if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
  return deepEq(a, b, aStack, bStack);
}

// Internal recursive comparison function for `_.isEqual`.
function deepEq(a, b, aStack, bStack) {
  // Unwrap any wrapped objects.
  if (a instanceof _) a = a._wrapped;
  if (b instanceof _) b = b._wrapped;
  // Compare `[[Class]]` names.
  var className = _setup["t" /* toString */].call(a);
  if (className !== _setup["t" /* toString */].call(b)) return false;
  // Work around a bug in IE 10 - Edge 13.
  if (hasStringTagBug && className == '[object Object]' && modules_isDataView(a)) {
    if (!modules_isDataView(b)) return false;
    className = tagDataView;
  }
  switch (className) {
    // These types are compared by value.
    case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
    case '[object String]':
      // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
      // equivalent to `new String("5")`.
      return '' + a === '' + b;
    case '[object Number]':
      // `NaN`s are equivalent, but non-reflexive.
      // Object(NaN) is equivalent to NaN.
      if (+a !== +a) return +b !== +b;
      // An `egal` comparison is performed for other numeric values.
      return +a === 0 ? 1 / +a === 1 / b : +a === +b;
    case '[object Date]':
    case '[object Boolean]':
      // Coerce dates and booleans to numeric primitive values. Dates are compared by their
      // millisecond representations. Note that invalid dates with millisecond representations
      // of `NaN` are not equivalent.
      return +a === +b;
    case '[object Symbol]':
      return _setup["d" /* SymbolProto */].valueOf.call(a) === _setup["d" /* SymbolProto */].valueOf.call(b);
    case '[object ArrayBuffer]':
    case tagDataView:
      // Coerce to typed array so we can fall through.
      return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);
  }

  var areArrays = className === '[object Array]';
  if (!areArrays && modules_isTypedArray(a)) {
      var byteLength = _getByteLength(a);
      if (byteLength !== _getByteLength(b)) return false;
      if (a.buffer === b.buffer && a.byteOffset === b.byteOffset) return true;
      areArrays = true;
  }
  if (!areArrays) {
    if (typeof a != 'object' || typeof b != 'object') return false;

    // Objects with different constructors are not equivalent, but `Object`s or `Array`s
    // from different frames are.
    var aCtor = a.constructor, bCtor = b.constructor;
    if (aCtor !== bCtor && !(modules_isFunction(aCtor) && aCtor instanceof aCtor &&
                             modules_isFunction(bCtor) && bCtor instanceof bCtor)
                        && ('constructor' in a && 'constructor' in b)) {
      return false;
    }
  }
  // Assume equality for cyclic structures. The algorithm for detecting cyclic
  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

  // Initializing stack of traversed objects.
  // It's done here since we only need them for objects and arrays comparison.
  aStack = aStack || [];
  bStack = bStack || [];
  var length = aStack.length;
  while (length--) {
    // Linear search. Performance is inversely proportional to the number of
    // unique nested structures.
    if (aStack[length] === a) return bStack[length] === b;
  }

  // Add the first object to the stack of traversed objects.
  aStack.push(a);
  bStack.push(b);

  // Recursively compare objects and arrays.
  if (areArrays) {
    // Compare array lengths to determine if a deep comparison is necessary.
    length = a.length;
    if (length !== b.length) return false;
    // Deep compare the contents, ignoring non-numeric properties.
    while (length--) {
      if (!eq(a[length], b[length], aStack, bStack)) return false;
    }
  } else {
    // Deep compare objects.
    var _keys = keys_keys(a), key;
    length = _keys.length;
    // Ensure that both objects contain the same number of properties before comparing deep equality.
    if (keys_keys(b).length !== length) return false;
    while (length--) {
      // Deep compare each member
      key = _keys[length];
      if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
    }
  }
  // Remove the first object from the stack of traversed objects.
  aStack.pop();
  bStack.pop();
  return true;
}

// Perform a deep comparison to check if two objects are equal.
function isEqual(a, b) {
  return eq(a, b);
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/allKeys.js




// Retrieve all the enumerable property names of an object.
function allKeys(obj) {
  if (!isObject(obj)) return [];
  var keys = [];
  for (var key in obj) keys.push(key);
  // Ahem, IE < 9.
  if (_setup["h" /* hasEnumBug */]) collectNonEnumProps(obj, keys);
  return keys;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/_methodFingerprint.js




// Since the regular `Object.prototype.toString` type tests don't work for
// some types in IE 11, we use a fingerprinting heuristic instead, based
// on the methods. It's not great, but it's the best we got.
// The fingerprint method lists are defined below.
function ie11fingerprint(methods) {
  var length = _getLength(methods);
  return function(obj) {
    if (obj == null) return false;
    // `Map`, `WeakMap` and `Set` have no enumerable keys.
    var keys = allKeys(obj);
    if (_getLength(keys)) return false;
    for (var i = 0; i < length; i++) {
      if (!modules_isFunction(obj[methods[i]])) return false;
    }
    // If we are testing against `WeakMap`, we need to ensure that
    // `obj` doesn't have a `forEach` method in order to distinguish
    // it from a regular `Map`.
    return methods !== weakMapMethods || !modules_isFunction(obj[forEachName]);
  };
}

// In the interest of compact minification, we write
// each string in the fingerprints only once.
var forEachName = 'forEach',
    hasName = 'has',
    commonInit = ['clear', 'delete'],
    mapTail = ['get', hasName, 'set'];

// `Map`, `WeakMap` and `Set` each have slightly different
// combinations of the above sublists.
var mapMethods = commonInit.concat(forEachName, mapTail),
    weakMapMethods = commonInit.concat(mapTail),
    setMethods = ['add'].concat(commonInit, forEachName, hasName);

// CONCATENATED MODULE: ./node_modules/underscore/modules/isMap.js




/* harmony default export */ var isMap = (isIE11 ? ie11fingerprint(mapMethods) : tagTester('Map'));

// CONCATENATED MODULE: ./node_modules/underscore/modules/isWeakMap.js




/* harmony default export */ var isWeakMap = (isIE11 ? ie11fingerprint(weakMapMethods) : tagTester('WeakMap'));

// CONCATENATED MODULE: ./node_modules/underscore/modules/isSet.js




/* harmony default export */ var isSet = (isIE11 ? ie11fingerprint(setMethods) : tagTester('Set'));

// CONCATENATED MODULE: ./node_modules/underscore/modules/isWeakSet.js


/* harmony default export */ var isWeakSet = (tagTester('WeakSet'));

// CONCATENATED MODULE: ./node_modules/underscore/modules/values.js


// Retrieve the values of an object's properties.
function values_values(obj) {
  var _keys = keys_keys(obj);
  var length = _keys.length;
  var values = Array(length);
  for (var i = 0; i < length; i++) {
    values[i] = obj[_keys[i]];
  }
  return values;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/pairs.js


// Convert an object into a list of `[key, value]` pairs.
// The opposite of `_.object` with one argument.
function pairs_pairs(obj) {
  var _keys = keys_keys(obj);
  var length = _keys.length;
  var pairs = Array(length);
  for (var i = 0; i < length; i++) {
    pairs[i] = [_keys[i], obj[_keys[i]]];
  }
  return pairs;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/invert.js


// Invert the keys and values of an object. The values must be serializable.
function invert(obj) {
  var result = {};
  var _keys = keys_keys(obj);
  for (var i = 0, length = _keys.length; i < length; i++) {
    result[obj[_keys[i]]] = _keys[i];
  }
  return result;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/functions.js


// Return a sorted list of the function names available on the object.
function functions(obj) {
  var names = [];
  for (var key in obj) {
    if (modules_isFunction(obj[key])) names.push(key);
  }
  return names.sort();
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/_createAssigner.js
// An internal function for creating assigner functions.
function createAssigner(keysFunc, defaults) {
  return function(obj) {
    var length = arguments.length;
    if (defaults) obj = Object(obj);
    if (length < 2 || obj == null) return obj;
    for (var index = 1; index < length; index++) {
      var source = arguments[index],
          keys = keysFunc(source),
          l = keys.length;
      for (var i = 0; i < l; i++) {
        var key = keys[i];
        if (!defaults || obj[key] === void 0) obj[key] = source[key];
      }
    }
    return obj;
  };
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/extend.js



// Extend a given object with all the properties in passed-in object(s).
/* harmony default export */ var extend = (createAssigner(allKeys));

// CONCATENATED MODULE: ./node_modules/underscore/modules/extendOwn.js



// Assigns a given object with all the own properties in the passed-in
// object(s).
// (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
/* harmony default export */ var extendOwn = (createAssigner(keys_keys));

// CONCATENATED MODULE: ./node_modules/underscore/modules/defaults.js



// Fill in a given object with default properties.
/* harmony default export */ var defaults = (createAssigner(allKeys, true));

// CONCATENATED MODULE: ./node_modules/underscore/modules/_baseCreate.js



// Create a naked function reference for surrogate-prototype-swapping.
function ctor() {
  return function(){};
}

// An internal function for creating a new object that inherits from another.
function baseCreate(prototype) {
  if (!isObject(prototype)) return {};
  if (_setup["j" /* nativeCreate */]) return Object(_setup["j" /* nativeCreate */])(prototype);
  var Ctor = ctor();
  Ctor.prototype = prototype;
  var result = new Ctor;
  Ctor.prototype = null;
  return result;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/create.js



// Creates an object that inherits from the given prototype object.
// If additional properties are provided then they will be added to the
// created object.
function create(prototype, props) {
  var result = baseCreate(prototype);
  if (props) extendOwn(result, props);
  return result;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/clone.js




// Create a (shallow-cloned) duplicate of an object.
function clone(obj) {
  if (!isObject(obj)) return obj;
  return isArray(obj) ? obj.slice() : extend({}, obj);
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/tap.js
// Invokes `interceptor` with the `obj` and then returns `obj`.
// The primary purpose of this method is to "tap into" a method chain, in
// order to perform operations on intermediate results within the chain.
function tap(obj, interceptor) {
  interceptor(obj);
  return obj;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/toPath.js



// Normalize a (deep) property `path` to array.
// Like `_.iteratee`, this function can be customized.
function toPath(path) {
  return isArray(path) ? path : [path];
}
_.toPath = toPath;

// CONCATENATED MODULE: ./node_modules/underscore/modules/_toPath.js



// Internal wrapper for `_.toPath` to enable minification.
// Similar to `cb` for `_.iteratee`.
function _toPath_toPath(path) {
  return _.toPath(path);
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/_deepGet.js
// Internal function to obtain a nested property in `obj` along `path`.
function deepGet(obj, path) {
  var length = path.length;
  for (var i = 0; i < length; i++) {
    if (obj == null) return void 0;
    obj = obj[path[i]];
  }
  return length ? obj : void 0;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/get.js




// Get the value of the (deep) property on `path` from `object`.
// If any property in `path` does not exist or if the value is
// `undefined`, return `defaultValue` instead.
// The `path` is normalized through `_.toPath`.
function get(object, path, defaultValue) {
  var value = deepGet(object, _toPath_toPath(path));
  return isUndefined(value) ? defaultValue : value;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/has.js



// Shortcut function for checking if an object has a given property directly on
// itself (in other words, not on a prototype). Unlike the internal `has`
// function, this public version can also traverse nested properties.
function has_has(obj, path) {
  path = _toPath_toPath(path);
  var length = path.length;
  for (var i = 0; i < length; i++) {
    var key = path[i];
    if (!has(obj, key)) return false;
    obj = obj[key];
  }
  return !!length;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/identity.js
// Keep the identity function around for default iteratees.
function identity(value) {
  return value;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/matcher.js



// Returns a predicate for checking whether an object has a given set of
// `key:value` pairs.
function matcher_matcher(attrs) {
  attrs = extendOwn({}, attrs);
  return function(obj) {
    return isMatch(obj, attrs);
  };
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/property.js



// Creates a function that, when passed an object, will traverse that object’s
// properties down the given `path`, specified as an array of keys or indices.
function property(path) {
  path = _toPath_toPath(path);
  return function(obj) {
    return deepGet(obj, path);
  };
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/_optimizeCb.js
// Internal function that returns an efficient (for current engines) version
// of the passed-in callback, to be repeatedly applied in other Underscore
// functions.
function optimizeCb(func, context, argCount) {
  if (context === void 0) return func;
  switch (argCount == null ? 3 : argCount) {
    case 1: return function(value) {
      return func.call(context, value);
    };
    // The 2-argument case is omitted because we’re not using it.
    case 3: return function(value, index, collection) {
      return func.call(context, value, index, collection);
    };
    case 4: return function(accumulator, value, index, collection) {
      return func.call(context, accumulator, value, index, collection);
    };
  }
  return function() {
    return func.apply(context, arguments);
  };
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/_baseIteratee.js








// An internal function to generate callbacks that can be applied to each
// element in a collection, returning the desired result — either `_.identity`,
// an arbitrary callback, a property matcher, or a property accessor.
function baseIteratee(value, context, argCount) {
  if (value == null) return identity;
  if (modules_isFunction(value)) return optimizeCb(value, context, argCount);
  if (isObject(value) && !isArray(value)) return matcher_matcher(value);
  return property(value);
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/iteratee.js



// External wrapper for our callback generator. Users may customize
// `_.iteratee` if they want additional predicate/iteratee shorthand styles.
// This abstraction hides the internal-only `argCount` argument.
function iteratee_iteratee(value, context) {
  return baseIteratee(value, context, Infinity);
}
_.iteratee = iteratee_iteratee;

// CONCATENATED MODULE: ./node_modules/underscore/modules/_cb.js




// The function we call internally to generate a callback. It invokes
// `_.iteratee` if overridden, otherwise `baseIteratee`.
function cb(value, context, argCount) {
  if (_.iteratee !== iteratee_iteratee) return _.iteratee(value, context);
  return baseIteratee(value, context, argCount);
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/mapObject.js



// Returns the results of applying the `iteratee` to each element of `obj`.
// In contrast to `_.map` it returns an object.
function mapObject(obj, iteratee, context) {
  iteratee = cb(iteratee, context);
  var _keys = keys_keys(obj),
      length = _keys.length,
      results = {};
  for (var index = 0; index < length; index++) {
    var currentKey = _keys[index];
    results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
  }
  return results;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/noop.js
// Predicate-generating function. Often useful outside of Underscore.
function noop(){}

// CONCATENATED MODULE: ./node_modules/underscore/modules/propertyOf.js



// Generates a function for a given object that returns a given property.
function propertyOf(obj) {
  if (obj == null) return noop;
  return function(path) {
    return get(obj, path);
  };
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/times.js


// Run a function **n** times.
function times(n, iteratee, context) {
  var accum = Array(Math.max(0, n));
  iteratee = optimizeCb(iteratee, context, 1);
  for (var i = 0; i < n; i++) accum[i] = iteratee(i);
  return accum;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/random.js
// Return a random integer between `min` and `max` (inclusive).
function random(min, max) {
  if (max == null) {
    max = min;
    min = 0;
  }
  return min + Math.floor(Math.random() * (max - min + 1));
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/now.js
// A (possibly faster) way to get the current timestamp as an integer.
/* harmony default export */ var now = (Date.now || function() {
  return new Date().getTime();
});

// CONCATENATED MODULE: ./node_modules/underscore/modules/_createEscaper.js


// Internal helper to generate functions for escaping and unescaping strings
// to/from HTML interpolation.
function createEscaper(map) {
  var escaper = function(match) {
    return map[match];
  };
  // Regexes for identifying a key that needs to be escaped.
  var source = '(?:' + keys_keys(map).join('|') + ')';
  var testRegexp = RegExp(source);
  var replaceRegexp = RegExp(source, 'g');
  return function(string) {
    string = string == null ? '' : '' + string;
    return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
  };
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/_escapeMap.js
// Internal list of HTML entities for escaping.
/* harmony default export */ var _escapeMap = ({
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#x27;',
  '`': '&#x60;'
});

// CONCATENATED MODULE: ./node_modules/underscore/modules/escape.js



// Function for escaping strings to HTML interpolation.
/* harmony default export */ var modules_escape = (createEscaper(_escapeMap));

// CONCATENATED MODULE: ./node_modules/underscore/modules/_unescapeMap.js



// Internal list of HTML entities for unescaping.
/* harmony default export */ var _unescapeMap = (invert(_escapeMap));

// CONCATENATED MODULE: ./node_modules/underscore/modules/unescape.js



// Function for unescaping strings from HTML interpolation.
/* harmony default export */ var modules_unescape = (createEscaper(_unescapeMap));

// CONCATENATED MODULE: ./node_modules/underscore/modules/templateSettings.js


// By default, Underscore uses ERB-style template delimiters. Change the
// following template settings to use alternative delimiters.
/* harmony default export */ var templateSettings = (_.templateSettings = {
  evaluate: /<%([\s\S]+?)%>/g,
  interpolate: /<%=([\s\S]+?)%>/g,
  escape: /<%-([\s\S]+?)%>/g
});

// CONCATENATED MODULE: ./node_modules/underscore/modules/template.js




// When customizing `_.templateSettings`, if you don't want to define an
// interpolation, evaluation or escaping regex, we need one that is
// guaranteed not to match.
var noMatch = /(.)^/;

// Certain characters need to be escaped so that they can be put into a
// string literal.
var escapes = {
  "'": "'",
  '\\': '\\',
  '\r': 'r',
  '\n': 'n',
  '\u2028': 'u2028',
  '\u2029': 'u2029'
};

var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

function escapeChar(match) {
  return '\\' + escapes[match];
}

// JavaScript micro-templating, similar to John Resig's implementation.
// Underscore templating handles arbitrary delimiters, preserves whitespace,
// and correctly escapes quotes within interpolated code.
// NB: `oldSettings` only exists for backwards compatibility.
function template_template(text, settings, oldSettings) {
  if (!settings && oldSettings) settings = oldSettings;
  settings = defaults({}, settings, _.templateSettings);

  // Combine delimiters into one regular expression via alternation.
  var matcher = RegExp([
    (settings.escape || noMatch).source,
    (settings.interpolate || noMatch).source,
    (settings.evaluate || noMatch).source
  ].join('|') + '|$', 'g');

  // Compile the template source, escaping string literals appropriately.
  var index = 0;
  var source = "__p+='";
  text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
    source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
    index = offset + match.length;

    if (escape) {
      source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
    } else if (interpolate) {
      source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
    } else if (evaluate) {
      source += "';\n" + evaluate + "\n__p+='";
    }

    // Adobe VMs need the match returned to produce the correct offset.
    return match;
  });
  source += "';\n";

  // If a variable is not specified, place data values in local scope.
  if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

  source = "var __t,__p='',__j=Array.prototype.join," +
    "print=function(){__p+=__j.call(arguments,'');};\n" +
    source + 'return __p;\n';

  var render;
  try {
    render = new Function(settings.variable || 'obj', '_', source);
  } catch (e) {
    e.source = source;
    throw e;
  }

  var template = function(data) {
    return render.call(this, data, _);
  };

  // Provide the compiled source as a convenience for precompilation.
  var argument = settings.variable || 'obj';
  template.source = 'function(' + argument + '){\n' + source + '}';

  return template;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/result.js



// Traverses the children of `obj` along `path`. If a child is a function, it
// is invoked with its parent as context. Returns the value of the final
// child, or `fallback` if any child is undefined.
function result_result(obj, path, fallback) {
  path = _toPath_toPath(path);
  var length = path.length;
  if (!length) {
    return modules_isFunction(fallback) ? fallback.call(obj) : fallback;
  }
  for (var i = 0; i < length; i++) {
    var prop = obj == null ? void 0 : obj[path[i]];
    if (prop === void 0) {
      prop = fallback;
      i = length; // Ensure we don't continue iterating.
    }
    obj = modules_isFunction(prop) ? prop.call(obj) : prop;
  }
  return obj;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/uniqueId.js
// Generate a unique integer id (unique within the entire client session).
// Useful for temporary DOM ids.
var idCounter = 0;
function uniqueId(prefix) {
  var id = ++idCounter + '';
  return prefix ? prefix + id : id;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/chain.js


// Start chaining a wrapped Underscore object.
function chain(obj) {
  var instance = _(obj);
  instance._chain = true;
  return instance;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/_executeBound.js



// Internal function to execute `sourceFunc` bound to `context` with optional
// `args`. Determines whether to execute a function as a constructor or as a
// normal function.
function executeBound(sourceFunc, boundFunc, context, callingContext, args) {
  if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
  var self = baseCreate(sourceFunc.prototype);
  var result = sourceFunc.apply(self, args);
  if (isObject(result)) return result;
  return self;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/partial.js




// Partially apply a function by creating a version that has had some of its
// arguments pre-filled, without changing its dynamic `this` context. `_` acts
// as a placeholder by default, allowing any combination of arguments to be
// pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
var partial = restArguments(function(func, boundArgs) {
  var placeholder = partial.placeholder;
  var bound = function() {
    var position = 0, length = boundArgs.length;
    var args = Array(length);
    for (var i = 0; i < length; i++) {
      args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
    }
    while (position < arguments.length) args.push(arguments[position++]);
    return executeBound(func, bound, this, this, args);
  };
  return bound;
});

partial.placeholder = _;
/* harmony default export */ var modules_partial = (partial);

// CONCATENATED MODULE: ./node_modules/underscore/modules/bind.js




// Create a function bound to a given object (assigning `this`, and arguments,
// optionally).
/* harmony default export */ var bind = (restArguments(function(func, context, args) {
  if (!modules_isFunction(func)) throw new TypeError('Bind must be called on a function');
  var bound = restArguments(function(callArgs) {
    return executeBound(func, bound, context, this, args.concat(callArgs));
  });
  return bound;
}));

// CONCATENATED MODULE: ./node_modules/underscore/modules/_isArrayLike.js



// Internal helper for collection methods to determine whether a collection
// should be iterated as an array or as an object.
// Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
// Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
/* harmony default export */ var _isArrayLike = (createSizePropertyCheck(_getLength));

// CONCATENATED MODULE: ./node_modules/underscore/modules/_flatten.js





// Internal implementation of a recursive `flatten` function.
function flatten(input, depth, strict, output) {
  output = output || [];
  if (!depth && depth !== 0) {
    depth = Infinity;
  } else if (depth <= 0) {
    return output.concat(input);
  }
  var idx = output.length;
  for (var i = 0, length = _getLength(input); i < length; i++) {
    var value = input[i];
    if (_isArrayLike(value) && (isArray(value) || modules_isArguments(value))) {
      // Flatten current level of array or arguments object.
      if (depth > 1) {
        flatten(value, depth - 1, strict, output);
        idx = output.length;
      } else {
        var j = 0, len = value.length;
        while (j < len) output[idx++] = value[j++];
      }
    } else if (!strict) {
      output[idx++] = value;
    }
  }
  return output;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/bindAll.js




// Bind a number of an object's methods to that object. Remaining arguments
// are the method names to be bound. Useful for ensuring that all callbacks
// defined on an object belong to it.
/* harmony default export */ var bindAll = (restArguments(function(obj, keys) {
  keys = flatten(keys, false, false);
  var index = keys.length;
  if (index < 1) throw new Error('bindAll must be passed function names');
  while (index--) {
    var key = keys[index];
    obj[key] = bind(obj[key], obj);
  }
  return obj;
}));

// CONCATENATED MODULE: ./node_modules/underscore/modules/memoize.js


// Memoize an expensive function by storing its results.
function memoize_memoize(func, hasher) {
  var memoize = function(key) {
    var cache = memoize.cache;
    var address = '' + (hasher ? hasher.apply(this, arguments) : key);
    if (!has(cache, address)) cache[address] = func.apply(this, arguments);
    return cache[address];
  };
  memoize.cache = {};
  return memoize;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/delay.js


// Delays a function for the given number of milliseconds, and then calls
// it with the arguments supplied.
/* harmony default export */ var delay = (restArguments(function(func, wait, args) {
  return setTimeout(function() {
    return func.apply(null, args);
  }, wait);
}));

// CONCATENATED MODULE: ./node_modules/underscore/modules/defer.js




// Defers a function, scheduling it to run after the current call stack has
// cleared.
/* harmony default export */ var defer = (modules_partial(delay, _, 1));

// CONCATENATED MODULE: ./node_modules/underscore/modules/throttle.js


// Returns a function, that, when invoked, will only be triggered at most once
// during a given window of time. Normally, the throttled function will run
// as much as it can, without ever going more than once per `wait` duration;
// but if you'd like to disable the execution on the leading edge, pass
// `{leading: false}`. To disable execution on the trailing edge, ditto.
function throttle(func, wait, options) {
  var timeout, context, args, result;
  var previous = 0;
  if (!options) options = {};

  var later = function() {
    previous = options.leading === false ? 0 : now();
    timeout = null;
    result = func.apply(context, args);
    if (!timeout) context = args = null;
  };

  var throttled = function() {
    var _now = now();
    if (!previous && options.leading === false) previous = _now;
    var remaining = wait - (_now - previous);
    context = this;
    args = arguments;
    if (remaining <= 0 || remaining > wait) {
      if (timeout) {
        clearTimeout(timeout);
        timeout = null;
      }
      previous = _now;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    } else if (!timeout && options.trailing !== false) {
      timeout = setTimeout(later, remaining);
    }
    return result;
  };

  throttled.cancel = function() {
    clearTimeout(timeout);
    previous = 0;
    timeout = context = args = null;
  };

  return throttled;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/debounce.js



// When a sequence of calls of the returned function ends, the argument
// function is triggered. The end of a sequence is defined by the `wait`
// parameter. If `immediate` is passed, the argument function will be
// triggered at the beginning of the sequence instead of at the end.
function debounce(func, wait, immediate) {
  var timeout, result;

  var later = function(context, args) {
    timeout = null;
    if (args) result = func.apply(context, args);
  };

  var debounced = restArguments(function(args) {
    if (timeout) clearTimeout(timeout);
    if (immediate) {
      var callNow = !timeout;
      timeout = setTimeout(later, wait);
      if (callNow) result = func.apply(this, args);
    } else {
      timeout = delay(later, wait, this, args);
    }

    return result;
  });

  debounced.cancel = function() {
    clearTimeout(timeout);
    timeout = null;
  };

  return debounced;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/wrap.js


// Returns the first function passed as an argument to the second,
// allowing you to adjust arguments, run code before and after, and
// conditionally execute the original function.
function wrap(func, wrapper) {
  return modules_partial(wrapper, func);
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/negate.js
// Returns a negated version of the passed-in predicate.
function negate(predicate) {
  return function() {
    return !predicate.apply(this, arguments);
  };
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/compose.js
// Returns a function that is the composition of a list of functions, each
// consuming the return value of the function that follows.
function compose() {
  var args = arguments;
  var start = args.length - 1;
  return function() {
    var i = start;
    var result = args[start].apply(this, arguments);
    while (i--) result = args[i].call(this, result);
    return result;
  };
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/after.js
// Returns a function that will only be executed on and after the Nth call.
function after(times, func) {
  return function() {
    if (--times < 1) {
      return func.apply(this, arguments);
    }
  };
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/before.js
// Returns a function that will only be executed up to (but not including) the
// Nth call.
function before(times, func) {
  var memo;
  return function() {
    if (--times > 0) {
      memo = func.apply(this, arguments);
    }
    if (times <= 1) func = null;
    return memo;
  };
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/once.js



// Returns a function that will be executed at most one time, no matter how
// often you call it. Useful for lazy initialization.
/* harmony default export */ var once = (modules_partial(before, 2));

// CONCATENATED MODULE: ./node_modules/underscore/modules/findKey.js



// Returns the first key on an object that passes a truth test.
function findKey(obj, predicate, context) {
  predicate = cb(predicate, context);
  var _keys = keys_keys(obj), key;
  for (var i = 0, length = _keys.length; i < length; i++) {
    key = _keys[i];
    if (predicate(obj[key], key, obj)) return key;
  }
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/_createPredicateIndexFinder.js



// Internal function to generate `_.findIndex` and `_.findLastIndex`.
function createPredicateIndexFinder(dir) {
  return function(array, predicate, context) {
    predicate = cb(predicate, context);
    var length = _getLength(array);
    var index = dir > 0 ? 0 : length - 1;
    for (; index >= 0 && index < length; index += dir) {
      if (predicate(array[index], index, array)) return index;
    }
    return -1;
  };
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/findIndex.js


// Returns the first index on an array-like that passes a truth test.
/* harmony default export */ var findIndex = (createPredicateIndexFinder(1));

// CONCATENATED MODULE: ./node_modules/underscore/modules/findLastIndex.js


// Returns the last index on an array-like that passes a truth test.
/* harmony default export */ var findLastIndex = (createPredicateIndexFinder(-1));

// CONCATENATED MODULE: ./node_modules/underscore/modules/sortedIndex.js



// Use a comparator function to figure out the smallest index at which
// an object should be inserted so as to maintain order. Uses binary search.
function sortedIndex_sortedIndex(array, obj, iteratee, context) {
  iteratee = cb(iteratee, context, 1);
  var value = iteratee(obj);
  var low = 0, high = _getLength(array);
  while (low < high) {
    var mid = Math.floor((low + high) / 2);
    if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
  }
  return low;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/_createIndexFinder.js




// Internal function to generate the `_.indexOf` and `_.lastIndexOf` functions.
function createIndexFinder(dir, predicateFind, sortedIndex) {
  return function(array, item, idx) {
    var i = 0, length = _getLength(array);
    if (typeof idx == 'number') {
      if (dir > 0) {
        i = idx >= 0 ? idx : Math.max(idx + length, i);
      } else {
        length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
      }
    } else if (sortedIndex && idx && length) {
      idx = sortedIndex(array, item);
      return array[idx] === item ? idx : -1;
    }
    if (item !== item) {
      idx = predicateFind(_setup["q" /* slice */].call(array, i, length), isNaN_isNaN);
      return idx >= 0 ? idx + i : -1;
    }
    for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
      if (array[idx] === item) return idx;
    }
    return -1;
  };
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/indexOf.js




// Return the position of the first occurrence of an item in an array,
// or -1 if the item is not included in the array.
// If the array is large and already in sort order, pass `true`
// for **isSorted** to use binary search.
/* harmony default export */ var indexOf = (createIndexFinder(1, findIndex, sortedIndex_sortedIndex));

// CONCATENATED MODULE: ./node_modules/underscore/modules/lastIndexOf.js



// Return the position of the last occurrence of an item in an array,
// or -1 if the item is not included in the array.
/* harmony default export */ var lastIndexOf = (createIndexFinder(-1, findLastIndex));

// CONCATENATED MODULE: ./node_modules/underscore/modules/find.js




// Return the first value which passes a truth test.
function find(obj, predicate, context) {
  var keyFinder = _isArrayLike(obj) ? findIndex : findKey;
  var key = keyFinder(obj, predicate, context);
  if (key !== void 0 && key !== -1) return obj[key];
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/findWhere.js



// Convenience version of a common use case of `_.find`: getting the first
// object containing specific `key:value` pairs.
function findWhere(obj, attrs) {
  return find(obj, matcher_matcher(attrs));
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/each.js




// The cornerstone for collection functions, an `each`
// implementation, aka `forEach`.
// Handles raw objects in addition to array-likes. Treats all
// sparse array-likes as if they were dense.
function each(obj, iteratee, context) {
  iteratee = optimizeCb(iteratee, context);
  var i, length;
  if (_isArrayLike(obj)) {
    for (i = 0, length = obj.length; i < length; i++) {
      iteratee(obj[i], i, obj);
    }
  } else {
    var _keys = keys_keys(obj);
    for (i = 0, length = _keys.length; i < length; i++) {
      iteratee(obj[_keys[i]], _keys[i], obj);
    }
  }
  return obj;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/map.js




// Return the results of applying the iteratee to each element.
function map_map(obj, iteratee, context) {
  iteratee = cb(iteratee, context);
  var _keys = !_isArrayLike(obj) && keys_keys(obj),
      length = (_keys || obj).length,
      results = Array(length);
  for (var index = 0; index < length; index++) {
    var currentKey = _keys ? _keys[index] : index;
    results[index] = iteratee(obj[currentKey], currentKey, obj);
  }
  return results;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/_createReduce.js




// Internal helper to create a reducing function, iterating left or right.
function createReduce(dir) {
  // Wrap code that reassigns argument variables in a separate function than
  // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
  var reducer = function(obj, iteratee, memo, initial) {
    var _keys = !_isArrayLike(obj) && keys_keys(obj),
        length = (_keys || obj).length,
        index = dir > 0 ? 0 : length - 1;
    if (!initial) {
      memo = obj[_keys ? _keys[index] : index];
      index += dir;
    }
    for (; index >= 0 && index < length; index += dir) {
      var currentKey = _keys ? _keys[index] : index;
      memo = iteratee(memo, obj[currentKey], currentKey, obj);
    }
    return memo;
  };

  return function(obj, iteratee, memo, context) {
    var initial = arguments.length >= 3;
    return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
  };
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/reduce.js


// **Reduce** builds up a single result from a list of values, aka `inject`,
// or `foldl`.
/* harmony default export */ var reduce = (createReduce(1));

// CONCATENATED MODULE: ./node_modules/underscore/modules/reduceRight.js


// The right-associative version of reduce, also known as `foldr`.
/* harmony default export */ var reduceRight = (createReduce(-1));

// CONCATENATED MODULE: ./node_modules/underscore/modules/filter.js



// Return all the elements that pass a truth test.
function filter(obj, predicate, context) {
  var results = [];
  predicate = cb(predicate, context);
  each(obj, function(value, index, list) {
    if (predicate(value, index, list)) results.push(value);
  });
  return results;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/reject.js




// Return all the elements for which a truth test fails.
function reject(obj, predicate, context) {
  return filter(obj, negate(cb(predicate)), context);
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/every.js




// Determine whether all of the elements pass a truth test.
function every(obj, predicate, context) {
  predicate = cb(predicate, context);
  var _keys = !_isArrayLike(obj) && keys_keys(obj),
      length = (_keys || obj).length;
  for (var index = 0; index < length; index++) {
    var currentKey = _keys ? _keys[index] : index;
    if (!predicate(obj[currentKey], currentKey, obj)) return false;
  }
  return true;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/some.js




// Determine if at least one element in the object passes a truth test.
function some(obj, predicate, context) {
  predicate = cb(predicate, context);
  var _keys = !_isArrayLike(obj) && keys_keys(obj),
      length = (_keys || obj).length;
  for (var index = 0; index < length; index++) {
    var currentKey = _keys ? _keys[index] : index;
    if (predicate(obj[currentKey], currentKey, obj)) return true;
  }
  return false;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/contains.js




// Determine if the array or object contains a given item (using `===`).
function contains(obj, item, fromIndex, guard) {
  if (!_isArrayLike(obj)) obj = values_values(obj);
  if (typeof fromIndex != 'number' || guard) fromIndex = 0;
  return indexOf(obj, item, fromIndex) >= 0;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/invoke.js






// Invoke a method (with arguments) on every item in a collection.
/* harmony default export */ var invoke = (restArguments(function(obj, path, args) {
  var contextPath, func;
  if (modules_isFunction(path)) {
    func = path;
  } else {
    path = _toPath_toPath(path);
    contextPath = path.slice(0, -1);
    path = path[path.length - 1];
  }
  return map_map(obj, function(context) {
    var method = func;
    if (!method) {
      if (contextPath && contextPath.length) {
        context = deepGet(context, contextPath);
      }
      if (context == null) return void 0;
      method = context[path];
    }
    return method == null ? method : method.apply(context, args);
  });
}));

// CONCATENATED MODULE: ./node_modules/underscore/modules/pluck.js



// Convenience version of a common use case of `_.map`: fetching a property.
function pluck(obj, key) {
  return map_map(obj, property(key));
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/where.js



// Convenience version of a common use case of `_.filter`: selecting only
// objects containing specific `key:value` pairs.
function where(obj, attrs) {
  return filter(obj, matcher_matcher(attrs));
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/max.js





// Return the maximum element (or element-based computation).
function max(obj, iteratee, context) {
  var result = -Infinity, lastComputed = -Infinity,
      value, computed;
  if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
    obj = _isArrayLike(obj) ? obj : values_values(obj);
    for (var i = 0, length = obj.length; i < length; i++) {
      value = obj[i];
      if (value != null && value > result) {
        result = value;
      }
    }
  } else {
    iteratee = cb(iteratee, context);
    each(obj, function(v, index, list) {
      computed = iteratee(v, index, list);
      if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
        result = v;
        lastComputed = computed;
      }
    });
  }
  return result;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/min.js





// Return the minimum element (or element-based computation).
function min(obj, iteratee, context) {
  var result = Infinity, lastComputed = Infinity,
      value, computed;
  if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
    obj = _isArrayLike(obj) ? obj : values_values(obj);
    for (var i = 0, length = obj.length; i < length; i++) {
      value = obj[i];
      if (value != null && value < result) {
        result = value;
      }
    }
  } else {
    iteratee = cb(iteratee, context);
    each(obj, function(v, index, list) {
      computed = iteratee(v, index, list);
      if (computed < lastComputed || computed === Infinity && result === Infinity) {
        result = v;
        lastComputed = computed;
      }
    });
  }
  return result;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/sample.js






// Sample **n** random values from a collection using the modern version of the
// [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
// If **n** is not specified, returns a single random element.
// The internal `guard` argument allows it to work with `_.map`.
function sample_sample(obj, n, guard) {
  if (n == null || guard) {
    if (!_isArrayLike(obj)) obj = values_values(obj);
    return obj[random(obj.length - 1)];
  }
  var sample = _isArrayLike(obj) ? clone(obj) : values_values(obj);
  var length = _getLength(sample);
  n = Math.max(Math.min(n, length), 0);
  var last = length - 1;
  for (var index = 0; index < n; index++) {
    var rand = random(index, last);
    var temp = sample[index];
    sample[index] = sample[rand];
    sample[rand] = temp;
  }
  return sample.slice(0, n);
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/shuffle.js


// Shuffle a collection.
function shuffle(obj) {
  return sample_sample(obj, Infinity);
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/sortBy.js




// Sort the object's values by a criterion produced by an iteratee.
function sortBy(obj, iteratee, context) {
  var index = 0;
  iteratee = cb(iteratee, context);
  return pluck(map_map(obj, function(value, key, list) {
    return {
      value: value,
      index: index++,
      criteria: iteratee(value, key, list)
    };
  }).sort(function(left, right) {
    var a = left.criteria;
    var b = right.criteria;
    if (a !== b) {
      if (a > b || a === void 0) return 1;
      if (a < b || b === void 0) return -1;
    }
    return left.index - right.index;
  }), 'value');
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/_group.js



// An internal function used for aggregate "group by" operations.
function group(behavior, partition) {
  return function(obj, iteratee, context) {
    var result = partition ? [[], []] : {};
    iteratee = cb(iteratee, context);
    each(obj, function(value, index) {
      var key = iteratee(value, index, obj);
      behavior(result, value, key);
    });
    return result;
  };
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/groupBy.js



// Groups the object's values by a criterion. Pass either a string attribute
// to group by, or a function that returns the criterion.
/* harmony default export */ var groupBy = (group(function(result, value, key) {
  if (has(result, key)) result[key].push(value); else result[key] = [value];
}));

// CONCATENATED MODULE: ./node_modules/underscore/modules/indexBy.js


// Indexes the object's values by a criterion, similar to `_.groupBy`, but for
// when you know that your index values will be unique.
/* harmony default export */ var indexBy = (group(function(result, value, key) {
  result[key] = value;
}));

// CONCATENATED MODULE: ./node_modules/underscore/modules/countBy.js



// Counts instances of an object that group by a certain criterion. Pass
// either a string attribute to count by, or a function that returns the
// criterion.
/* harmony default export */ var countBy = (group(function(result, value, key) {
  if (has(result, key)) result[key]++; else result[key] = 1;
}));

// CONCATENATED MODULE: ./node_modules/underscore/modules/partition.js


// Split a collection into two arrays: one whose elements all pass the given
// truth test, and one whose elements all do not pass the truth test.
/* harmony default export */ var modules_partition = (group(function(result, value, pass) {
  result[pass ? 0 : 1].push(value);
}, true));

// CONCATENATED MODULE: ./node_modules/underscore/modules/toArray.js








// Safely create a real, live array from anything iterable.
var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
function toArray(obj) {
  if (!obj) return [];
  if (isArray(obj)) return _setup["q" /* slice */].call(obj);
  if (isString(obj)) {
    // Keep surrogate pair characters together.
    return obj.match(reStrSymbol);
  }
  if (_isArrayLike(obj)) return map_map(obj, identity);
  return values_values(obj);
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/size.js



// Return the number of elements in a collection.
function size(obj) {
  if (obj == null) return 0;
  return _isArrayLike(obj) ? obj.length : keys_keys(obj).length;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/_keyInObj.js
// Internal `_.pick` helper function to determine whether `key` is an enumerable
// property name of `obj`.
function keyInObj(value, key, obj) {
  return key in obj;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/pick.js







// Return a copy of the object only containing the allowed properties.
/* harmony default export */ var pick = (restArguments(function(obj, keys) {
  var result = {}, iteratee = keys[0];
  if (obj == null) return result;
  if (modules_isFunction(iteratee)) {
    if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
    keys = allKeys(obj);
  } else {
    iteratee = keyInObj;
    keys = flatten(keys, false, false);
    obj = Object(obj);
  }
  for (var i = 0, length = keys.length; i < length; i++) {
    var key = keys[i];
    var value = obj[key];
    if (iteratee(value, key, obj)) result[key] = value;
  }
  return result;
}));

// CONCATENATED MODULE: ./node_modules/underscore/modules/omit.js








// Return a copy of the object without the disallowed properties.
/* harmony default export */ var omit = (restArguments(function(obj, keys) {
  var iteratee = keys[0], context;
  if (modules_isFunction(iteratee)) {
    iteratee = negate(iteratee);
    if (keys.length > 1) context = keys[1];
  } else {
    keys = map_map(flatten(keys, false, false), String);
    iteratee = function(value, key) {
      return !contains(keys, key);
    };
  }
  return pick(obj, iteratee, context);
}));

// CONCATENATED MODULE: ./node_modules/underscore/modules/initial.js


// Returns everything but the last entry of the array. Especially useful on
// the arguments object. Passing **n** will return all the values in
// the array, excluding the last N.
function initial_initial(array, n, guard) {
  return _setup["q" /* slice */].call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/first.js


// Get the first element of an array. Passing **n** will return the first N
// values in the array. The **guard** check allows it to work with `_.map`.
function first(array, n, guard) {
  if (array == null || array.length < 1) return n == null || guard ? void 0 : [];
  if (n == null || guard) return array[0];
  return initial_initial(array, array.length - n);
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/rest.js


// Returns everything but the first entry of the `array`. Especially useful on
// the `arguments` object. Passing an **n** will return the rest N values in the
// `array`.
function rest_rest(array, n, guard) {
  return _setup["q" /* slice */].call(array, n == null || guard ? 1 : n);
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/last.js


// Get the last element of an array. Passing **n** will return the last N
// values in the array.
function last_last(array, n, guard) {
  if (array == null || array.length < 1) return n == null || guard ? void 0 : [];
  if (n == null || guard) return array[array.length - 1];
  return rest_rest(array, Math.max(0, array.length - n));
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/compact.js


// Trim out all falsy values from an array.
function compact(array) {
  return filter(array, Boolean);
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/flatten.js


// Flatten out an array, either recursively (by default), or up to `depth`.
// Passing `true` or `false` as `depth` means `1` or `Infinity`, respectively.
function flatten_flatten(array, depth) {
  return flatten(array, depth, false);
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/difference.js





// Take the difference between one array and a number of other arrays.
// Only the elements present in just the first array will remain.
/* harmony default export */ var difference = (restArguments(function(array, rest) {
  rest = flatten(rest, true, true);
  return filter(array, function(value){
    return !contains(rest, value);
  });
}));

// CONCATENATED MODULE: ./node_modules/underscore/modules/without.js



// Return a version of the array that does not contain the specified value(s).
/* harmony default export */ var without = (restArguments(function(array, otherArrays) {
  return difference(array, otherArrays);
}));

// CONCATENATED MODULE: ./node_modules/underscore/modules/uniq.js





// Produce a duplicate-free version of the array. If the array has already
// been sorted, you have the option of using a faster algorithm.
// The faster algorithm will not work with an iteratee if the iteratee
// is not a one-to-one function, so providing an iteratee will disable
// the faster algorithm.
function uniq(array, isSorted, iteratee, context) {
  if (!isBoolean(isSorted)) {
    context = iteratee;
    iteratee = isSorted;
    isSorted = false;
  }
  if (iteratee != null) iteratee = cb(iteratee, context);
  var result = [];
  var seen = [];
  for (var i = 0, length = _getLength(array); i < length; i++) {
    var value = array[i],
        computed = iteratee ? iteratee(value, i, array) : value;
    if (isSorted && !iteratee) {
      if (!i || seen !== computed) result.push(value);
      seen = computed;
    } else if (iteratee) {
      if (!contains(seen, computed)) {
        seen.push(computed);
        result.push(value);
      }
    } else if (!contains(result, value)) {
      result.push(value);
    }
  }
  return result;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/union.js




// Produce an array that contains the union: each distinct element from all of
// the passed-in arrays.
/* harmony default export */ var union = (restArguments(function(arrays) {
  return uniq(flatten(arrays, true, true));
}));

// CONCATENATED MODULE: ./node_modules/underscore/modules/intersection.js



// Produce an array that contains every item shared between all the
// passed-in arrays.
function intersection(array) {
  var result = [];
  var argsLength = arguments.length;
  for (var i = 0, length = _getLength(array); i < length; i++) {
    var item = array[i];
    if (contains(result, item)) continue;
    var j;
    for (j = 1; j < argsLength; j++) {
      if (!contains(arguments[j], item)) break;
    }
    if (j === argsLength) result.push(item);
  }
  return result;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/unzip.js




// Complement of zip. Unzip accepts an array of arrays and groups
// each array's elements on shared indices.
function unzip(array) {
  var length = array && max(array, _getLength).length || 0;
  var result = Array(length);

  for (var index = 0; index < length; index++) {
    result[index] = pluck(array, index);
  }
  return result;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/zip.js



// Zip together multiple lists into a single array -- elements that share
// an index go together.
/* harmony default export */ var zip = (restArguments(unzip));

// CONCATENATED MODULE: ./node_modules/underscore/modules/object.js


// Converts lists into objects. Pass either a single array of `[key, value]`
// pairs, or two parallel arrays of the same length -- one of keys, and one of
// the corresponding values. Passing by pairs is the reverse of `_.pairs`.
function object_object(list, values) {
  var result = {};
  for (var i = 0, length = _getLength(list); i < length; i++) {
    if (values) {
      result[list[i]] = values[i];
    } else {
      result[list[i][0]] = list[i][1];
    }
  }
  return result;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/range.js
// Generate an integer Array containing an arithmetic progression. A port of
// the native Python `range()` function. See
// [the Python documentation](https://docs.python.org/library/functions.html#range).
function range(start, stop, step) {
  if (stop == null) {
    stop = start || 0;
    start = 0;
  }
  if (!step) {
    step = stop < start ? -1 : 1;
  }

  var length = Math.max(Math.ceil((stop - start) / step), 0);
  var range = Array(length);

  for (var idx = 0; idx < length; idx++, start += step) {
    range[idx] = start;
  }

  return range;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/chunk.js


// Chunk a single array into multiple arrays, each containing `count` or fewer
// items.
function chunk(array, count) {
  if (count == null || count < 1) return [];
  var result = [];
  var i = 0, length = array.length;
  while (i < length) {
    result.push(_setup["q" /* slice */].call(array, i, i += count));
  }
  return result;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/_chainResult.js


// Helper function to continue chaining intermediate results.
function chainResult(instance, obj) {
  return instance._chain ? _(obj).chain() : obj;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/mixin.js






// Add your own custom functions to the Underscore object.
function mixin(obj) {
  each(functions(obj), function(name) {
    var func = _[name] = obj[name];
    _.prototype[name] = function() {
      var args = [this._wrapped];
      _setup["o" /* push */].apply(args, arguments);
      return chainResult(this, func.apply(_, args));
    };
  });
  return _;
}

// CONCATENATED MODULE: ./node_modules/underscore/modules/underscore-array-methods.js





// Add all mutator `Array` functions to the wrapper.
each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
  var method = _setup["a" /* ArrayProto */][name];
  _.prototype[name] = function() {
    var obj = this._wrapped;
    if (obj != null) {
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) {
        delete obj[0];
      }
    }
    return chainResult(this, obj);
  };
});

// Add all accessor `Array` functions to the wrapper.
each(['concat', 'join', 'slice'], function(name) {
  var method = _setup["a" /* ArrayProto */][name];
  _.prototype[name] = function() {
    var obj = this._wrapped;
    if (obj != null) obj = method.apply(obj, arguments);
    return chainResult(this, obj);
  };
});

/* harmony default export */ var underscore_array_methods = (_);

// CONCATENATED MODULE: ./node_modules/underscore/modules/index.js
// Named Exports
// =============

//     Underscore.js 1.12.0
//     https://underscorejs.org
//     (c) 2009-2020 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

// Baseline setup.



// Object Functions
// ----------------
// Our most fundamental functions operate on any JavaScript object.
// Most functions in Underscore depend on at least one function in this section.

// A group of functions that check the types of core JavaScript values.
// These are often informally referred to as the "isType" functions.



























// Functions that treat an object as a dictionary of key-value pairs.
















// Utility Functions
// -----------------
// A bit of a grab bag: Predicate-generating functions for use with filters and
// loops, string escaping and templating, create random numbers and unique ids,
// and functions that facilitate Underscore's chaining and iteration conventions.



















// Function (ahem) Functions
// -------------------------
// These functions take a function as an argument and return a new function
// as the result. Also known as higher-order functions.















// Finders
// -------
// Functions that extract (the position of) a single element from an object
// or array based on some criterion.









// Collection Functions
// --------------------
// Functions that work on any collection of elements: either an array, or
// an object of key-value pairs.
























// `_.pick` and `_.omit` are actually object functions, but we put
// them here in order to create a more natural reading order in the
// monolithic build as they depend on `_.contains`.



// Array Functions
// ---------------
// Functions that operate on arrays (and array-likes) only, because they’re
// expressed in terms of operations on an ordered list of values.

















// OOP
// ---
// These modules support the "object-oriented" calling style. See also
// `underscore.js` and `index-default.js`.



// CONCATENATED MODULE: ./node_modules/underscore/modules/index-default.js
// Default Export
// ==============
// In this module, we mix our bundled exports into the `_` object and export
// the result. This is analogous to setting `module.exports = _` in CommonJS.
// Hence, this module is also the entry point of our UMD bundle and the package
// entry point for CommonJS and AMD users. In other words, this is (the source
// of) the module you are interfacing with when you do any of the following:
//
// ```js
// // CommonJS
// var _ = require('underscore');
//
// // AMD
// define(['underscore'], function(_) {...});
//
// // UMD in the browser
// // _ is available as a global variable
// ```



// Add all of the Underscore functions to the wrapper object.
var index_default_ = mixin(modules_namespaceObject);
// Legacy Node.js API.
index_default_._ = index_default_;
// Export the Underscore API.
/* harmony default export */ var index_default = (index_default_);

// CONCATENATED MODULE: ./node_modules/underscore/modules/index-all.js
// ESM Exports
// ===========
// This module is the package entry point for ES module users. In other words,
// it is the module they are interfacing with when they import from the whole
// package instead of from a submodule, like this:
//
// ```js
// import { map } from 'underscore';
// ```
//
// The difference with `./index-default`, which is the package entry point for
// CommonJS, AMD and UMD users, is purely technical. In ES modules, named and
// default exports are considered to be siblings, so when you have a default
// export, its properties are not automatically available as named exports. For
// this reason, we re-export the named exports in addition to providing the same
// default export as in `./index-default`.




/***/ }),

/***/ 111:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return parser; });
/* harmony import */ var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(37);
/* harmony import */ var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _core_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _core_logging__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(28);
/* harmony import */ var _core_parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(50);
/* harmony import */ var _core_registry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(12);
/* harmony import */ var _core_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(13);
function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

 // needed for ``await`` support






 // Lazy loading modules.

var Tippy;
var log = _core_logging__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].getLogger("pat-tooltip");
var parser = new _core_parser__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]("tooltip");
var all_positions = ["tl", "tm", "tr", "rt", "rm", "rb", "br", "bm", "bl", "lb", "lm", "lt"];
parser.addArgument("position-list", [], all_positions, true);
parser.addArgument("position-policy", "auto", ["auto", "force"]);
parser.addArgument("trigger", "click", ["click", "hover"]);
parser.addArgument("source", "title", ["ajax", "content", "title"]);
parser.addArgument("ajax-data-type", "html", ["html", "markdown"]);
parser.addArgument("closing", "auto", ["auto", "sticky", "close-button"]);
parser.addArgument("delay");
parser.addArgument("mark-inactive", true);
parser.addArgument("class");
parser.addArgument("target", "body");
parser.addArgument("arrow-padding", null);
/* harmony default export */ __webpack_exports__["a"] = (_core_base__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].extend({
  name: "tooltip",
  trigger: ".pat-tooltip, .pat-tooltip-ng",
  tippy: null,
  ajax_state: {
    isFetching: false,
    canFetch: true
  },
  active_class: "tooltip-active-hover",
  inactive_class: "tooltip-inactive",
  init: function init($el, opts) {
    var _this = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var el, defaultProps;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              el = _this.el;
              _context.next = 3;
              return __webpack_require__.e(/* import() */ 192).then(__webpack_require__.bind(null, 583));

            case 3:
              Tippy = _context.sent;
              Tippy = Tippy.default;

              if (!window.__patternslib_import_styles) {
                _context.next = 8;
                break;
              }

              _context.next = 8;
              return __webpack_require__.e(/* import() */ 167).then(__webpack_require__.t.bind(null, 584, 7));

            case 8:
              _this.options = parser.parse(el, opts);
              _this.tippy_options = _this.parseOptionsForTippy(_this.options);
              defaultProps = {
                animation: false,
                arrow: true,
                //'delay': [0, 1800],
                //'duration': [325, 275],
                hideOnClick: _this.options.closing === "close-button" ? false : true,
                ignoreAttributes: true,
                interactive: true,
                onHide: _this._onHide.bind(_this),
                onShow: _this._onShow.bind(_this),
                onMount: _this._onMount.bind(_this),
                trigger: "click"
              };
              Tippy.setDefaultProps(defaultProps);
              _this.tippy = new Tippy(el, _this.tippy_options);

              if (el.getAttribute("title")) {
                // Remove title attribute to disable browser's built-in tooltip feature
                el.removeAttribute("title");
              }

              if (_this.options.trigger === "click" && _this.options.source === "ajax") {
                // prevent default action for "click" and "mouseenter click"
                el.addEventListener("click", function (event) {
                  event.preventDefault();
                  event.stopPropagation();
                });
              }

              if (_this.options.trigger === "click") {
                _this.active_class = "tooltip-active-click";
              }

              if (_this.options.markInactive) {
                // Initially mark as inactive
                el.classList.add(_this.inactive_class);
              }

            case 17:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  parseOptionsForTippy: function parseOptionsForTippy(opts) {
    var _this2 = this;

    var placement = function placement(pos) {
      // note that Cornelis needs the positioning to be the placement of the thingy on the bubble
      // tippy though refers to positioning as the placement of the bubble relatively to the reference element
      // so we invert the meaning below. It's intentional.
      var primary = function primary(pos0) {
        return {
          t: "bottom",
          r: "left",
          b: "top",
          l: "right"
        }[pos0];
      };

      var secondary = function secondary(pos1) {
        return {
          l: "-start",
          r: "-end",
          m: "",
          t: "-start",
          b: "-end"
        }[pos1];
      };

      return "".concat(primary(pos[0])).concat(secondary(pos[1]));
    };

    var tippy_options = {
      popperOptions: {
        modifiers: []
      }
    };

    if (opts.arrowPadding !== null) {
      tippy_options.popperOptions.modifiers.push({
        name: "arrow",
        options: {
          padding: parseInt(opts.arrowPadding, 10)
        }
      });
    }

    var parsers = {
      position: function position() {
        var _opts$position, _opts$position$list;

        if (!((_opts$position = opts.position) !== null && _opts$position !== void 0 && (_opts$position$list = _opts$position.list) !== null && _opts$position$list !== void 0 && _opts$position$list.length)) {
          return;
        }

        tippy_options.placement = placement(opts.position.list[0]); // main position

        var flip_options = {
          name: "flip",
          enabled: true
        };

        if (opts.position.policy === "force") {
          flip_options.enabled = false;
        } else if (opts.position.length > 1) {
          var fallbacks = opts.position.list.slice(1).map(placement);
          flip_options.fallbackPlacements = fallbacks;
        }

        tippy_options.popperOptions.modifiers.push(flip_options);
      },
      trigger: function trigger() {
        if (opts.trigger === "hover") {
          tippy_options.trigger = "mouseenter focus";
        }
      },
      source: function source() {
        var content;

        if (opts.source === "title") {
          // Tooltip content from title attribute
          content = _this2.el.getAttribute("title");
        } else if (opts.source === "content") {
          // Tooltiop content from trigger child content.
          content = _this2.el.innerHTML;
          tippy_options.allowHTML = true;
        } else if (opts.source === "ajax") {
          // Tooltiop content from AJAX request.
          content = document.createElement("progress");
          tippy_options.allowHTML = true;
        }

        tippy_options.content = content;
      },
      delay: function delay() {
        if (opts.delay) {
          tippy_options.delay = [_core_utils__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].parseTime(opts.delay), 0];
        }
      },
      target: function target() {
        if (!opts.target) {
          return;
        }

        if (opts.target === "parent") {
          tippy_options.appendTo = "parent";
        } else if (opts.target === "body") {
          tippy_options.appendTo = document.body;
        } else {
          tippy_options.appendTo = document.querySelector(opts.target);
        }
      }
    };

    for (var arg in opts) {
      switch (arg) {
        case "ajax-data-type":
          arg = "ajaxDataType";
          break;

        case "mark-inactive":
          arg = "markInactive";
          break;
      }

      parsers[arg] && parsers[arg](arg);
    }

    return tippy_options;
  },
  _initializeContent: function _initializeContent() {
    var _this3 = this;

    // Initialize all .close-panel elements
    var close_els = this.tippy.popper.querySelectorAll(".close-panel");
    var close_buttons = this.tippy.popper.querySelectorAll(".pat-tooltip--close-button");

    var _iterator = _createForOfIteratorHelper(close_els),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var close_el = _step.value;
        close_el.addEventListener("click", function () {
          var _iterator2 = _createForOfIteratorHelper(close_buttons),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var close_button = _step2.value;
              // Also remove the close button
              close_button.parentNode.removeChild(close_button);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          _this3.tippy.hide();
        });
      } // Initialize any other patterns.

    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    _core_registry__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].scan(this.tippy.popper);
  },
  _onMount: function _onMount() {
    var _this4 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(_this4.options.source === "ajax")) {
                _context2.next = 3;
                break;
              }

              _context2.next = 3;
              return _this4._getContent();

            case 3:
              _this4._initializeContent(); // Notify parent patterns about injected content.
              // Do not call pat-inject's handler, because all necessary
              // initialization after injection is done here.


              jquery__WEBPACK_IMPORTED_MODULE_1___default()(_this4.tippy.popper).trigger("patterns-injected", [{
                skipPatInjectHandler: true
              }, _this4.el, _this4.tippy.popper]);

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }))();
  },
  _onShow: function _onShow() {
    if (this.options.closing !== "auto" && this.options.trigger === "hover") {
      // no auto-close when hovering when closing mode is "sticky" or "close-button".
      this.tippy.setProps({
        trigger: "click"
      });
    }

    if (this.options.closing === "close-button") {
      var close_button = document.createElement("button");
      close_button.setAttribute("class", "close-panel pat-tooltip--close-button");
      var content = this.tippy.popper.querySelector(".tippy-content");
      content.parentNode.insertBefore(close_button, content);
    }

    if (this.options.markInactive) {
      this.el.classList.remove(this.inactive_class);
      this.el.classList.add(this.active_class);
    }

    if (this.options.class) {
      var _iterator3 = _createForOfIteratorHelper(this.options.class.split(" ")),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var class_ = _step3.value;
          this.tippy.popper.classList.add(class_);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    } // Add a generic non-tippy related class to identify the tooltip container


    this.tippy.popper.classList.add("tooltip-container");
  },
  _onHide: function _onHide() {
    if (this.options.markInactive) {
      this.el.classList.remove(this.active_class);
      this.el.classList.add(this.inactive_class);
    }

    if (this.options.closing !== "auto" && this.options.trigger === "hover") {
      // re-set hover behavior
      this.tippy.setProps({
        trigger: "mouseenter focus"
      });
    }

    if (this.options.source === "ajax") {
      this.tippy.setContent(document.createElement("progress"));
      this.ajax_state.canFetch = true;
    }
  },
  _getContent: function _getContent() {
    var _this5 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      var _this5$get_url_parts, url, selector, content, handler, response, text, _content;

      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!(_this5.ajax_state.isFetching || !_this5.ajax_state.canFetch)) {
                _context3.next = 2;
                break;
              }

              return _context3.abrupt("return", undefined);

            case 2:
              _this5$get_url_parts = _this5.get_url_parts(_this5.el.getAttribute("href")), url = _this5$get_url_parts.url, selector = _this5$get_url_parts.selector;

              if (!url) {
                _context3.next = 24;
                break;
              }

              // Tooltip from remote page.
              _this5.ajax_state = {
                isFetching: true,
                canFetch: false
              };
              handler = _this5._ajaxDataTypeHandlers[_this5.options.ajaxDataType];
              _context3.prev = 6;
              _context3.next = 9;
              return fetch(url);

            case 9:
              response = _context3.sent;
              _context3.next = 12;
              return response.text();

            case 12:
              text = _context3.sent;
              _context3.next = 15;
              return handler(text, url, selector);

            case 15:
              content = _context3.sent;
              _context3.next = 21;
              break;

            case 18:
              _context3.prev = 18;
              _context3.t0 = _context3["catch"](6);
              log.error("Error on ajax request ".concat(_context3.t0));

            case 21:
              _this5.ajax_state.isFetching = false;
              _context3.next = 25;
              break;

            case 24:
              if (selector) {
                // Tooltip content from current DOM tree.
                content = document.querySelector(selector);
                content = ((_content = content) === null || _content === void 0 ? void 0 : _content.innerHTML) || undefined;
              }

            case 25:
              if (content) {
                _this5.tippy.setContent(content);

                _this5.tippy.popperInstance.forceUpdate(); // re-position tippy after content is known.

              }

            case 26:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, null, [[6, 18]]);
    }))();
  },
  get_url_parts: function get_url_parts(href) {
    // Return the URL and a CSS ID selector.
    var url, selector;

    if (!href) {
      return {
        url: url,
        selector: selector
      };
    }

    url = href.split("#")[0] || undefined;
    selector = href.split("#")[1] || undefined;
    selector = selector ? "#".concat(selector) : undefined;
    return {
      url: url,
      selector: selector
    };
  },
  _ajaxDataTypeHandlers: {
    html: function html(text, url, selector) {
      var _tmp;

      var tmp = document.createElement("div");
      tmp.innerHTML = text;

      if (selector) {
        tmp = tmp.querySelector(selector);
      }

      return ((_tmp = tmp) === null || _tmp === void 0 ? void 0 : _tmp.innerHTML) || "";
    },
    markdown: function markdown(text, url, selector) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        var pat_markdown, pat, cfg, ret;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return __webpack_require__.e(/* import() */ 177).then(__webpack_require__.bind(null, 585));

              case 2:
                pat_markdown = _context4.sent;
                pat = pat_markdown.default.init(jquery__WEBPACK_IMPORTED_MODULE_1___default()("<div/>"));
                cfg = {
                  url: url
                };

                if (selector) {
                  cfg.source = selector;
                }

                _context4.next = 8;
                return pat.renderForInjection(cfg, text);

              case 8:
                ret = _context4.sent;
                return _context4.abrupt("return", ret[0]);

              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }))();
    }
  }
}));

/***/ }),

/***/ 112:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* i18n integration. This is forked from jarn.jsi18n
 *
 * This is a singleton.
 * Configuration is done on the body tag data-i18ncatalogurl attribute
 *     <body data-i18ncatalogurl="/plonejsi18n">
 *
 *  Or, it'll default to "/plonejsi18n"
 */


var i18n = function i18n() {
  var self = this;
  self.baseUrl = jquery__WEBPACK_IMPORTED_MODULE_0___default()("body").attr("data-i18ncatalogurl");
  self.currentLanguage = jquery__WEBPACK_IMPORTED_MODULE_0___default()("html").attr("lang") || "en"; // Fix for country specific languages

  if (self.currentLanguage.split("-").length > 1) {
    self.currentLanguage = self.currentLanguage.split("-")[0] + "_" + self.currentLanguage.split("-")[1].toUpperCase();
  }

  self.storage = null;
  self.catalogs = {};
  self.ttl = 24 * 3600 * 1000; // Internet Explorer 8 does not know Date.now() which is used in e.g. loadCatalog, so we "define" it

  if (!Date.now) {
    Date.now = function () {
      return new Date().valueOf();
    };
  }

  try {
    if ("localStorage" in window && window.localStorage !== null && "JSON" in window && window.JSON !== null) {
      self.storage = window.localStorage;
    }
  } catch (e) {}

  self.configure = function (config) {
    for (var key in config) {
      self[key] = config[key];
    }
  };

  self._setCatalog = function (domain, language, catalog) {
    if (domain in self.catalogs) {
      self.catalogs[domain][language] = catalog;
    } else {
      self.catalogs[domain] = {};
      self.catalogs[domain][language] = catalog;
    }
  };

  self._storeCatalog = function (domain, language, catalog) {
    var key = domain + "-" + language;

    if (self.storage !== null && catalog !== null) {
      self.storage.setItem(key, JSON.stringify(catalog));
      self.storage.setItem(key + "-updated", Date.now());
    }
  };

  self.getUrl = function (domain, language) {
    return self.baseUrl + "?domain=" + domain + "&language=" + language;
  };

  self.loadCatalog = function (domain, language) {
    if (language === undefined) {
      language = self.currentLanguage;
    }

    if (self.storage !== null) {
      var key = domain + "-" + language;

      if (key in self.storage) {
        if (Date.now() - parseInt(self.storage.getItem(key + "-updated"), 10) < self.ttl) {
          var catalog = JSON.parse(self.storage.getItem(key));

          self._setCatalog(domain, language, catalog);

          return;
        }
      }
    }

    if (!self.baseUrl) {
      return;
    }

    jquery__WEBPACK_IMPORTED_MODULE_0___default.a.getJSON(self.getUrl(domain, language), function (catalog) {
      if (catalog === null) {
        return;
      }

      self._setCatalog(domain, language, catalog);

      self._storeCatalog(domain, language, catalog);
    });
  };

  self.MessageFactory = function (domain, language) {
    language = language || self.currentLanguage;
    return function translate(msgid, keywords) {
      var msgstr;

      if (domain in self.catalogs && language in self.catalogs[domain] && msgid in self.catalogs[domain][language]) {
        msgstr = self.catalogs[domain][language][msgid];
      } else {
        msgstr = msgid;
      }

      if (keywords) {
        var regexp, keyword;

        for (keyword in keywords) {
          if (keywords.hasOwnProperty(keyword)) {
            regexp = new RegExp("\\$\\{" + keyword + "\\}", "g");
            msgstr = msgstr.replace(regexp, keywords[keyword]);
          }
        }
      }

      return msgstr;
    };
  };
};

/* harmony default export */ __webpack_exports__["a"] = (i18n);

/***/ }),

/***/ 113:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _applyStyles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _applyStyles_js__WEBPACK_IMPORTED_MODULE_0__["a"]; });

/* harmony import */ var _arrow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(132);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "b", function() { return _arrow_js__WEBPACK_IMPORTED_MODULE_1__["a"]; });

/* harmony import */ var _computeStyles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(86);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "c", function() { return _computeStyles_js__WEBPACK_IMPORTED_MODULE_2__["a"]; });

/* harmony import */ var _eventListeners_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(87);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "d", function() { return _eventListeners_js__WEBPACK_IMPORTED_MODULE_3__["a"]; });

/* harmony import */ var _flip_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(136);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "e", function() { return _flip_js__WEBPACK_IMPORTED_MODULE_4__["a"]; });

/* harmony import */ var _hide_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(133);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "f", function() { return _hide_js__WEBPACK_IMPORTED_MODULE_5__["a"]; });

/* harmony import */ var _offset_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(134);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "g", function() { return _offset_js__WEBPACK_IMPORTED_MODULE_6__["a"]; });

/* harmony import */ var _popperOffsets_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(88);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "h", function() { return _popperOffsets_js__WEBPACK_IMPORTED_MODULE_7__["a"]; });

/* harmony import */ var _preventOverflow_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(137);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "i", function() { return _preventOverflow_js__WEBPACK_IMPORTED_MODULE_8__["a"]; });











/***/ }),

/***/ 114:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createPopper; });
/* unused harmony export defaultModifiers */
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62);
/* harmony import */ var _modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(87);
/* harmony import */ var _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(88);
/* harmony import */ var _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(86);
/* harmony import */ var _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(85);





var defaultModifiers = [_modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"], _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"], _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"], _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]];
var createPopper = /*#__PURE__*/Object(_createPopper_js__WEBPACK_IMPORTED_MODULE_0__[/* popperGenerator */ "b"])({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ 12:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(35);
/* harmony import */ var _logging__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(28);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(13);
function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Patterns registry - Central registry and scan logic for patterns
 *
 * Copyright 2012-2013 Simplon B.V.
 * Copyright 2012-2013 Florian Friesdorf
 * Copyright 2013 Marko Durkovic
 * Copyright 2013 Rok Garbas
 * Copyright 2014-2015 Syslab.com GmBH, JC Brand
 */

/*
 * changes to previous patterns.register/scan mechanism
 * - if you want initialised class, do it in init
 * - init returns set of elements actually initialised
 * - handle once within init
 * - no turnstile anymore
 * - set pattern.jquery_plugin if you want it
 */




var log = _logging__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].getLogger("registry");
var disable_re = /patterns-disable=([^&]+)/g;
var dont_catch_re = /patterns-dont-catch/g;
var disabled = {};
var dont_catch = false;
var match;

while ((match = disable_re.exec(window.location.search)) !== null) {
  disabled[match[1]] = true;
  log.info("Pattern disabled via url config:", match[1]);
}

while ((match = dont_catch_re.exec(window.location.search)) !== null) {
  dont_catch = true;
  log.info("I will not catch init exceptions");
}

var registry = {
  patterns: {},
  // as long as the registry is not initialized, pattern
  // registration just registers a pattern. Once init is called,
  // the DOM is scanned. After that registering a new pattern
  // results in rescanning the DOM only for this pattern.
  initialized: false,
  init: function init() {
    jquery__WEBPACK_IMPORTED_MODULE_0___default()(document).ready(function () {
      log.info("loaded: " + Object.keys(registry.patterns).sort().join(", "));
      registry.scan(document.body);
      registry.initialized = true;
      log.info("finished initial scan.");
    });
  },
  clear: function clear() {
    // Removes all patterns from the registry. Currently only being
    // used in tests.
    this.patterns = {};
  },
  transformPattern: function transformPattern(name, content) {
    var _pattern$prototype;

    /* Call the transform method on the pattern with the given name, if
     * it exists.
     */
    if (disabled[name]) {
      log.debug("Skipping disabled pattern:", name);
      return;
    }

    var pattern = registry.patterns[name];
    var transform = pattern.transform || ((_pattern$prototype = pattern.prototype) === null || _pattern$prototype === void 0 ? void 0 : _pattern$prototype.transform);

    if (transform) {
      try {
        transform(jquery__WEBPACK_IMPORTED_MODULE_0___default()(content));
      } catch (e) {
        if (dont_catch) {
          throw e;
        }

        log.error("Transform error for pattern" + name, e);
      }
    }
  },
  initPattern: function initPattern(name, el, trigger) {
    /* Initialize the pattern with the provided name and in the context
     * of the passed in DOM element.
     */
    var $el = jquery__WEBPACK_IMPORTED_MODULE_0___default()(el);
    var pattern = registry.patterns[name];

    if (pattern.init) {
      var plog = _logging__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].getLogger("pat." + name);

      if ($el.is(pattern.trigger)) {
        plog.debug("Initialising:", $el);

        try {
          pattern.init($el, null, trigger);
          plog.debug("done.");
        } catch (e) {
          if (dont_catch) {
            throw e;
          }

          plog.error("Caught error:", e);
        }
      }
    }
  },
  orderPatterns: function orderPatterns(patterns) {
    // XXX: Bit of a hack. We need the validation pattern to be
    // parsed and initiated before the inject pattern. So we make
    // sure here, that it appears first. Not sure what would be
    // the best solution. Perhaps some kind of way to register
    // patterns "before" or "after" other patterns.
    if (patterns.includes("validation") && patterns.includes("inject")) {
      patterns.splice(patterns.indexOf("validation"), 1);
      patterns.unshift("validation");
    }

    return patterns;
  },
  scan: function scan(content, patterns, trigger) {
    if (typeof content === "string") {
      content = document.querySelector(content);
    } else if (content.jquery) {
      content = content[0];
    }

    var selectors = [];
    patterns = this.orderPatterns(patterns || Object.keys(registry.patterns));

    var _iterator = _createForOfIteratorHelper(patterns),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var name = _step.value;
        this.transformPattern(name, content);
        var pattern = registry.patterns[name];

        if (pattern.trigger) {
          selectors.unshift(pattern.trigger);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    var matches = _dom__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].querySelectorAllAndMe(content, selectors.map(function (it) {
      return it.trim().replace(/,$/, "");
    }).join(","));
    matches = matches.filter(function (el) {
      // Filter out code examples wrapped in <pre> elements.
      // Also filter special class ``.cant-touch-this``
      return _dom__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].find_parents(el, "pre").length === 0 && !el.matches(".cant-touch-this");
    }); // walk list backwards and initialize patterns inside-out.

    var _iterator2 = _createForOfIteratorHelper(matches.reverse()),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var el = _step2.value;

        var _iterator3 = _createForOfIteratorHelper(patterns),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _name = _step3.value;
            this.initPattern(_name, el, trigger);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    document.body.classList.add("patterns-loaded");
  },
  register: function register(pattern, name) {
    name = name || pattern.name;

    if (!name) {
      log.error("Pattern lacks a name:", pattern);
      return false;
    }

    if (registry.patterns[name]) {
      log.error("Already have a pattern called: " + name);
      return false;
    } // register pattern to be used for scanning new content


    registry.patterns[name] = pattern; // register pattern as jquery plugin

    if (pattern.jquery_plugin) {
      var plugin_name = ("pat-" + name).replace(/-([a-zA-Z])/g, function (match, p1) {
        return p1.toUpperCase();
      });
      jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[plugin_name] = _utils__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].jqueryPlugin(pattern); // BBB 2012-12-10 and also for Mockup patterns.

      jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[plugin_name.replace(/^pat/, "pattern")] = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[plugin_name];
    }

    log.debug("Registered pattern:", name, pattern);

    if (registry.initialized) {
      registry.scan(document.body, [name]);
    }

    return true;
  }
};
/* harmony default export */ __webpack_exports__["a"] = (registry);

/***/ }),

/***/ 13:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(35);
function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }





jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn.safeClone = function () {
  var $clone = this.clone(); // IE BUG : Placeholder text becomes actual value after deep clone on textarea
  // https://connect.microsoft.com/IE/feedback/details/781612/placeholder-text-becomes-actual-value-after-deep-clone-on-textarea

  if (window.document.documentMode) {
    $clone.findInclusive(":input[placeholder]").each(function (i, item) {
      var $item = jquery__WEBPACK_IMPORTED_MODULE_0___default()(item);

      if ($item.attr("placeholder") === $item.val()) {
        $item.val("");
      }
    });
  }

  return $clone;
}; // Production steps of ECMA-262, Edition 5, 15.4.4.18
// Reference: http://es5.github.io/#x15.4.4.18


if (!Array.prototype.forEach) {
  Array.prototype.forEach = function (callback, thisArg) {
    var T, k;

    if (this === null) {
      throw new TypeError(" this is null or not defined");
    } // 1. Let O be the result of calling ToObject passing the |this| value as the argument.


    var O = Object(this); // 2. Let lenValue be the result of calling the Get internal method of O with the argument "length".
    // 3. Let len be ToUint32(lenValue).

    var len = O.length >>> 0; // 4. If IsCallable(callback) is false, throw a TypeError exception.
    // See: http://es5.github.com/#x9.11

    if (typeof callback !== "function") {
      throw new TypeError(callback + " is not a function");
    } // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.


    if (arguments.length > 1) {
      T = thisArg;
    } // 6. Let k be 0


    k = 0; // 7. Repeat, while k < len

    while (k < len) {
      var kValue; // a. Let Pk be ToString(k).
      //   This is implicit for LHS operands of the in operator
      // b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.
      //   This step can be combined with c
      // c. If kPresent is true, then

      if (k in O) {
        // i. Let kValue be the result of calling the Get internal method of O with argument Pk.
        kValue = O[k]; // ii. Call the Call internal method of callback with T as the this value and
        // argument list containing kValue, k, and O.

        callback.call(T, kValue, k, O);
      } // d. Increase k by 1.


      k++;
    } // 8. return undefined

  };
}

var singleBoundJQueryPlugin = function singleBoundJQueryPlugin(pattern, method, options) {
  /* This is a jQuery plugin for patterns which are invoked ONCE FOR EACH
   * matched element in the DOM.
   *
   * This is how the Mockup-type patterns behave. They are constructor
   * functions which need to be invoked once per jQuery-wrapped DOM node
   * for all DOM nodes on which the pattern applies.
   */
  var $this = this;
  $this.each(function () {
    var pat,
        $el = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this);
    pat = pattern.init($el, options);

    if (method) {
      if (pat[method] === undefined) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default.a.error("Method " + method + " does not exist on jQuery." + pattern.name);
        return false;
      }

      if (method.charAt(0) === "_") {
        jquery__WEBPACK_IMPORTED_MODULE_0___default.a.error("Method " + method + " is private on jQuery." + pattern.name);
        return false;
      }

      pat[method].apply(pat, [options]);
    }
  });
  return $this;
};

var pluralBoundJQueryPlugin = function pluralBoundJQueryPlugin(pattern, method, options) {
  /* This is a jQuery plugin for patterns which are invoked ONCE FOR ALL
   * matched elements in the DOM.
   *
   * This is how the vanilla Patternslib-type patterns behave. They are
   * simple objects with an init method and this method gets called once
   * with a list of jQuery-wrapped DOM nodes on which the pattern
   * applies.
   */
  var $this = this;

  if (method) {
    if (pattern[method]) {
      return pattern[method].apply($this, [$this].concat([options]));
    } else {
      jquery__WEBPACK_IMPORTED_MODULE_0___default.a.error("Method " + method + " does not exist on jQuery." + pattern.name);
    }
  } else {
    pattern.init.apply($this, [$this].concat([options]));
  }

  return $this;
};

var jqueryPlugin = function jqueryPlugin(pattern) {
  return function (method, options) {
    var $this = this;

    if ($this.length === 0) {
      return $this;
    }

    if (_typeof(method) === "object") {
      options = method;
      method = undefined;
    }

    if (typeof pattern === "function") {
      return singleBoundJQueryPlugin.call(this, pattern, method, options);
    } else {
      return pluralBoundJQueryPlugin.call(this, pattern, method, options);
    }
  };
}; // Is a given variable an object?


function isObject(obj) {
  var type = _typeof(obj);

  return type === "function" || type === "object" && !!obj;
} // Extend a given object with all the properties in passed-in object(s).


function extend(obj) {
  if (!isObject(obj)) return obj;
  var source, prop;

  for (var i = 1, length = arguments.length; i < length; i++) {
    source = arguments[i];

    for (prop in source) {
      if (hasOwnProperty.call(source, prop)) {
        obj[prop] = source[prop];
      }
    }
  }

  return obj;
} // END: Taken from Underscore.js until here.


function rebaseURL(base, url) {
  base = new URL(base, window.location).href; // If base is relative make it absolute.

  if (url.indexOf("://") !== -1 || url[0] === "/" || url.indexOf("data:") === 0) {
    return url;
  }

  return base.slice(0, base.lastIndexOf("/") + 1) + url;
}

function findLabel(input) {
  var $label;

  for (var label = input.parentNode; label && label.nodeType !== 11; label = label.parentNode) {
    if (label.tagName === "LABEL") {
      return label;
    }
  }

  if (input.id) {
    $label = jquery__WEBPACK_IMPORTED_MODULE_0___default()('label[for="' + input.id + '"]');
  }

  if ($label && $label.length === 0 && input.form) {
    $label = jquery__WEBPACK_IMPORTED_MODULE_0___default()('label[for="' + input.name + '"]', input.form);
  }

  if ($label && $label.length) {
    return $label[0];
  } else {
    return null;
  }
} // Taken from http://stackoverflow.com/questions/123999/how-to-tell-if-a-dom-element-is-visible-in-the-current-viewport


function elementInViewport(el) {
  var rect = el.getBoundingClientRect(),
      docEl = document.documentElement,
      vWidth = window.innerWidth || docEl.clientWidth,
      vHeight = window.innerHeight || docEl.clientHeight;
  if (rect.right < 0 || rect.bottom < 0 || rect.left > vWidth || rect.top > vHeight) return false;
  return true;
} // Taken from http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex


function escapeRegExp(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}

function removeWildcardClass($targets, classes) {
  if (classes.indexOf("*") === -1) $targets.removeClass(classes);else {
    var matcher = classes.replace(/[\-\[\]{}()+?.,\\\^$|#\s]/g, "\\$&");
    matcher = matcher.replace(/[*]/g, ".*");
    matcher = new RegExp("^" + matcher + "$");
    $targets.filter("[class]").each(function () {
      var $this = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this),
          classes = $this.attr("class").split(/\s+/),
          ok = [];

      for (var i = 0; i < classes.length; i++) {
        if (!matcher.test(classes[i])) ok.push(classes[i]);
      }

      if (ok.length) $this.attr("class", ok.join(" "));else $this.removeAttr("class");
    });
  }
}

function hasValue(el) {
  if (el.tagName === "INPUT") {
    if (el.type === "checkbox" || el.type === "radio") {
      return el.checked;
    }

    return el.value !== "";
  }

  if (el.tagName === "SELECT") {
    return el.selectedIndex !== -1;
  }

  if (el.tagName === "TEXTAREA") {
    return el.value !== "";
  }

  return false;
}

var hideOrShow = function hideOrShow(nodes, visible, options, pattern_name) {
  nodes = _dom__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].toNodeArray(nodes);
  var transitions = {
    none: {
      hide: "hide",
      show: "show"
    },
    fade: {
      hide: "fadeOut",
      show: "fadeIn"
    },
    slide: {
      hide: "slideUp",
      show: "slideDown"
    }
  };
  var duration = options.transition === "css" || options.transition === "none" ? null : options.effect.duration;

  var on_complete = function on_complete(el) {
    el.classList.remove("in-progress");
    el.classList.add(visible ? "visible" : "hidden");
    jquery__WEBPACK_IMPORTED_MODULE_0___default()(el).trigger("pat-update", {
      pattern: pattern_name,
      transition: "complete"
    });
  };

  var _iterator = _createForOfIteratorHelper(nodes),
      _step;

  try {
    var _loop = function _loop() {
      var el = _step.value;
      el.classList.remove("visible");
      el.classList.remove("hidden");
      el.classList.remove("in-progress");

      if (duration) {
        var t = transitions[options.transition];
        el.classList.add("in-progress");
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(el).trigger("pat-update", {
          pattern: pattern_name,
          transition: "start"
        });
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(el)[visible ? t.show : t.hide]({
          duration: duration,
          easing: options.effect.easing,
          complete: function complete() {
            return on_complete(el);
          }
        });
      } else {
        if (options.transition !== "css") {
          _dom__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"][visible ? "show" : "hide"](el);
        }

        on_complete(el);
      }
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
};

function addURLQueryParameter(fullURL, param, value) {
  /* Using a positive lookahead (?=\=) to find the given parameter,
   * preceded by a ? or &, and followed by a = with a value after
   * than (using a non-greedy selector) and then followed by
   * a & or the end of the string.
   *
   * Taken from http://stackoverflow.com/questions/7640270/adding-modify-query-string-get-variables-in-a-url-with-javascript
   */
  var val = new RegExp("(\\?|\\&)" + param + "=.*?(?=(&|$))"),
      parts = fullURL.toString().split("#"),
      url = parts[0],
      hash = parts[1],
      qstring = /\?.+$/,
      newURL = url; // Check if the parameter exists

  if (val.test(url)) {
    // if it does, replace it, using the captured group
    // to determine & or ? at the beginning
    newURL = url.replace(val, "$1" + param + "=" + value);
  } else if (qstring.test(url)) {
    // otherwise, if there is a query string at all
    // add the param to the end of it
    newURL = url + "&" + param + "=" + value;
  } else {
    // if there's no query string, add one
    newURL = url + "?" + param + "=" + value;
  }

  if (hash) {
    newURL += "#" + hash;
  }

  return newURL;
}

function removeDuplicateObjects(objs) {
  /* Given an array of objects, remove any duplicate objects which might
   * be present.
   */
  var comparator = function comparator(v, k) {
    return this[k] === v;
  };

  return underscore__WEBPACK_IMPORTED_MODULE_1__["default"].reduce(objs, function (list, next_obj) {
    var is_duplicate = false;

    underscore__WEBPACK_IMPORTED_MODULE_1__["default"].each(list, function (obj) {
      is_duplicate = underscore__WEBPACK_IMPORTED_MODULE_1__["default"].keys(obj).length === underscore__WEBPACK_IMPORTED_MODULE_1__["default"].keys(next_obj).length && !underscore__WEBPACK_IMPORTED_MODULE_1__["default"].chain(obj).omit(comparator.bind(next_obj)).keys().value().length;
    });

    if (!is_duplicate) {
      list.push(next_obj);
    }

    return list;
  }, []);
}

function mergeStack(stack, length) {
  /* Given a list of lists of objects (which for brevity we call a stack),
   * return a list of objects where each object is the merge of all the
   * corresponding original objects at that particular index.
   *
   * If a certain sub-list doesn't have an object at that particular
   * index, the last object in that list is merged.
   */
  var results = [];

  for (var i = 0; i < length; i++) {
    results.push({});
  }

  underscore__WEBPACK_IMPORTED_MODULE_1__["default"].each(stack, function (frame) {
    var frame_length = frame.length - 1;

    for (var x = 0; x < length; x++) {
      results[x] = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend(results[x] || {}, frame[x > frame_length ? frame_length : x]);
    }
  });

  return results;
}

function isElementInViewport(el, partial, offset) {
  /* returns true if element is visible to the user ie. is in the viewport.
   * Setting partial parameter to true, will only check if a part of the element is visible
   * in the viewport, specifically that some part of that element is touching the top part
   * of the viewport. This only applies to the vertical direction, ie. doesnt check partial
   * visibility for horizontal scrolling
   * some code taken from:
   * http://stackoverflow.com/questions/123999/how-to-tell-if-a-dom-element-is-visible-in-the-current-viewport/7557433#7557433
   */
  if (el === []) {
    return false;
  }

  if (el instanceof jquery__WEBPACK_IMPORTED_MODULE_0___default.a) {
    el = el[0];
  }

  var rec = el.getBoundingClientRect(),
      rec_values = [rec.top, rec.bottom, rec.left, rec.right];

  if (underscore__WEBPACK_IMPORTED_MODULE_1__["default"].every(rec_values, function zero(v) {
    if (v === 0) {
      return true;
    }
  })) {
    // if every property of rec is 0, the element is invisible;
    return false;
  } else if (partial) {
    // when using getBoundingClientRect() (in the vertical case)
    // negative means above top of viewport, positive means below top of viewport
    // therefore for part of the element to be touching or crossing the top of the viewport
    // rec.top must <= 0 and rec.bottom must >= 0
    // an optional tolerance offset can be added for when the desired element is not exactly
    // toucing the top of the viewport but needs to be considered as touching.
    if (offset === undefined) {
      offset = 0;
    }

    return rec.top <= 0 + offset && rec.bottom >= 0 + offset //(rec.top >= 0+offset && rec.top <= window.innerHeight) // this checks if the element
    // touches bottom part of viewport
    // XXX do we want to include a check for the padding of an element?
    // using window.getComputedStyle(target).paddingTop
    ;
  } else {
    // this will return true if the entire element is completely in the viewport
    return rec.top >= 0 && rec.left >= 0 && rec.bottom <= (window.innerHeight || document.documentElement.clientHeight)
    /*or $(window).height() */
    && rec.right <= (window.innerWidth || document.documentElement.clientWidth)
    /*or $(window).width() */
    ;
  }
}

function parseTime(time) {
  var m = /^(\d+(?:\.\d+)?)\s*(\w*)/.exec(time);

  if (!m) {
    throw new Error("Invalid time");
  }

  var amount = parseFloat(m[1]);

  switch (m[2]) {
    case "s":
      return Math.round(amount * 1000);

    case "m":
      return Math.round(amount * 1000 * 60);

    case "ms":
    default:
      return Math.round(amount);
  }
} // Return a jQuery object with elements related to an input element.


function findRelatives(el) {
  var $el = jquery__WEBPACK_IMPORTED_MODULE_0___default()(el),
      $relatives = jquery__WEBPACK_IMPORTED_MODULE_0___default()(el),
      $label = jquery__WEBPACK_IMPORTED_MODULE_0___default()();
  $relatives = $relatives.add($el.closest("label"));
  $relatives = $relatives.add($el.closest("fieldset"));
  if (el.id) $label = jquery__WEBPACK_IMPORTED_MODULE_0___default()("label[for='" + el.id + "']");

  if (!$label.length) {
    var $form = $el.closest("form");
    if (!$form.length) $form = jquery__WEBPACK_IMPORTED_MODULE_0___default()(document.body);
    $label = $form.find("label[for='" + el.name + "']");
  }

  $relatives = $relatives.add($label);
  return $relatives;
}

function getCSSValue(el, property, asPixels) {
  /* Return a CSS property value for a given DOM node.
   * For length-values, relative values are converted to pixels.
   * Optionally parse as pixels, if applicable.
   */
  var value = window.getComputedStyle(el).getPropertyValue(property);

  if (asPixels) {
    value = parseFloat(value) || 0.0;
  }

  return value;
}

function checkInputSupport(type, invalid_value) {
  /* Check input type support.
   *  See: https://stackoverflow.com/a/10199306/1337474
   */
  var support = false;
  var input = document.createElement("input");
  input.setAttribute("type", type);
  support = input.type == type;

  if (invalid_value !== undefined) {
    // Check for input type UI support
    input.setAttribute("value", invalid_value);
    support = input.value !== invalid_value;
  }

  return support;
}

var checkCSSFeature = function checkCSSFeature(attribute, value) {
  var tag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "div";

  /* Check for browser support of specific CSS feature.
   */
  tag = document.createElement(tag);
  var supported = tag.style[attribute] !== undefined;

  if (supported && value !== undefined) {
    tag.style[attribute] = value;
    supported = tag.style[attribute] === value;
  }

  return supported;
};

var timeout = function timeout(ms) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, ms);
  });
};

var debounce = function debounce(func, ms) {
  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds.
  // From: https://underscorejs.org/#debounce
  var timer = null;
  return function () {
    var _this = this;

    clearTimeout(timer);
    var args = arguments;
    timer = setTimeout(function () {
      func.apply(_this, args);
    }, ms);
  };
};

var isIE = function isIE() {
  // See: https://stackoverflow.com/a/9851769/1337474
  // Internet Explorer 6-11
  return (
    /*@cc_on!@*/
     false || !!document.documentMode
  );
};

var jqToNode = function jqToNode(el) {
  // Return a DOM node if a jQuery node was passed.
  if (el.jquery) {
    el = el[0];
  }

  return el;
};

var utils = {
  // pattern pimping - own module?
  jqueryPlugin: jqueryPlugin,
  escapeRegExp: escapeRegExp,
  isObject: isObject,
  extend: extend,
  rebaseURL: rebaseURL,
  findLabel: findLabel,
  elementInViewport: elementInViewport,
  removeWildcardClass: removeWildcardClass,
  hideOrShow: hideOrShow,
  addURLQueryParameter: addURLQueryParameter,
  removeDuplicateObjects: removeDuplicateObjects,
  mergeStack: mergeStack,
  isElementInViewport: isElementInViewport,
  hasValue: hasValue,
  parseTime: parseTime,
  findRelatives: findRelatives,
  getCSSValue: getCSSValue,
  checkInputSupport: checkInputSupport,
  checkCSSFeature: checkCSSFeature,
  timeout: timeout,
  debounce: debounce,
  isIE: isIE,
  jqToNode: jqToNode
};
/* harmony default export */ __webpack_exports__["a"] = (utils);

/***/ }),

/***/ 131:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var patternslib_src_core_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);


/* harmony default export */ __webpack_exports__["a"] = (patternslib_src_core_base__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].extend({
  name: "backdrop",
  trigger: ".pat-backdrop",
  parser: "mockup",
  defaults: {
    zIndex: null,
    opacity: 0.8,
    className: "plone-backdrop",
    classActiveName: "plone-backdrop-active",
    closeOnEsc: true,
    closeOnClick: true
  },
  init: function init() {
    var self = this;
    self.$backdrop = jquery__WEBPACK_IMPORTED_MODULE_0___default()("> ." + self.options.className, self.$el);

    if (self.$backdrop.length === 0) {
      self.$backdrop = jquery__WEBPACK_IMPORTED_MODULE_0___default()("<div/>").hide().appendTo(self.$el).addClass(self.options.className);

      if (self.options.zIndex !== null) {
        self.$backdrop.css("z-index", self.options.zIndex);
      }
    }

    if (self.options.closeOnEsc === true) {
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(document).on("keydown", function (e, data) {
        if (self.$el.is("." + self.options.classActiveName)) {
          if (e.keyCode === 27) {
            // ESC key pressed
            self.hide();
          }
        }
      });
    }

    if (self.options.closeOnClick === true) {
      self.$backdrop.on("click", function () {
        if (self.$el.is("." + self.options.classActiveName)) {
          self.hide();
        }
      });
    }
  },
  show: function show() {
    var self = this;

    if (!self.$el.hasClass(self.options.classActiveName)) {
      self.emit("show");
      self.$backdrop.css("opacity", "0").show();
      self.$el.addClass(self.options.classActiveName);
      self.$backdrop.animate({
        opacity: self.options.opacity
      }, 500);
      self.emit("shown");
    }
  },
  hide: function hide() {
    var self = this;

    if (self.$el.hasClass(self.options.classActiveName)) {
      self.emit("hide");
      self.$backdrop.animate({
        opacity: "0"
      }, 500).hide();
      self.$el.removeClass(self.options.classActiveName);
      self.emit("hidden");
    }
  }
}));

/***/ }),

/***/ 132:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(29);
/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(90);
/* harmony import */ var _dom_utils_contains_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(139);
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(58);
/* harmony import */ var _utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(89);
/* harmony import */ var _utils_within_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(94);
/* harmony import */ var _utils_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(140);
/* harmony import */ var _utils_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(142);
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(4);









 // eslint-disable-next-line import/no-unused-modules

function arrow(_ref) {
  var _state$modifiersData$;

  var state = _ref.state,
      name = _ref.name;
  var arrowElement = state.elements.arrow;
  var popperOffsets = state.modifiersData.popperOffsets;
  var basePlacement = Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(state.placement);
  var axis = Object(_utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])(basePlacement);
  var isVertical = [_enums_js__WEBPACK_IMPORTED_MODULE_8__[/* left */ "l"], _enums_js__WEBPACK_IMPORTED_MODULE_8__[/* right */ "s"]].indexOf(basePlacement) >= 0;
  var len = isVertical ? 'height' : 'width';

  if (!arrowElement || !popperOffsets) {
    return;
  }

  var paddingObject = state.modifiersData[name + "#persistent"].padding;
  var arrowRect = Object(_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(arrowElement);
  var minProp = axis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_8__[/* top */ "u"] : _enums_js__WEBPACK_IMPORTED_MODULE_8__[/* left */ "l"];
  var maxProp = axis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_8__[/* bottom */ "i"] : _enums_js__WEBPACK_IMPORTED_MODULE_8__[/* right */ "s"];
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
  var arrowOffsetParent = Object(_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"])(arrowElement);
  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
  // outside of the popper bounds

  var min = paddingObject[minProp];
  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset = Object(_utils_within_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])(min, center, max); // Prevents breaking syntax highlighting...

  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}

function effect(_ref2) {
  var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
  var _options$element = options.element,
      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element,
      _options$padding = options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;

  if (arrowElement == null) {
    return;
  } // CSS selector


  if (typeof arrowElement === 'string') {
    arrowElement = state.elements.popper.querySelector(arrowElement);

    if (!arrowElement) {
      return;
    }
  }

  if (false) {}

  if (!Object(_dom_utils_contains_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"])(state.elements.popper, arrowElement)) {
    if (false) {}

    return;
  }

  state.elements.arrow = arrowElement;
  state.modifiersData[name + "#persistent"] = {
    padding: Object(_utils_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"])(typeof padding !== 'number' ? padding : Object(_utils_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"])(padding, _enums_js__WEBPACK_IMPORTED_MODULE_8__[/* basePlacements */ "e"]))
  };
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'arrow',
  enabled: true,
  phase: 'main',
  fn: arrow,
  effect: effect,
  requires: ['popperOffsets'],
  requiresIfExists: ['preventOverflow']
});

/***/ }),

/***/ 133:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(41);



function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }

  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}

function isAnySideFullyClipped(overflow) {
  return [_enums_js__WEBPACK_IMPORTED_MODULE_0__[/* top */ "u"], _enums_js__WEBPACK_IMPORTED_MODULE_0__[/* right */ "s"], _enums_js__WEBPACK_IMPORTED_MODULE_0__[/* bottom */ "i"], _enums_js__WEBPACK_IMPORTED_MODULE_0__[/* left */ "l"]].some(function (side) {
    return overflow[side] >= 0;
  });
}

function hide(_ref) {
  var state = _ref.state,
      name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = Object(_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(state, {
    elementContext: 'reference'
  });
  var popperAltOverflow = Object(_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets: referenceClippingOffsets,
    popperEscapeOffsets: popperEscapeOffsets,
    isReferenceHidden: isReferenceHidden,
    hasPopperEscaped: hasPopperEscaped
  };
  state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), {}, {
    'data-popper-reference-hidden': isReferenceHidden,
    'data-popper-escaped': hasPopperEscaped
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'hide',
  enabled: true,
  phase: 'main',
  requiresIfExists: ['preventOverflow'],
  fn: hide
});

/***/ }),

/***/ 134:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export distanceAndSkiddingToXY */
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(29);
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);


function distanceAndSkiddingToXY(placement, rects, offset) {
  var basePlacement = Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(placement);
  var invertDistance = [_enums_js__WEBPACK_IMPORTED_MODULE_1__[/* left */ "l"], _enums_js__WEBPACK_IMPORTED_MODULE_1__[/* top */ "u"]].indexOf(basePlacement) >= 0 ? -1 : 1;

  var _ref = typeof offset === 'function' ? offset(Object.assign(Object.assign({}, rects), {}, {
    placement: placement
  })) : offset,
      skidding = _ref[0],
      distance = _ref[1];

  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [_enums_js__WEBPACK_IMPORTED_MODULE_1__[/* left */ "l"], _enums_js__WEBPACK_IMPORTED_MODULE_1__[/* right */ "s"]].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}

function offset(_ref2) {
  var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
  var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = _enums_js__WEBPACK_IMPORTED_MODULE_1__[/* placements */ "o"].reduce(function (acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y;

  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'offset',
  enabled: true,
  phase: 'main',
  requires: ['popperOffsets'],
  fn: offset
});

/***/ }),

/***/ 135:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/jquery/dist/jquery.js-exposed
var jquery_js_exposed = __webpack_require__(0);
var jquery_js_exposed_default = /*#__PURE__*/__webpack_require__.n(jquery_js_exposed);

// EXTERNAL MODULE: ./node_modules/underscore/modules/index-all.js + 159 modules
var index_all = __webpack_require__(1);

// EXTERNAL MODULE: ./node_modules/patternslib/src/core/base.js + 1 modules
var base = __webpack_require__(5);

// EXTERNAL MODULE: ./node_modules/mockup/src/core/i18n-wrapper.js
var i18n_wrapper = __webpack_require__(3);

// EXTERNAL MODULE: ./node_modules/mockup/src/core/utils.js
var utils = __webpack_require__(8);

// EXTERNAL MODULE: ./node_modules/mockup/src/core/ui/views/button.js
var views_button = __webpack_require__(51);

// CONCATENATED MODULE: ./node_modules/mockup/src/pat/relateditems/templates/breadcrumb.xml
/* harmony default export */ var breadcrumb = ("<span class=\"separator\">/<span>\n<a href=\"<%- path %>\" class=\"crumb\"><%- text %></a>\n");
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/relateditems/templates/favorite.xml
/* harmony default export */ var favorite = ("<li><a href=\"<%- path %>\" class=\"fav\" aria-labelledby=\"blip\"><%- title %></a></li>\n");
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/relateditems/templates/result.xml
/* harmony default export */ var templates_result = ("<div class=\"pattern-relateditems-result <%- oneLevelUp ? 'one-level-up' : '' %>\">\n  <div class=\"pattern-relateditems-result-browse-wrapper\">\n  <% if (!oneLevelUp) { %>\n    <a\n      class=\"pattern-relateditems-result-select<%- selectable ? ' selectable' : '' %><%- oneLevelUp ? ' one-level-up' : '' %>\"\n      data-path=\"<%- path %>\">\n  <% } %>\n      <div class=\"pattern-relateditems-result-info\">\n        <span\n          class=\"pattern-relateditems-result-title <%- portal_type ? 'contenttype-' + portal_type.toLowerCase() : '' %> <%- review_state ? 'state-' + review_state : '' %>\"\n          title=\"<%- portal_type %>\">\n          <%- Title %>\n        </span>\n        <span class=\"pattern-relateditems-result-path\"><%- oneLevelUp ? currentPath : path %></span>\n      </div>\n      <% if (is_folderish) { %>\n        <a\n          class=\"pattern-relateditems-result-browse\"\n          data-path=\"<%- path %>\"\n          title=\"<%- oneLevelUp ? one_level_up : open_folder %>\">\n          <span class=\"<%- oneLevelUp ? 'icon-left-circle' : 'icon-right-circle' %>\"></span>\n        </a>\n      <% } %>\n  <% if (!oneLevelUp) { %>\n    </a>\n  <% } %>\n  </div>\n  <% if (getURL && (getIcon || portal_type === \"Image\")) { %>\n    <% if (!oneLevelUp) { %>\n    <a\n      class=\"pattern-relateditems-result-select<%- selectable ? ' selectable' : '' %><%- oneLevelUp ? ' one-level-up' : '' %>\"\n      data-path=\"<%- path %>\">\n    <% } %>\n    <div class=\"pattern-relateditems-result-image\">\n      <img src=\"<%- getURL %>/@@images/image/thumb\" />\n    </div>\n    <% if (!oneLevelUp) { %>\n    </a>\n    <% } %>\n  <% } %>\n</div>\n");
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/relateditems/templates/recentlyused.xml
/* harmony default export */ var recentlyused = ("<li class=\"pattern-relateditems-recentlyused\">\n  <a class=\"pattern-relateditems-recentlyused-select\" data-uid=\"<%- UID %>\">\n    <div class=\"pattern-relateditems-recentlyused-info\">\n      <span\n        class=\"pattern-relateditems-recentlyused-title <%- portal_type ? 'contenttype-' + portal_type.toLowerCase() : '' %> <%- review_state ? 'state-' + review_state : '' %>\"\n        title=\"<%- portal_type %>\">\n        <%- Title %>\n      </span>\n      <span class=\"pattern-relateditems-recentlyused-path\"><%- path %></span>\n    </div>\n    <% if (getURL && (getIcon || portal_type === \"Image\")) { %>\n      <div class=\"pattern-relateditems-recentlyused-image\">\n        <img src=\"<%- getURL %>/@@images/image/tile\" />\n      </div>\n    <% } %>\n  </a>\n</li>\n");
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/relateditems/templates/selection.xml
/* harmony default export */ var selection = ("<div class=\"pattern-relateditems-item\">\n  <div class=\"pattern-relateditems-result-info\">\n    <span\n      class=\"pattern-relateditems-item-title <%- portal_type ? 'contenttype-' + portal_type.toLowerCase() : '' %> <%- review_state ? 'state-' + review_state : '' %>\"\n      title=\"<%- portal_type %>\">\n      <%- Title %>\n    </span>\n    <span class=\"pattern-relateditems-item-path\"><%- path %></span>\n  </div>\n  <% if (getURL && (getIcon || portal_type === \"Image\")) { %>\n    <div class=\"pattern-relateditems-item-image\">\n      <img src=\"<%- getURL %>/@@images/image/thumb\" />\n    </div>\n  <% } %>\n</div>\n");
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/relateditems/templates/toolbar.xml
/* harmony default export */ var toolbar = ("<% if (mode!=='auto') { %>\n<div class=\"btn-group mode-selector\" role=\"group\">\n  <button type=\"button\" class=\"mode search btn <% if (mode=='search') { %>btn-primary<% } else {%>btn-default<% } %>\"><%- searchModeText %></button>\n  <button type=\"button\" class=\"mode browse btn <% if (mode=='browse') { %>btn-primary<% } else {%>btn-default<% } %>\"><%- browseModeText %></button>\n</div>\n<% } %>\n<div class=\"path-wrapper\">\n  <span class=\"pattern-relateditems-path-label\"><%- searchText %></span>\n  <a class=\"crumb\" href=\"/\"><span class=\"glyphicon glyphicon-home\"/></a>\n  <%= items %>\n</div>\n<div class=\"controls pull-right\">\n\n  <% if (recentlyUsedItems) { %>\n  <div class=\"recentlyUsed dropdown pull-right\">\n    <button type=\"button\" class=\"recentlyUsed dropdown-toggle btn btn-primary\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n      <span class=\"glyphicon glyphicon-time\"/>\n      <%- recentlyUsedText %>\n      <span class=\"caret\"/>\n    </button>\n    <ul class=\"dropdown-menu\">\n      <%= recentlyUsedItems %>\n    </ul>\n  </div>\n  <% } %>\n\n  <% if (favorites.length > 0) { %>\n  <div class=\"favorites dropdown pull-right\">\n    <button type=\"button\" class=\"favorites dropdown-toggle btn btn-primary\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n      <span class=\"glyphicon glyphicon-star\"/>\n      <%- favText %>\n      <span class=\"caret\"/>\n    </button>\n    <ul class=\"dropdown-menu\">\n      <%= favItems %>\n    </ul>\n  </div>\n  <% } %>\n</div>\n");
// EXTERNAL MODULE: ./node_modules/patternslib/src/core/registry.js
var registry = __webpack_require__(12);

// EXTERNAL MODULE: ./node_modules/mockup/src/pat/select2/select2.js
var select2 = __webpack_require__(52);

// EXTERNAL MODULE: ./node_modules/bootstrap/js/src/dropdown.js + 2 modules
var dropdown = __webpack_require__(262);

// CONCATENATED MODULE: ./node_modules/mockup/src/pat/relateditems/relateditems.js
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }





 // UI

 // This pattern







 // Other patterns

 // External


var KEY = {
  LEFT: 37,
  RIGHT: 39
};
/* harmony default export */ var relateditems = __webpack_exports__["a"] = (base["a" /* default */].extend({
  name: "relateditems",
  trigger: ".pat-relateditems",
  parser: "mockup",
  currentPath: undefined,
  selectedUIDs: [],
  openAfterInit: undefined,
  defaults: {
    // main option
    vocabularyUrl: null,
    // must be set to work
    // more options
    attributes: ["UID", "Title", "portal_type", "path", "getURL", "getIcon", "is_folderish", "review_state"],
    // used by utils.QueryHelper
    basePath: "",
    pageSize: 10,
    browsing: undefined,
    closeOnSelect: true,
    contextPath: undefined,
    dropdownCssClass: "pattern-relateditems-dropdown",
    favorites: [],
    recentlyUsed: false,
    recentlyUsedMaxItems: 20,
    recentlyUsedKey: "relateditems_recentlyused",
    maximumSelectionSize: -1,
    minimumInputLength: 0,
    mode: "auto",
    // possible values are 'auto', 'search' and 'browse'.
    orderable: true,
    // mockup-patterns-select2
    pathOperator: "plone.app.querystring.operation.string.path",
    rootPath: "/",
    rootUrl: "",
    // default to be relative.
    scanSelection: false,
    // False, to no unnecessarily use CPU time on this.
    selectableTypes: null,
    // null means everything is selectable, otherwise a list of strings to match types that are selectable
    separator: ",",
    sortOn: null,
    sortOrder: "ascending",
    tokenSeparators: [",", " "],
    upload: false,
    uploadAllowView: undefined,
    width: "100%",
    // templates
    breadcrumbTemplate: breadcrumb,
    breadcrumbTemplateSelector: null,
    favoriteTemplate: favorite,
    favoriteTemplateSelector: null,
    recentlyusedTemplate: recentlyused,
    recentlyusedTemplateSelector: null,
    resultTemplate: templates_result,
    resultTemplateSelector: null,
    selectionTemplate: selection,
    selectionTemplateSelector: null,
    toolbarTemplate: toolbar,
    toolbarTemplateSelector: null,
    // needed
    multiple: true
  },
  recentlyUsed: function recentlyUsed(filterSelectable) {
    var ret = utils["a" /* default */].storage.get(this.options.recentlyUsedKey) || []; // hard-limit to 1000 entries

    ret = ret.slice(ret.length - 1000, ret.length);

    if (filterSelectable) {
      // Filter out only selectable items.
      // This is used only to create the list of items to be displayed.
      // the list to be stored is unfiltered and can be reused among
      // different instances of this widget with different settings.
      ret.filter(this.isSelectable.bind(this));
    } // max is applied AFTER filtering selectable items.


    var max = parseInt(this.options.recentlyUsedMaxItems, 10);

    if (max) {
      // return the slice from the end, as we want to display newest items first.
      ret = ret.slice(ret.length - max, ret.length);
    }

    return ret;
  },
  applyTemplate: function applyTemplate(tpl, item) {
    var self = this;
    var template;

    if (self.options[tpl + "TemplateSelector"]) {
      template = jquery_js_exposed_default()(self.options[tpl + "TemplateSelector"]).html();

      if (!template) {
        template = self.options[tpl + "Template"];
      }
    } else {
      template = self.options[tpl + "Template"];
    } // let's give all the options possible to the template generation


    var options = jquery_js_exposed_default.a.extend(true, {}, self.options, item, {
      browsing: self.browsing,
      open_folder: Object(i18n_wrapper["a" /* default */])("Open folder"),
      current_directory: Object(i18n_wrapper["a" /* default */])("current directory:"),
      one_level_up: Object(i18n_wrapper["a" /* default */])("Go one level up")
    });
    options._item = item;
    return index_all["default"].template(template)(options);
  },
  setAjax: function setAjax() {
    var ajax = {
      url: this.options.vocabularyUrl,
      dataType: "JSON",
      quietMillis: 500,
      data: function (term, page) {
        var criterias = [];

        if (term) {
          term = "*" + term + "*";
          criterias.push({
            i: "SearchableText",
            o: "plone.app.querystring.operation.string.contains",
            v: term
          });
        } // We don't restrict for selectable types while browsing...


        if (!this.browsing && this.options.selectableTypes) {
          criterias.push({
            i: "portal_type",
            o: "plone.app.querystring.operation.selection.any",
            v: this.options.selectableTypes
          });
        }

        criterias.push({
          i: "path",
          o: this.options.pathOperator,
          v: this.options.rootPath + this.currentPath + (this.browsing ? "::1" : "")
        });
        var sort_on = this.options.sortOn;
        var sort_order = sort_on ? this.options.sortOrder : null;

        if (this.browsing && sort_on === null) {
          sort_on = "getObjPositionInParent";
          sort_order = "ascending";
        }

        var data = {
          query: JSON.stringify({
            criteria: criterias,
            sort_on: sort_on,
            sort_order: sort_order
          }),
          attributes: JSON.stringify(this.options.attributes),
          batch: JSON.stringify({
            page: page ? page : 1,
            size: this.options.pageSize
          })
        };
        return data;
      }.bind(this),
      results: function (data, page) {
        var more = page * this.options.pageSize < data.total;
        var results = data.results;
        this.selectedUIDs = (jquery_js_exposed_default()(this.el).select2("data") || []).map(function (el) {
          // populate current selection. Reuse in formatResult
          return el.UID;
        }); // Filter out items:
        // While browsing: always include folderish items
        // Browsing and searching: Only include selectable items which are not already selected, and all folders
        // even if they're selected, as we need them available for browsing/selecting their children

        results = results.filter(function (item) {
          if (this.browsing && item.is_folderish || this.isSelectable(item) && this.selectedUIDs.indexOf(item.UID) === -1) {
            return true;
          }

          return false;
        }.bind(this)); // Extend ``data`` with a ``oneLevelUp`` item when browsing

        var path = this.currentPath.split("/");

        if (page === 1 && // Show level up only on top.
        this.browsing && // only level up when browsing
        path.length > 1 && // do not try to level up one level under root.
        this.currentPath !== "/" // do not try to level up beyond root
        ) {
            results = [{
              oneLevelUp: true,
              Title: Object(i18n_wrapper["a" /* default */])("One level up"),
              path: path.slice(0, path.length - 1).join("/") || "/",
              currentPath: this.currentPath,
              is_folderish: true,
              selectable: false
            }].concat(results);
          }

        return {
          results: results,
          more: more
        };
      }.bind(this)
    };
    this.options.ajax = ajax;
  },
  renderToolbar: function () {
    var _renderToolbar = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var self, path, html, paths, itemPath, itemsHtml, favoritesHtml, recentlyUsedHtml, recentlyUsed, initUploadView, UploadView;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              initUploadView = function _initUploadView(UploadView, disabled) {
                var uploadButtonId = "upload-" + utils["a" /* default */].generateId();
                var uploadButton = new views_button["a" /* default */]({
                  id: uploadButtonId,
                  title: Object(i18n_wrapper["a" /* default */])("Upload"),
                  tooltip: Object(i18n_wrapper["a" /* default */])("Upload files"),
                  icon: "upload"
                });

                if (disabled) {
                  uploadButton.disable();
                }

                jquery_js_exposed_default()(".controls", self.$toolbar).prepend(uploadButton.render().el);
                self.uploadView = new UploadView({
                  triggerView: uploadButton,
                  app: self
                });
                jquery_js_exposed_default()("#btn-" + uploadButtonId, self.$toolbar).append(self.uploadView.render().el);
              };

              self = this;
              path = self.currentPath;
              paths = path.split("/");
              itemPath = "";
              itemsHtml = "";

              index_all["default"].each(paths, function (node) {
                if (node !== "") {
                  var item = {};
                  item.path = itemPath = itemPath + "/" + node;
                  item.text = node;
                  itemsHtml = itemsHtml + self.applyTemplate("breadcrumb", item);
                }
              }); // favorites


              favoritesHtml = "";

              index_all["default"].each(self.options.favorites, function (item) {
                var item_copy = index_all["default"].clone(item);

                item_copy.path = item_copy.path.substr(self.options.rootPath.length) || "/";
                favoritesHtml = favoritesHtml + self.applyTemplate("favorite", item_copy);
              });

              recentlyUsedHtml = "";

              if (self.options.recentlyUsed) {
                recentlyUsed = self.recentlyUsed(true); // filter out only those items which can actually be selected

                index_all["default"].each(recentlyUsed.reverse(), function (item) {
                  // reverse to get newest first.
                  recentlyUsedHtml = recentlyUsedHtml + self.applyTemplate("recentlyused", item);
                });
              }

              html = self.applyTemplate("toolbar", {
                items: itemsHtml,
                favItems: favoritesHtml,
                favText: Object(i18n_wrapper["a" /* default */])("Favorites"),
                searchText: Object(i18n_wrapper["a" /* default */])("Current path:"),
                searchModeText: Object(i18n_wrapper["a" /* default */])("Search"),
                browseModeText: Object(i18n_wrapper["a" /* default */])("Browse"),
                recentlyUsedItems: recentlyUsedHtml,
                recentlyUsedText: Object(i18n_wrapper["a" /* default */])("Recently Used")
              });
              self.$toolbar.html(html);
              jquery_js_exposed_default()(".dropdown-toggle", self.$toolbar).dropdown(); // unbind mouseup event from select2 to override the behavior:

              jquery_js_exposed_default()(".pattern-relateditems-dropdown").unbind("mouseup");
              jquery_js_exposed_default()(".pattern-relateditems-dropdown").bind("mouseup", function (e) {
                e.stopPropagation();
              });
              jquery_js_exposed_default()("button.mode.search", self.$toolbar).on("click", function (e) {
                e.preventDefault();

                if (self.browsing) {
                  jquery_js_exposed_default()("button.mode.search", self.$toolbar).toggleClass("btn-primary btn-default");
                  jquery_js_exposed_default()("button.mode.browse", self.$toolbar).toggleClass("btn-primary btn-default");
                  self.browsing = false;

                  if (jquery_js_exposed_default()(self.el).select2("data").length > 0) {
                    // Have to call after initialization
                    self.openAfterInit = true;
                  }

                  if (!self.openAfterInit) {
                    jquery_js_exposed_default()(self.el).select2("close");
                    jquery_js_exposed_default()(self.el).select2("open");
                  }
                } else {
                  // just open result list
                  jquery_js_exposed_default()(self.el).select2("close");
                  jquery_js_exposed_default()(self.el).select2("open");
                }
              });
              jquery_js_exposed_default()("button.mode.browse", self.$toolbar).on("click", function (e) {
                e.preventDefault();

                if (!self.browsing) {
                  jquery_js_exposed_default()("button.mode.search", self.$toolbar).toggleClass("btn-primary btn-default");
                  jquery_js_exposed_default()("button.mode.browse", self.$toolbar).toggleClass("btn-primary btn-default");
                  self.browsing = true;

                  if (jquery_js_exposed_default()(self.el).select2("data").length > 0) {
                    // Have to call after initialization
                    self.openAfterInit = true;
                  }

                  if (!self.openAfterInit) {
                    jquery_js_exposed_default()(self.el).select2("close");
                    jquery_js_exposed_default()(self.el).select2("open");
                  }
                } else {
                  // just open result list
                  jquery_js_exposed_default()(self.el).select2("close");
                  jquery_js_exposed_default()(self.el).select2("open");
                }
              });
              jquery_js_exposed_default()("a.crumb", self.$toolbar).on("click", function (e) {
                e.preventDefault();
                self.browseTo(jquery_js_exposed_default()(this).attr("href"));
              });
              jquery_js_exposed_default()("a.fav", self.$toolbar).on("click", function (e) {
                e.preventDefault();
                self.browseTo(jquery_js_exposed_default()(this).attr("href"));
              });

              if (self.options.recentlyUsed) {
                jquery_js_exposed_default()(".pattern-relateditems-recentlyused-select", self.$toolbar).on("click", function (event) {
                  event.preventDefault();
                  var uid = jquery_js_exposed_default()(this).data("uid");
                  var item = self.recentlyUsed().filter(function (it) {
                    return it.UID === uid;
                  });

                  if (item.length > 0) {
                    item = item[0];
                  } else {
                    return;
                  }

                  self.selectItem(item);

                  if (self.options.maximumSelectionSize > 0) {
                    var items = jquery_js_exposed_default()(self.el).select2("data");

                    if (items.length >= self.options.maximumSelectionSize) {
                      return;
                    }
                  }
                });
              }

              if (!(self.options.upload && utils["a" /* default */].featureSupport.dragAndDrop() && utils["a" /* default */].featureSupport.fileApi())) {
                _context.next = 27;
                break;
              }

              _context.next = 24;
              return __webpack_require__.e(/* import() */ 175).then(__webpack_require__.bind(null, 673));

            case 24:
              UploadView = _context.sent;
              UploadView = UploadView.default;

              if (self.options.uploadAllowView) {
                // Check, if uploads are allowed in current context
                jquery_js_exposed_default.a.ajax({
                  url: self.options.uploadAllowView,
                  // url: self.currentUrl() + self.options.uploadAllowView,  // not working yet
                  dataType: "JSON",
                  data: {
                    path: self.options.rootPath + self.currentPath
                  },
                  type: "GET",
                  success: function success(result) {
                    initUploadView(UploadView, !result.allowUpload);
                  }
                });
              } else {
                // just initialize upload view without checking, if uploads are allowed.
                initUploadView(UploadView);
              }

            case 27:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function renderToolbar() {
      return _renderToolbar.apply(this, arguments);
    }

    return renderToolbar;
  }(),
  browseTo: function browseTo(path) {
    var self = this;
    self.emit("before-browse");
    self.currentPath = path;
    jquery_js_exposed_default()(self.el).select2("close");
    self.renderToolbar();
    jquery_js_exposed_default()(self.el).select2("open");
    self.emit("after-browse");
  },
  selectItem: function selectItem(item) {
    var self = this;
    self.emit("selecting");
    var data = jquery_js_exposed_default()(self.el).select2("data");
    data.push(item);
    jquery_js_exposed_default()(self.el).select2("data", data, true);

    if (self.options.recentlyUsed) {
      // add to recently added items
      var recentlyUsed = self.recentlyUsed(); // do not filter for selectable but get all. append to that list the new item.

      var alreadyPresent = recentlyUsed.filter(function (it) {
        return it.UID === item.UID;
      });

      if (alreadyPresent.length > 0) {
        recentlyUsed.splice(recentlyUsed.indexOf(alreadyPresent[0]), 1);
      }

      recentlyUsed.push(item);
      utils["a" /* default */].storage.set(self.options.recentlyUsedKey, recentlyUsed);
    }

    self.emit("selected");
  },
  deselectItem: function deselectItem(item) {
    var self = this;
    self.emit("deselecting");
    var data = jquery_js_exposed_default()(self.el).select2("data");

    index_all["default"].each(data, function (obj, i) {
      if (obj.UID === item.UID) {
        data.splice(i, 1);
      }
    });

    jquery_js_exposed_default()(self.el).select2("data", data, true);
    self.emit("deselected");
  },
  isSelectable: function isSelectable(item) {
    var self = this;

    if (item.selectable === false) {
      return false;
    }

    if (self.options.selectableTypes === null) {
      return true;
    } else {
      return self.options.selectableTypes.indexOf(item.portal_type) !== -1;
    }
  },
  init: function init() {
    var self = this;
    self.browsing = self.options.mode !== "search"; // Remove trailing slash

    self.options.rootPath = self.options.rootPath.replace(/\/$/, ""); // Substract rootPath from basePath with is the relative currentPath. Has a leading slash. Or use '/'

    self.currentPath = self.options.basePath.substr(self.options.rootPath.length) || "/";
    self.setAjax();
    self.$el.wrap('<div class="pattern-relateditems-container" />');
    self.$container = self.$el.parents(".pattern-relateditems-container");
    self.$container.width(self.options.width);
    select2["default"].prototype.initializeValues.call(self);
    select2["default"].prototype.initializeTags.call(self);

    self.options.formatSelection = function (item) {
      item = jquery_js_exposed_default.a.extend(true, {
        Title: "",
        getIcon: "",
        getURL: "",
        path: "",
        portal_type: "",
        review_state: ""
      }, item); // activate petterns on the result set.

      var $selection = jquery_js_exposed_default()(self.applyTemplate("selection", item));

      if (self.options.scanSelection) {
        registry["a" /* default */].scan($selection);
      }

      if (self.options.maximumSelectionSize == 1) {
        // If this related field accepts only 1 item, the breadcrumbs should
        // reflect the location for this particular item
        var itemPath = item.path;
        var path_split = itemPath.split("/");
        path_split = path_split.slice(0, -1); // Remove last part of path, we always want the parent path

        itemPath = path_split.join("/");
        self.currentPath = itemPath;
        self.renderToolbar();
      }

      return $selection;
    };

    select2["default"].prototype.initializeOrdering.call(self);

    self.options.formatResult = function (item) {
      item.selectable = self.isSelectable(item);
      item = jquery_js_exposed_default.a.extend(true, {
        Title: "",
        getIcon: "",
        getURL: "",
        is_folderish: false,
        oneLevelUp: false,
        path: "",
        portal_type: "",
        review_state: "",
        selectable: false
      }, item);

      if (self.selectedUIDs.indexOf(item.UID) !== -1) {
        // do not allow already selected items to be selected again.
        item.selectable = false;
      }

      var result = jquery_js_exposed_default()(self.applyTemplate("result", item));
      jquery_js_exposed_default()(".pattern-relateditems-result-select", result).on("click", function (event) {
        event.preventDefault(); // event.stopPropagation();

        if (jquery_js_exposed_default()(this).is(".selectable")) {
          var $parent = jquery_js_exposed_default()(this).parents(".pattern-relateditems-result");

          if ($parent.is(".pattern-relateditems-active")) {
            $parent.removeClass("pattern-relateditems-active");
            self.deselectItem(item);
          } else {
            if (self.options.maximumSelectionSize > 0) {
              var items = jquery_js_exposed_default()(self.el).select2("data");

              if (items.length >= self.options.maximumSelectionSize) {
                jquery_js_exposed_default()(self.el).select2("close");
              }
            }

            self.selectItem(item);
            $parent.addClass("pattern-relateditems-active");

            if (self.options.closeOnSelect) {
              jquery_js_exposed_default()(self.el).select2("close");
            }
          }
        }
      });
      jquery_js_exposed_default()(".pattern-relateditems-result-browse", result).on("click", function (event) {
        event.preventDefault();
        event.stopPropagation();
        var path = jquery_js_exposed_default()(this).data("path");
        self.browseTo(path);
      });
      return jquery_js_exposed_default()(result);
    };

    self.options.initSelection = function (element, callback) {
      var value = jquery_js_exposed_default()(element).val();

      if (value !== "") {
        var ids = value.split(self.options.separator);
        var query = new utils["a" /* default */].QueryHelper(jquery_js_exposed_default.a.extend(true, {}, self.options, {
          pattern: self
        }));
        query.search("UID", "plone.app.querystring.operation.list.contains", ids, function (data) {
          var results = data.results.reduce(function (prev, item) {
            prev[item.UID] = item;
            return prev;
          }, {});

          try {
            callback(ids.map(function (uid) {
              return results[uid];
            }).filter(function (item) {
              return item !== undefined;
            }));
          } catch (e) {// Select2 3.5.4 throws an error in some cases in
            // updateSelection, ``this.selection.find(".select2-search-choice").remove();``
            // No idea why, hard to track.
          }

          if (self.openAfterInit) {
            // open after initialization
            jquery_js_exposed_default()(self.el).select2("open");
            self.openAfterInit = undefined;
          }
        }, false);
      }
    };

    self.options.tokenizer = function (input) {
      if (this.options.mode === "auto") {
        this.browsing = input ? false : true;
      }
    }.bind(this);

    self.options.id = function (item) {
      return item.UID;
    };

    select2["default"].prototype.initializeSelect2.call(self);
    self.$toolbar = jquery_js_exposed_default()('<div class="toolbar ui-offset-parent" />');
    self.$container.prepend(self.$toolbar);
    self.$el.on("select2-selecting", function (event) {
      if (!self.isSelectable(event.choice)) {
        event.preventDefault();
      }
    });
    self.renderToolbar();
    jquery_js_exposed_default()(document).on("keyup", self.$el, function (event) {
      var isOpen = select2["default"].prototype.opened.call(self);

      if (!isOpen) {
        return;
      }

      if (event.which === KEY.LEFT || event.which === KEY.RIGHT) {
        event.stopPropagation();
        var selectorContext = event.which === KEY.LEFT ? ".pattern-relateditems-result.one-level-up" : ".select2-highlighted";
        var browsableItemSelector = ".pattern-relateditems-result-browse";
        var browsableItem = jquery_js_exposed_default()(browsableItemSelector, selectorContext);

        if (browsableItem.length !== 1) {
          return;
        }

        var path = browsableItem.data("path");
        self.browseTo(path);
      }
    });
  }
}));

/***/ }),

/***/ 136:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}
// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/utils/getBasePlacement.js
var getBasePlacement = __webpack_require__(29);

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var getOppositeVariationPlacement_hash = {
  start: 'end',
  end: 'start'
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function (matched) {
    return getOppositeVariationPlacement_hash[matched];
  });
}
// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/utils/detectOverflow.js + 4 modules
var detectOverflow = __webpack_require__(41);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/utils/getVariation.js
var getVariation = __webpack_require__(63);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/enums.js
var enums = __webpack_require__(4);

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js





/*:: type OverflowsMap = { [ComputedPlacement]: number }; */

/*;; type OverflowsMap = { [key in ComputedPlacement]: number }; */
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements = _options$allowedAutoP === void 0 ? enums["o" /* placements */] : _options$allowedAutoP;
  var variation = Object(getVariation["a" /* default */])(placement);
  var placements = variation ? flipVariations ? enums["v" /* variationPlacements */] : enums["v" /* variationPlacements */].filter(function (placement) {
    return Object(getVariation["a" /* default */])(placement) === variation;
  }) : enums["e" /* basePlacements */];
  var allowedPlacements = placements.filter(function (placement) {
    return allowedAutoPlacements.indexOf(placement) >= 0;
  });

  if (allowedPlacements.length === 0) {
    allowedPlacements = placements;

    if (false) {}
  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


  var overflows = allowedPlacements.reduce(function (acc, placement) {
    acc[placement] = Object(detectOverflow["a" /* default */])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding
    })[Object(getBasePlacement["a" /* default */])(placement)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function (a, b) {
    return overflows[a] - overflows[b];
  });
}
// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/flip.js






 // eslint-disable-next-line import/no-unused-modules

function getExpandedFallbackPlacements(placement) {
  if (Object(getBasePlacement["a" /* default */])(placement) === enums["d" /* auto */]) {
    return [];
  }

  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}

function flip(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;

  if (state.modifiersData[name]._skip) {
    return;
  }

  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = Object(getBasePlacement["a" /* default */])(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
    return acc.concat(Object(getBasePlacement["a" /* default */])(placement) === enums["d" /* auto */] ? computeAutoPlacement(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      flipVariations: flipVariations,
      allowedAutoPlacements: allowedAutoPlacements
    }) : placement);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements[0];

  for (var i = 0; i < placements.length; i++) {
    var placement = placements[i];

    var _basePlacement = Object(getBasePlacement["a" /* default */])(placement);

    var isStartVariation = Object(getVariation["a" /* default */])(placement) === enums["t" /* start */];
    var isVertical = [enums["u" /* top */], enums["i" /* bottom */]].indexOf(_basePlacement) >= 0;
    var len = isVertical ? 'width' : 'height';
    var overflow = Object(detectOverflow["a" /* default */])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      altBoundary: altBoundary,
      padding: padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? enums["s" /* right */] : enums["l" /* left */] : isStartVariation ? enums["i" /* bottom */] : enums["u" /* top */];

    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }

    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];

    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }

    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }

    if (checks.every(function (check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }

    checksMap.set(placement, checks);
  }

  if (makeFallbackChecks) {
    // `2` may be desired in some cases – research later
    var numberOfChecks = flipVariations ? 3 : 1;

    var _loop = function _loop(_i) {
      var fittingPlacement = placements.find(function (placement) {
        var checks = checksMap.get(placement);

        if (checks) {
          return checks.slice(0, _i).every(function (check) {
            return check;
          });
        }
      });

      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };

    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);

      if (_ret === "break") break;
    }
  }

  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ var modifiers_flip = __webpack_exports__["a"] = ({
  name: 'flip',
  enabled: true,
  phase: 'main',
  fn: flip,
  requiresIfExists: ['offset'],
  data: {
    _skip: false
  }
});

/***/ }),

/***/ 137:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/enums.js
var enums = __webpack_require__(4);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/utils/getBasePlacement.js
var getBasePlacement = __webpack_require__(29);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
var getMainAxisFromPlacement = __webpack_require__(89);

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}
// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/utils/within.js
var within = __webpack_require__(94);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
var getLayoutRect = __webpack_require__(90);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js + 1 modules
var getOffsetParent = __webpack_require__(58);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/utils/detectOverflow.js + 4 modules
var detectOverflow = __webpack_require__(41);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/utils/getVariation.js
var getVariation = __webpack_require__(63);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
var getFreshSideObject = __webpack_require__(141);

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js











function preventOverflow(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = Object(detectOverflow["a" /* default */])(state, {
    boundary: boundary,
    rootBoundary: rootBoundary,
    padding: padding,
    altBoundary: altBoundary
  });
  var basePlacement = Object(getBasePlacement["a" /* default */])(state.placement);
  var variation = Object(getVariation["a" /* default */])(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = Object(getMainAxisFromPlacement["a" /* default */])(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign(Object.assign({}, state.rects), {}, {
    placement: state.placement
  })) : tetherOffset;
  var data = {
    x: 0,
    y: 0
  };

  if (!popperOffsets) {
    return;
  }

  if (checkMainAxis) {
    var mainSide = mainAxis === 'y' ? enums["u" /* top */] : enums["l" /* left */];
    var altSide = mainAxis === 'y' ? enums["i" /* bottom */] : enums["s" /* right */];
    var len = mainAxis === 'y' ? 'height' : 'width';
    var offset = popperOffsets[mainAxis];
    var min = popperOffsets[mainAxis] + overflow[mainSide];
    var max = popperOffsets[mainAxis] - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === enums["t" /* start */] ? referenceRect[len] : popperRect[len];
    var maxLen = variation === enums["t" /* start */] ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
    // outside the reference bounds

    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? Object(getLayoutRect["a" /* default */])(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : Object(getFreshSideObject["a" /* default */])();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
    // to include its full size in the calculation. If the reference is small
    // and near the edge of a boundary, the popper can overflow even if the
    // reference is not overflowing as well (e.g. virtual elements with no
    // width or height)

    var arrowLen = Object(within["a" /* default */])(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
    var arrowOffsetParent = state.elements.arrow && Object(getOffsetParent["a" /* default */])(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
    var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;
    var preventedOffset = Object(within["a" /* default */])(tether ? Math.min(min, tetherMin) : min, offset, tether ? Math.max(max, tetherMax) : max);
    popperOffsets[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset;
  }

  if (checkAltAxis) {
    var _mainSide = mainAxis === 'x' ? enums["u" /* top */] : enums["l" /* left */];

    var _altSide = mainAxis === 'x' ? enums["i" /* bottom */] : enums["s" /* right */];

    var _offset = popperOffsets[altAxis];

    var _min = _offset + overflow[_mainSide];

    var _max = _offset - overflow[_altSide];

    var _preventedOffset = Object(within["a" /* default */])(_min, _offset, _max);

    popperOffsets[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ var modifiers_preventOverflow = __webpack_exports__["a"] = ({
  name: 'preventOverflow',
  enabled: true,
  phase: 'main',
  fn: preventOverflow,
  requiresIfExists: ['offset']
});

/***/ }),

/***/ 138:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _dom_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(65);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-beta2): base-component.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */



/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const VERSION = '5.0.0-beta2'

class BaseComponent {
  constructor(element) {
    if (!element) {
      return
    }

    this._element = element
    _dom_data__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].setData(element, this.constructor.DATA_KEY, this)
  }

  dispose() {
    _dom_data__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].removeData(this._element, this.constructor.DATA_KEY)
    this._element = null
  }

  /** Static */

  static getInstance(element) {
    return _dom_data__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].getData(element, this.DATA_KEY)
  }

  static get VERSION() {
    return VERSION
  }
}

/* harmony default export */ __webpack_exports__["a"] = (BaseComponent);


/***/ }),

/***/ 139:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return contains; });
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18);

function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

  if (parent.contains(child)) {
    return true;
  } // then fallback to custom implementation with Shadow DOM support
  else if (rootNode && Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__[/* isShadowRoot */ "c"])(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


  return false;
}

/***/ }),

/***/ 140:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return mergePaddingObject; });
/* harmony import */ var _getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(141);

function mergePaddingObject(paddingObject) {
  return Object.assign(Object.assign({}, Object(_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])()), paddingObject);
}

/***/ }),

/***/ 141:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getFreshSideObject; });
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

/***/ }),

/***/ 142:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return expandToHashMap; });
function expandToHashMap(value, keys) {
  return keys.reduce(function (hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

/***/ }),

/***/ 143:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return computeOffsets; });
/* harmony import */ var _getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(29);
/* harmony import */ var _getVariation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(63);
/* harmony import */ var _getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(89);
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);




function computeOffsets(_ref) {
  var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement;
  var basePlacement = placement ? Object(_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(placement) : null;
  var variation = placement ? Object(_getVariation_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(placement) : null;
  var commonX = reference.x + reference.width / 2 - element.width / 2;
  var commonY = reference.y + reference.height / 2 - element.height / 2;
  var offsets;

  switch (basePlacement) {
    case _enums_js__WEBPACK_IMPORTED_MODULE_3__[/* top */ "u"]:
      offsets = {
        x: commonX,
        y: reference.y - element.height
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_3__[/* bottom */ "i"]:
      offsets = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_3__[/* right */ "s"]:
      offsets = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_3__[/* left */ "l"]:
      offsets = {
        x: reference.x - element.width,
        y: commonY
      };
      break;

    default:
      offsets = {
        x: reference.x,
        y: reference.y
      };
  }

  var mainAxis = basePlacement ? Object(_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"])(basePlacement) : null;

  if (mainAxis != null) {
    var len = mainAxis === 'y' ? 'height' : 'width';

    switch (variation) {
      case _enums_js__WEBPACK_IMPORTED_MODULE_3__[/* start */ "t"]:
        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
        break;

      case _enums_js__WEBPACK_IMPORTED_MODULE_3__[/* end */ "k"]:
        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
        break;

      default:
    }
  }

  return offsets;
}

/***/ }),

/***/ 18:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return isElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return isHTMLElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return isShadowRoot; });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(26);

/*:: declare function isElement(node: mixed): boolean %checks(node instanceof
  Element); */

function isElement(node) {
  var OwnElement = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
/*:: declare function isHTMLElement(node: mixed): boolean %checks(node instanceof
  HTMLElement); */


function isHTMLElement(node) {
  var OwnElement = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
/*:: declare function isShadowRoot(node: mixed): boolean %checks(node instanceof
  ShadowRoot); */


function isShadowRoot(node) {
  var OwnElement = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}



/***/ }),

/***/ 20:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Backbone.js 1.1.2

//     (c) 2010-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

(function(root, factory) {

  // Set up Backbone appropriately for the environment. Start with AMD.
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(0), exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function(_, $, exports) {
      // Export global even in AMD case in case this script is loaded with
      // others that may still expect a global Backbone.
      root.Backbone = factory(root, exports, _, $);
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

  // Next for Node.js or CommonJS. jQuery may not be needed as a module.
  } else { var _; }

}(this, function(root, Backbone, _, $) {

  // Initial Setup
  // -------------

  // Save the previous value of the `Backbone` variable, so that it can be
  // restored later on, if `noConflict` is used.
  var previousBackbone = root.Backbone;

  // Create local references to array methods we'll want to use later.
  var array = [];
  var push = array.push;
  var slice = array.slice;
  var splice = array.splice;

  // Current version of the library. Keep in sync with `package.json`.
  Backbone.VERSION = '1.1.2';

  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
  // the `$` variable.
  Backbone.$ = $;

  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
  // to its previous owner. Returns a reference to this Backbone object.
  Backbone.noConflict = function() {
    root.Backbone = previousBackbone;
    return this;
  };

  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
  // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
  // set a `X-Http-Method-Override` header.
  Backbone.emulateHTTP = false;

  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
  // `application/json` requests ... will encode the body as
  // `application/x-www-form-urlencoded` instead and will send the model in a
  // form param named `model`.
  Backbone.emulateJSON = false;

  // Backbone.Events
  // ---------------

  // A module that can be mixed in to *any object* in order to provide it with
  // custom events. You may bind with `on` or remove with `off` callback
  // functions to an event; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  var Events = Backbone.Events = {

    // Bind an event to a `callback` function. Passing `"all"` will bind
    // the callback to all events fired.
    on: function(name, callback, context) {
      if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;
      this._events || (this._events = {});
      var events = this._events[name] || (this._events[name] = []);
      events.push({callback: callback, context: context, ctx: context || this});
      return this;
    },

    // Bind an event to only be triggered a single time. After the first time
    // the callback is invoked, it will be removed.
    once: function(name, callback, context) {
      if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;
      var self = this;
      var once = _.once(function() {
        self.off(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
      return this.on(name, once, context);
    },

    // Remove one or many callbacks. If `context` is null, removes all
    // callbacks with that function. If `callback` is null, removes all
    // callbacks for the event. If `name` is null, removes all bound
    // callbacks for all events.
    off: function(name, callback, context) {
      var retain, ev, events, names, i, l, j, k;
      if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;
      if (!name && !callback && !context) {
        this._events = void 0;
        return this;
      }
      names = name ? [name] : _.keys(this._events);
      for (i = 0, l = names.length; i < l; i++) {
        name = names[i];
        if (events = this._events[name]) {
          this._events[name] = retain = [];
          if (callback || context) {
            for (j = 0, k = events.length; j < k; j++) {
              ev = events[j];
              if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||
                  (context && context !== ev.context)) {
                retain.push(ev);
              }
            }
          }
          if (!retain.length) delete this._events[name];
        }
      }

      return this;
    },

    // Trigger one or many events, firing all bound callbacks. Callbacks are
    // passed the same arguments as `trigger` is, apart from the event name
    // (unless you're listening on `"all"`, which will cause your callback to
    // receive the true name of the event as the first argument).
    trigger: function(name) {
      if (!this._events) return this;
      var args = slice.call(arguments, 1);
      if (!eventsApi(this, 'trigger', name, args)) return this;
      var events = this._events[name];
      var allEvents = this._events.all;
      if (events) triggerEvents(events, args);
      if (allEvents) triggerEvents(allEvents, arguments);
      return this;
    },

    // Tell this object to stop listening to either specific events ... or
    // to every object it's currently listening to.
    stopListening: function(obj, name, callback) {
      var listeningTo = this._listeningTo;
      if (!listeningTo) return this;
      var remove = !name && !callback;
      if (!callback && typeof name === 'object') callback = this;
      if (obj) (listeningTo = {})[obj._listenId] = obj;
      for (var id in listeningTo) {
        obj = listeningTo[id];
        obj.off(name, callback, this);
        if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id];
      }
      return this;
    }

  };

  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;

  // Implement fancy features of the Events API such as multiple event
  // names `"change blur"` and jQuery-style event maps `{change: action}`
  // in terms of the existing API.
  var eventsApi = function(obj, action, name, rest) {
    if (!name) return true;

    // Handle event maps.
    if (typeof name === 'object') {
      for (var key in name) {
        obj[action].apply(obj, [key, name[key]].concat(rest));
      }
      return false;
    }

    // Handle space separated event names.
    if (eventSplitter.test(name)) {
      var names = name.split(eventSplitter);
      for (var i = 0, l = names.length; i < l; i++) {
        obj[action].apply(obj, [names[i]].concat(rest));
      }
      return false;
    }

    return true;
  };

  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  // Backbone events have 3 arguments).
  var triggerEvents = function(events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;
    }
  };

  var listenMethods = {listenTo: 'on', listenToOnce: 'once'};

  // Inversion-of-control versions of `on` and `once`. Tell *this* object to
  // listen to an event in another object ... keeping track of what it's
  // listening to.
  _.each(listenMethods, function(implementation, method) {
    Events[method] = function(obj, name, callback) {
      var listeningTo = this._listeningTo || (this._listeningTo = {});
      var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
      listeningTo[id] = obj;
      if (!callback && typeof name === 'object') callback = this;
      obj[implementation](name, callback, this);
      return this;
    };
  });

  // Aliases for backwards compatibility.
  Events.bind   = Events.on;
  Events.unbind = Events.off;

  // Allow the `Backbone` object to serve as a global event bus, for folks who
  // want global "pubsub" in a convenient place.
  _.extend(Backbone, Events);

  // Backbone.Model
  // --------------

  // Backbone **Models** are the basic data object in the framework --
  // frequently representing a row in a table in a database on your server.
  // A discrete chunk of data and a bunch of useful, related methods for
  // performing computations and transformations on that data.

  // Create a new model with the specified attributes. A client id (`cid`)
  // is automatically generated and assigned for you.
  var Model = Backbone.Model = function(attributes, options) {
    var attrs = attributes || {};
    options || (options = {});
    this.cid = _.uniqueId('c');
    this.attributes = {};
    if (options.collection) this.collection = options.collection;
    if (options.parse) attrs = this.parse(attrs, options) || {};
    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));
    this.set(attrs, options);
    this.changed = {};
    this.initialize.apply(this, arguments);
  };

  // Attach all inheritable methods to the Model prototype.
  _.extend(Model.prototype, Events, {

    // A hash of attributes whose current and previous value differ.
    changed: null,

    // The value returned during the last failed validation.
    validationError: null,

    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Return a copy of the model's `attributes` object.
    toJSON: function(options) {
      return _.clone(this.attributes);
    },

    // Proxy `Backbone.sync` by default -- but override this if you need
    // custom syncing semantics for *this* particular model.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Get the value of an attribute.
    get: function(attr) {
      return this.attributes[attr];
    },

    // Get the HTML-escaped value of an attribute.
    escape: function(attr) {
      return _.escape(this.get(attr));
    },

    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function(attr) {
      return this.get(attr) != null;
    },

    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
    set: function(key, val, options) {
      var attr, attrs, unset, changes, silent, changing, prev, current;
      if (key == null) return this;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options || (options = {});

      // Run validation.
      if (!this._validate(attrs, options)) return false;

      // Extract attributes and options.
      unset           = options.unset;
      silent          = options.silent;
      changes         = [];
      changing        = this._changing;
      this._changing  = true;

      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }
      current = this.attributes, prev = this._previousAttributes;

      // Check for changes of `id`.
      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];

      // For each `set` attribute, update or delete the current value.
      for (attr in attrs) {
        val = attrs[attr];
        if (!_.isEqual(current[attr], val)) changes.push(attr);
        if (!_.isEqual(prev[attr], val)) {
          this.changed[attr] = val;
        } else {
          delete this.changed[attr];
        }
        unset ? delete current[attr] : current[attr] = val;
      }

      // Trigger all relevant attribute changes.
      if (!silent) {
        if (changes.length) this._pending = options;
        for (var i = 0, l = changes.length; i < l; i++) {
          this.trigger('change:' + changes[i], this, current[changes[i]], options);
        }
      }

      // You might be wondering why there's a `while` loop here. Changes can
      // be recursively nested within `"change"` events.
      if (changing) return this;
      if (!silent) {
        while (this._pending) {
          options = this._pending;
          this._pending = false;
          this.trigger('change', this, options);
        }
      }
      this._pending = false;
      this._changing = false;
      return this;
    },

    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
    unset: function(attr, options) {
      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
    },

    // Clear all attributes on the model, firing `"change"`.
    clear: function(options) {
      var attrs = {};
      for (var key in this.attributes) attrs[key] = void 0;
      return this.set(attrs, _.extend({}, options, {unset: true}));
    },

    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function(attr) {
      if (attr == null) return !_.isEmpty(this.changed);
      return _.has(this.changed, attr);
    },

    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function(diff) {
      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
      var val, changed = false;
      var old = this._changing ? this._previousAttributes : this.attributes;
      for (var attr in diff) {
        if (_.isEqual(old[attr], (val = diff[attr]))) continue;
        (changed || (changed = {}))[attr] = val;
      }
      return changed;
    },

    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function(attr) {
      if (attr == null || !this._previousAttributes) return null;
      return this._previousAttributes[attr];
    },

    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function() {
      return _.clone(this._previousAttributes);
    },

    // Fetch the model from the server. If the server's representation of the
    // model differs from its current attributes, they will be overridden,
    // triggering a `"change"` event.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        if (!model.set(model.parse(resp, options), options)) return false;
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
    save: function(key, val, options) {
      var attrs, method, xhr, attributes = this.attributes;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (key == null || typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options = _.extend({validate: true}, options);

      // If we're not waiting and attributes exist, save acts as
      // `set(attr).save(null, opts)` with validation. Otherwise, check if
      // the model will be valid when the attributes, if any, are set.
      if (attrs && !options.wait) {
        if (!this.set(attrs, options)) return false;
      } else {
        if (!this._validate(attrs, options)) return false;
      }

      // Set temporary attributes if `{wait: true}`.
      if (attrs && options.wait) {
        this.attributes = _.extend({}, attributes, attrs);
      }

      // After a successful server-side save, the client is (optionally)
      // updated with the server-side state.
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        // Ensure attributes are restored during synchronous saves.
        model.attributes = attributes;
        var serverAttrs = model.parse(resp, options);
        if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
        if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {
          return false;
        }
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);

      method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
      if (method === 'patch') options.attrs = attrs;
      xhr = this.sync(method, this, options);

      // Restore attributes.
      if (attrs && options.wait) this.attributes = attributes;

      return xhr;
    },

    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
    destroy: function(options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;

      var destroy = function() {
        model.trigger('destroy', model, model.collection, options);
      };

      options.success = function(resp) {
        if (options.wait || model.isNew()) destroy();
        if (success) success(model, resp, options);
        if (!model.isNew()) model.trigger('sync', model, resp, options);
      };

      if (this.isNew()) {
        options.success();
        return false;
      }
      wrapError(this, options);

      var xhr = this.sync('delete', this, options);
      if (!options.wait) destroy();
      return xhr;
    },

    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
    url: function() {
      var base =
        _.result(this, 'urlRoot') ||
        _.result(this.collection, 'url') ||
        urlError();
      if (this.isNew()) return base;
      return base.replace(/([^\/])$/, '$1/') + encodeURIComponent(this.id);
    },

    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new model with identical attributes to this one.
    clone: function() {
      return new this.constructor(this.attributes);
    },

    // A model is new if it has never been saved to the server, and lacks an id.
    isNew: function() {
      return !this.has(this.idAttribute);
    },

    // Check if the model is currently in a valid state.
    isValid: function(options) {
      return this._validate({}, _.extend(options || {}, { validate: true }));
    },

    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
    _validate: function(attrs, options) {
      if (!options.validate || !this.validate) return true;
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validationError = this.validate(attrs, options) || null;
      if (!error) return true;
      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));
      return false;
    }

  });

  // Underscore methods that we want to implement on the Model.
  var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];

  // Mix in each Underscore method as a proxy to `Model#attributes`.
  _.each(modelMethods, function(method) {
    Model.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.attributes);
      return _[method].apply(_, args);
    };
  });

  // Backbone.Collection
  // -------------------

  // If models tend to represent a single row of data, a Backbone Collection is
  // more analagous to a table full of data ... or a small slice or page of that
  // table, or a collection of rows that belong together for a particular reason
  // -- all of the messages in this particular folder, all of the documents
  // belonging to this particular author, and so on. Collections maintain
  // indexes of their models, both in order, and for lookup by `id`.

  // Create a new **Collection**, perhaps to contain a specific type of `model`.
  // If a `comparator` is specified, the Collection will maintain
  // its models in sort order, as they're added and removed.
  var Collection = Backbone.Collection = function(models, options) {
    options || (options = {});
    if (options.model) this.model = options.model;
    if (options.comparator !== void 0) this.comparator = options.comparator;
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) this.reset(models, _.extend({silent: true}, options));
  };

  // Default options for `Collection#set`.
  var setOptions = {add: true, remove: true, merge: true};
  var addOptions = {add: true, remove: false};

  // Define the Collection's inheritable methods.
  _.extend(Collection.prototype, Events, {

    // The default model for a collection is just a **Backbone.Model**.
    // This should be overridden in most cases.
    model: Model,

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function(options) {
      return this.map(function(model){ return model.toJSON(options); });
    },

    // Proxy `Backbone.sync` by default.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Add a model, or list of models to the set.
    add: function(models, options) {
      return this.set(models, _.extend({merge: false}, options, addOptions));
    },

    // Remove a model, or a list of models from the set.
    remove: function(models, options) {
      var singular = !_.isArray(models);
      models = singular ? [models] : _.clone(models);
      options || (options = {});
      var i, l, index, model;
      for (i = 0, l = models.length; i < l; i++) {
        model = models[i] = this.get(models[i]);
        if (!model) continue;
        delete this._byId[model.id];
        delete this._byId[model.cid];
        index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;
        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }
        this._removeReference(model, options);
      }
      return singular ? models[0] : models;
    },

    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
    set: function(models, options) {
      options = _.defaults({}, options, setOptions);
      if (options.parse) models = this.parse(models, options);
      var singular = !_.isArray(models);
      models = singular ? (models ? [models] : []) : _.clone(models);
      var i, l, id, model, attrs, existing, sort;
      var at = options.at;
      var targetModel = this.model;
      var sortable = this.comparator && (at == null) && options.sort !== false;
      var sortAttr = _.isString(this.comparator) ? this.comparator : null;
      var toAdd = [], toRemove = [], modelMap = {};
      var add = options.add, merge = options.merge, remove = options.remove;
      var order = !sortable && add && remove ? [] : false;

      // Turn bare objects into model references, and prevent invalid models
      // from being added.
      for (i = 0, l = models.length; i < l; i++) {
        attrs = models[i] || {};
        if (attrs instanceof Model) {
          id = model = attrs;
        } else {
          id = attrs[targetModel.prototype.idAttribute || 'id'];
        }

        // If a duplicate is found, prevent it from being added and
        // optionally merge it into the existing model.
        if (existing = this.get(id)) {
          if (remove) modelMap[existing.cid] = true;
          if (merge) {
            attrs = attrs === model ? model.attributes : attrs;
            if (options.parse) attrs = existing.parse(attrs, options);
            existing.set(attrs, options);
            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
          }
          models[i] = existing;

        // If this is a new, valid model, push it to the `toAdd` list.
        } else if (add) {
          model = models[i] = this._prepareModel(attrs, options);
          if (!model) continue;
          toAdd.push(model);
          this._addReference(model, options);
        }

        // Do not add multiple models with the same `id`.
        model = existing || model;
        if (order && (model.isNew() || !modelMap[model.id])) order.push(model);
        modelMap[model.id] = true;
      }

      // Remove nonexistent models if appropriate.
      if (remove) {
        for (i = 0, l = this.length; i < l; ++i) {
          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
        }
        if (toRemove.length) this.remove(toRemove, options);
      }

      // See if sorting is needed, update `length` and splice in new models.
      if (toAdd.length || (order && order.length)) {
        if (sortable) sort = true;
        this.length += toAdd.length;
        if (at != null) {
          for (i = 0, l = toAdd.length; i < l; i++) {
            this.models.splice(at + i, 0, toAdd[i]);
          }
        } else {
          if (order) this.models.length = 0;
          var orderedModels = order || toAdd;
          for (i = 0, l = orderedModels.length; i < l; i++) {
            this.models.push(orderedModels[i]);
          }
        }
      }

      // Silently sort the collection if appropriate.
      if (sort) this.sort({silent: true});

      // Unless silenced, it's time to fire all appropriate add/sort events.
      if (!options.silent) {
        for (i = 0, l = toAdd.length; i < l; i++) {
          (model = toAdd[i]).trigger('add', model, this, options);
        }
        if (sort || (order && order.length)) this.trigger('sort', this, options);
      }

      // Return the added (or merged) model (or models).
      return singular ? models[0] : models;
    },

    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
    reset: function(models, options) {
      options || (options = {});
      for (var i = 0, l = this.models.length; i < l; i++) {
        this._removeReference(this.models[i], options);
      }
      options.previousModels = this.models;
      this._reset();
      models = this.add(models, _.extend({silent: true}, options));
      if (!options.silent) this.trigger('reset', this, options);
      return models;
    },

    // Add a model to the end of the collection.
    push: function(model, options) {
      return this.add(model, _.extend({at: this.length}, options));
    },

    // Remove a model from the end of the collection.
    pop: function(options) {
      var model = this.at(this.length - 1);
      this.remove(model, options);
      return model;
    },

    // Add a model to the beginning of the collection.
    unshift: function(model, options) {
      return this.add(model, _.extend({at: 0}, options));
    },

    // Remove a model from the beginning of the collection.
    shift: function(options) {
      var model = this.at(0);
      this.remove(model, options);
      return model;
    },

    // Slice out a sub-array of models from the collection.
    slice: function() {
      return slice.apply(this.models, arguments);
    },

    // Get a model from the set by id.
    get: function(obj) {
      if (obj == null) return void 0;
      return this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid];
    },

    // Get the model at the given index.
    at: function(index) {
      return this.models[index];
    },

    // Return models with matching attributes. Useful for simple cases of
    // `filter`.
    where: function(attrs, first) {
      if (_.isEmpty(attrs)) return first ? void 0 : [];
      return this[first ? 'find' : 'filter'](function(model) {
        for (var key in attrs) {
          if (attrs[key] !== model.get(key)) return false;
        }
        return true;
      });
    },

    // Return the first model with matching attributes. Useful for simple cases
    // of `find`.
    findWhere: function(attrs) {
      return this.where(attrs, true);
    },

    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function(options) {
      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');
      options || (options = {});

      // Run sort based on type of `comparator`.
      if (_.isString(this.comparator) || this.comparator.length === 1) {
        this.models = this.sortBy(this.comparator, this);
      } else {
        this.models.sort(_.bind(this.comparator, this));
      }

      if (!options.silent) this.trigger('sort', this, options);
      return this;
    },

    // Pluck an attribute from each model in the collection.
    pluck: function(attr) {
      return _.invoke(this.models, 'get', attr);
    },

    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `reset: true` is passed, the response
    // data will be passed through the `reset` method instead of `set`.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var success = options.success;
      var collection = this;
      options.success = function(resp) {
        var method = options.reset ? 'reset' : 'set';
        collection[method](resp, options);
        if (success) success(collection, resp, options);
        collection.trigger('sync', collection, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
    create: function(model, options) {
      options = options ? _.clone(options) : {};
      if (!(model = this._prepareModel(model, options))) return false;
      if (!options.wait) this.add(model, options);
      var collection = this;
      var success = options.success;
      options.success = function(model, resp) {
        if (options.wait) collection.add(model, options);
        if (success) success(model, resp, options);
      };
      model.save(null, options);
      return model;
    },

    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new collection with an identical list of models as this one.
    clone: function() {
      return new this.constructor(this.models);
    },

    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
    _reset: function() {
      this.length = 0;
      this.models = [];
      this._byId  = {};
    },

    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
    _prepareModel: function(attrs, options) {
      if (attrs instanceof Model) return attrs;
      options = options ? _.clone(options) : {};
      options.collection = this;
      var model = new this.model(attrs, options);
      if (!model.validationError) return model;
      this.trigger('invalid', this, model.validationError, options);
      return false;
    },

    // Internal method to create a model's ties to a collection.
    _addReference: function(model, options) {
      this._byId[model.cid] = model;
      if (model.id != null) this._byId[model.id] = model;
      if (!model.collection) model.collection = this;
      model.on('all', this._onModelEvent, this);
    },

    // Internal method to sever a model's ties to a collection.
    _removeReference: function(model, options) {
      if (this === model.collection) delete model.collection;
      model.off('all', this._onModelEvent, this);
    },

    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function(event, model, collection, options) {
      if ((event === 'add' || event === 'remove') && collection !== this) return;
      if (event === 'destroy') this.remove(model, options);
      if (model && event === 'change:' + model.idAttribute) {
        delete this._byId[model.previous(model.idAttribute)];
        if (model.id != null) this._byId[model.id] = model;
      }
      this.trigger.apply(this, arguments);
    }

  });

  // Underscore methods that we want to implement on the Collection.
  // 90% of the core usefulness of Backbone Collections is actually implemented
  // right here:
  var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',
    'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',
    'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',
    'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',
    'tail', 'drop', 'last', 'without', 'difference', 'indexOf', 'shuffle',
    'lastIndexOf', 'isEmpty', 'chain', 'sample'];

  // Mix in each Underscore method as a proxy to `Collection#models`.
  _.each(methods, function(method) {
    Collection.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.models);
      return _[method].apply(_, args);
    };
  });

  // Underscore methods that take a property name as an argument.
  var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];

  // Use attributes instead of properties.
  _.each(attributeMethods, function(method) {
    Collection.prototype[method] = function(value, context) {
      var iterator = _.isFunction(value) ? value : function(model) {
        return model.get(value);
      };
      return _[method](this.models, iterator, context);
    };
  });

  // Backbone.View
  // -------------

  // Backbone Views are almost more convention than they are actual code. A View
  // is simply a JavaScript object that represents a logical chunk of UI in the
  // DOM. This might be a single item, an entire list, a sidebar or panel, or
  // even the surrounding frame which wraps your whole app. Defining a chunk of
  // UI as a **View** allows you to define your DOM events declaratively, without
  // having to worry about render order ... and makes it easy for the view to
  // react to specific changes in the state of your models.

  // Creating a Backbone.View creates its initial element outside of the DOM,
  // if an existing element is not provided...
  var View = Backbone.View = function(options) {
    this.cid = _.uniqueId('view');
    options || (options = {});
    _.extend(this, _.pick(options, viewOptions));
    this._ensureElement();
    this.initialize.apply(this, arguments);
    this.delegateEvents();
  };

  // Cached regex to split keys for `delegate`.
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

  // List of view options to be merged as properties.
  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

  // Set up all inheritable **Backbone.View** properties and methods.
  _.extend(View.prototype, Events, {

    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',

    // jQuery delegate for element lookup, scoped to DOM elements within the
    // current view. This should be preferred to global lookups where possible.
    $: function(selector) {
      return this.$el.find(selector);
    },

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function() {
      return this;
    },

    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Backbone.Events listeners.
    remove: function() {
      this.$el.remove();
      this.stopListening();
      return this;
    },

    // Change the view's element (`this.el` property), including event
    // re-delegation.
    setElement: function(element, delegate) {
      if (this.$el) this.undelegateEvents();
      this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);
      this.el = this.$el[0];
      if (delegate !== false) this.delegateEvents();
      return this;
    },

    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save',
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    // This only works for delegate-able events: not `focus`, `blur`, and
    // not `change`, `submit`, and `reset` in Internet Explorer.
    delegateEvents: function(events) {
      if (!(events || (events = _.result(this, 'events')))) return this;
      this.undelegateEvents();
      for (var key in events) {
        var method = events[key];
        if (!_.isFunction(method)) method = this[events[key]];
        if (!method) continue;

        var match = key.match(delegateEventSplitter);
        var eventName = match[1], selector = match[2];
        method = _.bind(method, this);
        eventName += '.delegateEvents' + this.cid;
        if (selector === '') {
          this.$el.on(eventName, method);
        } else {
          this.$el.on(eventName, selector, method);
        }
      }
      return this;
    },

    // Clears all callbacks previously bound to the view with `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
    undelegateEvents: function() {
      this.$el.off('.delegateEvents' + this.cid);
      return this;
    },

    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function() {
      if (!this.el) {
        var attrs = _.extend({}, _.result(this, 'attributes'));
        if (this.id) attrs.id = _.result(this, 'id');
        if (this.className) attrs['class'] = _.result(this, 'className');
        var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);
        this.setElement($el, false);
      } else {
        this.setElement(_.result(this, 'el'), false);
      }
    }

  });

  // Backbone.sync
  // -------------

  // Override this function to change the manner in which Backbone persists
  // models to the server. You will be passed the type of request, and the
  // model in question. By default, makes a RESTful Ajax request
  // to the model's `url()`. Some possible customizations could be:
  //
  // * Use `setTimeout` to batch rapid-fire updates into a single request.
  // * Send up the models as XML instead of JSON.
  // * Persist models via WebSockets instead of Ajax.
  //
  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
  // as `POST`, with a `_method` parameter containing the true HTTP method,
  // as well as all requests with the body as `application/x-www-form-urlencoded`
  // instead of `application/json` with the model in a param named `model`.
  // Useful when interfacing with server-side languages like **PHP** that make
  // it difficult to read the body of `PUT` requests.
  Backbone.sync = function(method, model, options) {
    var type = methodMap[method];

    // Default options, unless specified.
    _.defaults(options || (options = {}), {
      emulateHTTP: Backbone.emulateHTTP,
      emulateJSON: Backbone.emulateJSON
    });

    // Default JSON-request options.
    var params = {type: type, dataType: 'json'};

    // Ensure that we have a URL.
    if (!options.url) {
      params.url = _.result(model, 'url') || urlError();
    }

    // Ensure that we have the appropriate request data.
    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
      params.contentType = 'application/json';
      params.data = JSON.stringify(options.attrs || model.toJSON(options));
    }

    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (options.emulateJSON) {
      params.contentType = 'application/x-www-form-urlencoded';
      params.data = params.data ? {model: params.data} : {};
    }

    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
      params.type = 'POST';
      if (options.emulateJSON) params.data._method = type;
      var beforeSend = options.beforeSend;
      options.beforeSend = function(xhr) {
        xhr.setRequestHeader('X-HTTP-Method-Override', type);
        if (beforeSend) return beforeSend.apply(this, arguments);
      };
    }

    // Don't process data on a non-GET request.
    if (params.type !== 'GET' && !options.emulateJSON) {
      params.processData = false;
    }

    // If we're sending a `PATCH` request, and we're in an old Internet Explorer
    // that still has ActiveX enabled by default, override jQuery to use that
    // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.
    if (params.type === 'PATCH' && noXhrPatch) {
      params.xhr = function() {
        return new ActiveXObject("Microsoft.XMLHTTP");
      };
    }

    // Make the request, allowing the user to override any Ajax options.
    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
    model.trigger('request', model, xhr, options);
    return xhr;
  };

  var noXhrPatch =
    typeof window !== 'undefined' && !!window.ActiveXObject &&
      !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);

  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
  var methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'patch':  'PATCH',
    'delete': 'DELETE',
    'read':   'GET'
  };

  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
  // Override this if you'd like to use a different library.
  Backbone.ajax = function() {
    return Backbone.$.ajax.apply(Backbone.$, arguments);
  };

  // Backbone.Router
  // ---------------

  // Routers map faux-URLs to actions, and fire events when routes are
  // matched. Creating a new one sets its `routes` hash, if not set statically.
  var Router = Backbone.Router = function(options) {
    options || (options = {});
    if (options.routes) this.routes = options.routes;
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };

  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var optionalParam = /\((.*?)\)/g;
  var namedParam    = /(\(\?)?:\w+/g;
  var splatParam    = /\*\w+/g;
  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  // Set up all inheritable **Backbone.Router** properties and methods.
  _.extend(Router.prototype, Events, {

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Manually bind a single named route to a callback. For example:
    //
    //     this.route('search/:query/p:num', 'search', function(query, num) {
    //       ...
    //     });
    //
    route: function(route, name, callback) {
      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
      if (_.isFunction(name)) {
        callback = name;
        name = '';
      }
      if (!callback) callback = this[name];
      var router = this;
      Backbone.history.route(route, function(fragment) {
        var args = router._extractParameters(route, fragment);
        router.execute(callback, args);
        router.trigger.apply(router, ['route:' + name].concat(args));
        router.trigger('route', name, args);
        Backbone.history.trigger('route', router, name, args);
      });
      return this;
    },

    // Execute a route handler with the provided parameters.  This is an
    // excellent place to do pre-route setup or post-route cleanup.
    execute: function(callback, args) {
      if (callback) callback.apply(this, args);
    },

    // Simple proxy to `Backbone.history` to save a fragment into the history.
    navigate: function(fragment, options) {
      Backbone.history.navigate(fragment, options);
      return this;
    },

    // Bind all defined routes to `Backbone.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function() {
      if (!this.routes) return;
      this.routes = _.result(this, 'routes');
      var route, routes = _.keys(this.routes);
      while ((route = routes.pop()) != null) {
        this.route(route, this.routes[route]);
      }
    },

    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function(route) {
      route = route.replace(escapeRegExp, '\\$&')
                   .replace(optionalParam, '(?:$1)?')
                   .replace(namedParam, function(match, optional) {
                     return optional ? match : '([^/?]+)';
                   })
                   .replace(splatParam, '([^?]*?)');
      return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
    },

    // Given a route, and a URL fragment that it matches, return the array of
    // extracted decoded parameters. Empty or unmatched parameters will be
    // treated as `null` to normalize cross-browser behavior.
    _extractParameters: function(route, fragment) {
      var params = route.exec(fragment).slice(1);
      return _.map(params, function(param, i) {
        // Don't decode the search params.
        if (i === params.length - 1) return param || null;
        return param ? decodeURIComponent(param) : null;
      });
    }

  });

  // Backbone.History
  // ----------------

  // Handles cross-browser history management, based on either
  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
  // and URL fragments. If the browser supports neither (old IE, natch),
  // falls back to polling.
  var History = Backbone.History = function() {
    this.handlers = [];
    _.bindAll(this, 'checkUrl');

    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
      this.location = window.location;
      this.history = window.history;
    }
  };

  // Cached regex for stripping a leading hash/slash and trailing space.
  var routeStripper = /^[#\/]|\s+$/g;

  // Cached regex for stripping leading and trailing slashes.
  var rootStripper = /^\/+|\/+$/g;

  // Cached regex for detecting MSIE.
  var isExplorer = /msie [\w.]+/;

  // Cached regex for removing a trailing slash.
  var trailingSlash = /\/$/;

  // Cached regex for stripping urls of hash.
  var pathStripper = /#.*$/;

  // Has the history handling already been started?
  History.started = false;

  // Set up all inheritable **Backbone.History** properties and methods.
  _.extend(History.prototype, Events, {

    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,

    // Are we at the app root?
    atRoot: function() {
      return this.location.pathname.replace(/[^\/]$/, '$&/') === this.root;
    },

    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function(window) {
      var match = (window || this).location.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },

    // Get the cross-browser normalized URL fragment, either from the URL,
    // the hash, or the override.
    getFragment: function(fragment, forcePushState) {
      if (fragment == null) {
        if (this._hasPushState || !this._wantsHashChange || forcePushState) {
          fragment = decodeURI(this.location.pathname + this.location.search);
          var root = this.root.replace(trailingSlash, '');
          if (!fragment.indexOf(root)) fragment = fragment.slice(root.length);
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(routeStripper, '');
    },

    // Start the hash change handling, returning `true` if the current URL matches
    // an existing route, and `false` otherwise.
    start: function(options) {
      if (History.started) throw new Error("Backbone.history has already been started");
      History.started = true;

      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options          = _.extend({root: '/'}, this.options, options);
      this.root             = this.options.root;
      this._wantsHashChange = this.options.hashChange !== false;
      this._wantsPushState  = !!this.options.pushState;
      this._hasPushState    = !!(this.options.pushState && this.history && this.history.pushState);
      var fragment          = this.getFragment();
      var docMode           = document.documentMode;
      var oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));

      // Normalize root to always include a leading and trailing slash.
      this.root = ('/' + this.root + '/').replace(rootStripper, '/');

      if (oldIE && this._wantsHashChange) {
        var frame = Backbone.$('<iframe src="javascript:0" tabindex="-1">');
        this.iframe = frame.hide().appendTo('body')[0].contentWindow;
        this.navigate(fragment);
      }

      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._hasPushState) {
        Backbone.$(window).on('popstate', this.checkUrl);
      } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {
        Backbone.$(window).on('hashchange', this.checkUrl);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }

      // Determine if we need to change the base url, for a pushState link
      // opened by a non-pushState browser.
      this.fragment = fragment;
      var loc = this.location;

      // Transition from hashChange to pushState or vice versa if both are
      // requested.
      if (this._wantsHashChange && this._wantsPushState) {

        // If we've started off with a route from a `pushState`-enabled
        // browser, but we're currently in a browser that doesn't support it...
        if (!this._hasPushState && !this.atRoot()) {
          this.fragment = this.getFragment(null, true);
          this.location.replace(this.root + '#' + this.fragment);
          // Return immediately as browser will do redirect to new url
          return true;

        // Or if we've started out with a hash-based route, but we're currently
        // in a browser where it could be `pushState`-based instead...
        } else if (this._hasPushState && this.atRoot() && loc.hash) {
          this.fragment = this.getHash().replace(routeStripper, '');
          this.history.replaceState({}, document.title, this.root + this.fragment);
        }

      }

      if (!this.options.silent) return this.loadUrl();
    },

    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function() {
      Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);
      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
      History.started = false;
    },

    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function(route, callback) {
      this.handlers.unshift({route: route, callback: callback});
    },

    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function(e) {
      var current = this.getFragment();
      if (current === this.fragment && this.iframe) {
        current = this.getFragment(this.getHash(this.iframe));
      }
      if (current === this.fragment) return false;
      if (this.iframe) this.navigate(current);
      this.loadUrl();
    },

    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function(fragment) {
      fragment = this.fragment = this.getFragment(fragment);
      return _.any(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
    },

    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the history.
    navigate: function(fragment, options) {
      if (!History.started) return false;
      if (!options || options === true) options = {trigger: !!options};

      var url = this.root + (fragment = this.getFragment(fragment || ''));

      // Strip the hash for matching.
      fragment = fragment.replace(pathStripper, '');

      if (this.fragment === fragment) return;
      this.fragment = fragment;

      // Don't include a trailing slash on the root.
      if (fragment === '' && url !== '/') url = url.slice(0, -1);

      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._hasPushState) {
        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

      // If hash changes haven't been explicitly disabled, update the hash
      // fragment to store history.
      } else if (this._wantsHashChange) {
        this._updateHash(this.location, fragment, options.replace);
        if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {
          // Opening and closing the iframe tricks IE7 and earlier to push a
          // history entry on hash-tag change.  When replace is true, we don't
          // want this.
          if(!options.replace) this.iframe.document.open().close();
          this._updateHash(this.iframe.location, fragment, options.replace);
        }

      // If you've told us that you explicitly don't want fallback hashchange-
      // based history, then `navigate` becomes a page refresh.
      } else {
        return this.location.assign(url);
      }
      if (options.trigger) return this.loadUrl(fragment);
    },

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function(location, fragment, replace) {
      if (replace) {
        var href = location.href.replace(/(javascript:|#).*$/, '');
        location.replace(href + '#' + fragment);
      } else {
        // Some browsers require that `hash` contains a leading #.
        location.hash = '#' + fragment;
      }
    }

  });

  // Create the default Backbone.history.
  Backbone.history = new History;

  // Helpers
  // -------

  // Helper function to correctly set up the prototype chain, for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var extend = function(protoProps, staticProps) {
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function(){ return parent.apply(this, arguments); };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    var Surrogate = function(){ this.constructor = child; };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate;

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) _.extend(child.prototype, protoProps);

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Set up inheritance for the model, collection, router, view and history.
  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;

  // Throw an error when a URL is needed, and none is supplied.
  var urlError = function() {
    throw new Error('A "url" property or function must be specified');
  };

  // Wrap an optional error callback with a fallback error event.
  var wrapError = function(model, options) {
    var error = options.error;
    options.error = function(resp) {
      if (error) error(model, resp, options);
      model.trigger('error', model, resp, options);
    };
  };

  return Backbone;

}));


/***/ }),

/***/ 214:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/jquery/dist/jquery.js-exposed
var jquery_js_exposed = __webpack_require__(0);
var jquery_js_exposed_default = /*#__PURE__*/__webpack_require__.n(jquery_js_exposed);

// EXTERNAL MODULE: ./node_modules/underscore/modules/index-all.js + 159 modules
var index_all = __webpack_require__(1);

// EXTERNAL MODULE: ./node_modules/mockup/src/core/i18n-wrapper.js
var i18n_wrapper = __webpack_require__(3);

// EXTERNAL MODULE: ./node_modules/patternslib/src/core/base.js + 1 modules
var base = __webpack_require__(5);

// EXTERNAL MODULE: ./node_modules/mockup/src/core/utils.js
var utils = __webpack_require__(8);

// EXTERNAL MODULE: ./node_modules/mockup/src/pat/relateditems/relateditems.js + 6 modules
var relateditems = __webpack_require__(135);

// EXTERNAL MODULE: ./node_modules/dropzone/dist/dropzone.js
var dropzone = __webpack_require__(47);
var dropzone_default = /*#__PURE__*/__webpack_require__.n(dropzone);

// CONCATENATED MODULE: ./node_modules/mockup/src/pat/upload/templates/upload.xml
/* harmony default export */ var upload = ("<div class=\"upload-container upload-multiple\">\n    <h2 class=\"title\"><%- _t(\"Upload here\") %></h2>\n    <p class=\"help\">\n        <%- _t('Drag and drop files from your computer onto the area below or click the Browse button.') %>\n    </p>\n    <div class=\"upload-area\">\n        <div class=\"fallback\">\n            <input name=\"file\" type=\"file\" multiple />\n        </div>\n        <div class=\"dz-message\"><p><%-_t(\"Drop files here...\")%></p></div>\n        <div class=\"row browse-select\">\n            <div class=\"col-md-9\">\n                <input\n                    id=\"fakeUploadFile\"\n                    placeholder=\"<%- _t(\"Choose File\") %>\"\n                    disabled\n                    />\n            </div>\n            <div class=\"col-md-3\">\n                <button\n                    type=\"button\"\n                    class=\"btn btn-primary browse\">\n                    <%- _t(\"Browse\") %>\n                </button>\n            </div>\n        </div>\n        <div class=\"upload-queue\">\n            <div class=\"previews\">\n            </div>\n            <div class=\"controls\">\n                <% if (allowPathSelection) { %>\n                <div class=\"path\">\n                    <label><%- _t(\"Upload to...\") %></label>\n                    <p class=\"form-help\">\n                        <%- _t(\"Select another destination folder or leave blank to add files to the current location.\") %>\n                    </p>\n                    <input\n                        type=\"text\"\n                        name=\"location\"\n                        />\n                </div>\n                <% } %>\n                <div class=\"actions row\">\n                    <div class=\"col-md-9\">\n                        <div class=\"progress progress-striped active\">\n                            <div class=\"progress-bar progress-bar-success\"\n                                 role=\"progressbar\"\n                                 aria-valuenow=\"0\"\n                                 aria-valuemin=\"0\"\n                                 aria-valuemax=\"100\"\n                                 style=\"width: 0%\">\n                                <span class=\"sr-only\">40% Complete (success)</span>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-md-3 align-right\">\n                        <button\n                            type=\"button\"\n                            class=\"btn btn-primary upload-all\">\n                            <%- _t(\"Upload\") %>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n");
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/upload/templates/preview.xml
/* harmony default export */ var preview = ("<div class=\"row item form-inline\">\n    <div class=\"col-xs-2 action\">\n        <button\n            type=\"button\"\n            class=\"btn btn-danger btn-xs remove-item\"\n            data-dz-remove=\"\"\n            href=\"javascript:undefined;\">\n            <span class=\"glyphicon glyphicon-remove\"></span>\n        </button>\n    </div>\n    <div class=\"col-xs-7 title\">\n        <div class=\"dz-preview\">\n          <div class=\"dz-details\">\n            <div class=\"dz-filename\"><span data-dz-name></span></div>\n          </div>\n          <div class=\"dz-error-message\"><span data-dz-errormessage></span></div>\n        </div>\n        <div class=\"dz-progress\">\n            <span class=\"dz-upload\" data-dz-uploadprogress></span>\n        </div>\n    </div>\n    <div class=\"col-xs-3 info\">\n        <div class=\"dz-size\" data-dz-size></div>\n        <img data-dz-thumbnail />\n    </div>\n</div>\n");
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/upload/upload.js









/* we do not want this plugin to auto discover */

dropzone_default.a.autoDiscover = false;
/* harmony default export */ var upload_upload = __webpack_exports__["a"] = (base["a" /* default */].extend({
  name: "upload",
  trigger: ".pat-upload",
  parser: "mockup",
  defaults: {
    showTitle: true,
    url: null,
    // XXX MUST provide url to submit to OR be in a form
    className: "upload",
    wrap: false,
    wrapperTemplate: '<div class="upload-wrapper"/>',
    fileaddedClassName: "dropping",
    useTus: false,
    container: "",
    ajaxUpload: true,
    paramName: "file",
    addRemoveLinks: false,
    autoCleanResults: true,
    previewsContainer: ".previews",
    previewTemplate: null,
    maxFiles: null,
    maxFilesize: 99999999,
    // let's not have a max by default...
    allowPathSelection: undefined,
    relatedItems: {
      // UID attribute is required here since we're working with related items
      attributes: ["UID", "Title", "Description", "getURL", "portal_type", "path", "ModificationDate"],
      batchSize: 20,
      basePath: "/",
      vocabularyUrl: null,
      width: 500,
      maximumSelectionSize: 1,
      selectableTypes: ["Folder"]
    }
  },
  init: function init() {
    var self = this,
        template = upload;

    if (typeof self.options.allowPathSelection === "undefined") {
      // Set allowPathSelection to true, if we can use path based urls.
      self.options.allowPathSelection = self.options.baseUrl && self.options.relativePath;
    } // TODO: find a way to make this work in firefox (and IE)


    jquery_js_exposed_default()(document).bind("paste", function (e) {
      var oe = e.originalEvent;
      var items = oe.clipboardData.items;

      if (items) {
        for (var i = 0; i < items.length; i++) {
          if (items[i].type.indexOf("image") !== -1) {
            var blob = items[i].getAsFile();
            self.dropzone.addFile(blob);
          }
        }
      }
    }); // values that will change current processing

    self.currentPath = self.options.currentPath;
    self.currentFile = 0;
    template = index_all["default"].template(template)({
      _t: i18n_wrapper["a" /* default */],
      allowPathSelection: self.options.allowPathSelection
    });
    self.$el.addClass(self.options.className);
    self.$el.append(template);
    self.$progress = jquery_js_exposed_default()(".progress-bar-success", self.$el);

    if (!self.options.showTitle) {
      self.$el.find("h2.title").hide();
    }

    if (!self.options.ajaxUpload) {
      // no ajax upload, drop the fallback
      jquery_js_exposed_default()(".fallback", this.$el).remove();

      if (this.$el.hasClass(".upload-container")) {
        this.$el.addClass("no-ajax-upload");
      } else {
        this.$el.closest(".upload-container").addClass("no-ajax-upload");
      }
    }

    if (self.options.wrap) {
      self.$el.wrap(self.options.wrapperTemplate);
      self.$el = self.$el.parent();
    }

    if (self.options.allowPathSelection) {
      // only use related items if we can generate path based urls and if it's not turned off.
      self.$pathInput = jquery_js_exposed_default()('input[name="location"]', self.$el);
      self.relatedItems = self.setupRelatedItems(self.$pathInput);
    } else {
      jquery_js_exposed_default()('input[name="location"]', self.$el).parent().remove();
      self.relatedItems = null;
    }

    self.$dropzone = jquery_js_exposed_default()(".upload-area", self.$el);
    jquery_js_exposed_default()("div.browse-select button.browse", self.$el).click(function (e) {
      e.preventDefault();
      e.stopPropagation();

      if (!self.options.maxFiles || self.dropzone.files.length < self.options.maxFiles) {
        self.dropzone.hiddenFileInput.click();
      }
    });
    var dzoneOptions = this.getDzoneOptions();

    try {
      // if init of Dropzone fails it says nothing and
      // it fails silently. Using this block we make sure
      // that if you break it w/ some weird or missing option
      // you can get a proper log of it
      //
      self.dropzone = new dropzone_default.a(self.$dropzone[0], dzoneOptions);
    } catch (e) {
      if (window.DEBUG) {
        // log it!
        console.log(e);
      }

      throw e;
    }

    self.dropzone.on("maxfilesreached", function () {
      self.showHideControls();
    });
    self.dropzone.on("addedfile", function ()
    /* file */
    {
      self.showHideControls();
    });
    self.dropzone.on("removedfile", function () {
      self.showHideControls();
    });
    self.dropzone.on("success", function (e, response) {
      // Trigger event 'uploadAllCompleted' and pass the server's reponse and
      // the path uid. This event can be listened to by patterns using the
      // upload pattern, e.g. the TinyMCE pattern's link plugin.
      var data;

      try {
        data = jquery_js_exposed_default.a.parseJSON(response);
      } catch (ex) {
        data = response;
      }

      self.$el.trigger("uploadAllCompleted", {
        data: data,
        path_uid: self.$pathInput ? self.$pathInput.val() : null
      });
    });

    if (self.options.autoCleanResults) {
      self.dropzone.on("complete", function (file) {
        if (file.status === dropzone_default.a.SUCCESS) {
          setTimeout(function () {
            jquery_js_exposed_default()(file.previewElement).fadeOut();
          }, 3000);
        }
      });
    }

    self.dropzone.on("complete", function (file) {
      if (file.status === dropzone_default.a.SUCCESS && self.dropzone.files.length === 1) {
        self.showHideControls();
      }
    });
    self.dropzone.on("error", function (file, response, xmlhr) {
      if (typeof xmlhr !== "undefined" && xmlhr.status !== 403) {
        // If error other than 403, just print a generic message
        jquery_js_exposed_default()(".dz-error-message span", file.previewElement).html(Object(i18n_wrapper["a" /* default */])("The file transfer failed"));
      }
    });
    self.dropzone.on("totaluploadprogress", function (pct) {
      // need to caclulate total pct here in reality since we're manually
      // processing each file one at a time.
      pct = ((self.currentFile - 1) * 100 + pct) / (self.dropzone.files.length * 100) * 100;
      self.$progress.attr("aria-valuenow", pct).css("width", pct + "%");
    });
    jquery_js_exposed_default()(".upload-all", self.$el).click(function (e) {
      e.preventDefault();
      e.stopPropagation();
      self.processUpload({
        finished: function finished() {
          self.$progress.attr("aria-valuenow", 0).css("width", "0%");
        }
      });
    });

    if (self.options.clipboardfile) {
      self.dropzone.addFile(self.options.clipboardfile);
    }
  },
  showHideControls: function showHideControls() {
    /* we do this delayed because this can be called multiple times
     AND we need to do this hide/show AFTER dropzone is done with
     all it's own events. This is NASTY but the only way we can
     enforce some numFiles with dropzone! */
    var self = this;

    if (self._showHideTimeout) {
      clearTimeout(self._showHideTimeout);
    }

    self._showHideTimeout = setTimeout(function () {
      self._showHideControls();
    }, 50);
  },
  _showHideControls: function _showHideControls() {
    var self = this;
    var $controls = jquery_js_exposed_default()(".controls", self.$el);
    var $browse = jquery_js_exposed_default()(".browse-select", self.$el);
    var $input = jquery_js_exposed_default()(".dz-hidden-input");

    if (self.options.maxFiles) {
      if (self.dropzone.files.length < self.options.maxFiles) {
        $browse.show();
        $input.prop("disabled", false);
      } else {
        $browse.hide();
        $input.prop("disabled", true);
      }
    }

    if (self.dropzone.files.length > 0) {
      $controls.fadeIn("slow");
      var file = self.dropzone.files[0];
      jquery_js_exposed_default()(".dz-error-message span", file.previewElement).html("");
    } else {
      $controls.fadeOut("slow");
    }
  },
  pathJoin: function pathJoin() {
    var parts = [];

    index_all["default"].each(arguments, function (part) {
      if (!part) {
        return;
      }

      if (part[0] === "/") {
        part = part.substring(1);
      }

      if (part[part.length - 1] === "/") {
        part = part.substring(0, part.length - 1);
      }

      parts.push(part);
    });

    return parts.join("/");
  },
  getUrl: function getUrl() {
    var self = this;
    var url = self.options.url;

    if (!url) {
      if (self.options.baseUrl && self.options.relativePath) {
        url = self.options.baseUrl;

        if (url[url.length - 1] !== "/") {
          url = url + "/";
        }

        url = url + self.pathJoin(self.currentPath, self.options.relativePath);
      } else {
        var $form = self.$el.parents("form");

        if ($form.length > 0) {
          url = $form.attr("action");
        } else {
          url = window.location.href;
        }
      }
    }

    return url;
  },
  getDzoneOptions: function getDzoneOptions() {
    var self = this; // This pattern REQUIRE dropzone to be clickable

    self.options.clickable = true;
    var options = jquery_js_exposed_default.a.extend({}, self.options);
    options.url = self.getUrl();
    options.headers = {
      "X-CSRF-TOKEN": utils["a" /* default */].getAuthenticator()
    }; // XXX force to only upload one to the server at a time,
    // right now we don't support multiple for backends

    options.uploadMultiple = false;
    delete options.wrap;
    delete options.wrapperTemplate;
    delete options.resultTemplate;
    delete options.autoCleanResults;
    delete options.fileaddedClassName;
    delete options.useTus;

    if (self.options.previewsContainer) {
      /*
       * if they have a select but it's not an id, let's make an id selector
       * so we can target the correct container. dropzone is weird here...
       */
      var $preview = self.$el.find(self.options.previewsContainer);

      if ($preview.length > 0) {
        options.previewsContainer = $preview[0];
      }
    } // XXX: do we need to allow this?


    options.autoProcessQueue = false; // options.addRemoveLinks = true;  // we show them in the template

    options.previewTemplate = preview; // if our element is a form we should force some values
    // https://github.com/enyo/dropzone/wiki/Combine-normal-form-with-Dropzone

    return options;
  },
  processUpload: function processUpload(options) {
    if (!options) {
      options = {};
    }

    var self = this,
        processing = false,
        useTus = self.options.useTus,
        fileaddedClassName = self.options.fileaddedClassName,
        finished = options.finished;
    self.currentFile = 0;

    function process() {
      processing = true;

      if (self.dropzone.files.length === 0) {
        processing = false;
      }

      var file = self.dropzone.files[0];

      if (processing && file.status === dropzone_default.a.ERROR) {
        // Put the file back as "queued" for retrying
        file.status = dropzone_default.a.QUEUED;
        processing = false;
      }

      if (!processing) {
        self.$el.removeClass(fileaddedClassName);

        if (finished !== undefined && typeof finished === "function") {
          finished();
        }

        return;
      }

      if ([dropzone_default.a.SUCCESS, dropzone_default.a.CANCELED].indexOf(file.status) !== -1) {
        // remove it
        self.dropzone.removeFile(file);
        process();
      } else if (file.status !== dropzone_default.a.UPLOADING) {
        // start processing file
        if (useTus && window.tus) {
          // use tus upload if installed
          self.handleTusUpload(file);
        } else {
          // otherwise, just use dropzone to process
          self.currentFile += 1;
          self.dropzone.processFile(file);
        }

        setTimeout(process, 100);
      } else {
        // currently processing
        setTimeout(process, 100);
      }
    }

    process();
  },
  handleTusUpload: function handleTusUpload(file) {
    /* this needs fixing... */
    var self = this,
        $preview = jquery_js_exposed_default()(file.previewElement),
        chunkSize = 1024 * 1024 * 5; // 5mb chunk size

    file.status = dropzone_default.a.UPLOADING;
    window.tus.upload(file, {
      endpoint: self.dropzone.options.url,
      headers: {
        "FILENAME": file.name,
        "X-CSRF-TOKEN": utils["a" /* default */].getAuthenticator()
      },
      chunkSize: chunkSize
    }).fail(function () {
      if (window.DEBUG) {
        console.alert(Object(i18n_wrapper["a" /* default */])("Error uploading with TUS resumable uploads"));
      }

      file.status = dropzone_default.a.ERROR;
    }).progress(function (e, bytesUploaded, bytesTotal) {
      var percentage = bytesUploaded / bytesTotal * 100;
      self.$progress.attr("aria-valuenow", percentage).css("width", percentage + "%");
      self.$progress.html(Object(i18n_wrapper["a" /* default */])("uploading...") + "<br />" + self.formatBytes(bytesUploaded) + " / " + self.formatBytes(bytesTotal));
    }).done(function (url, file) {
      file.status = dropzone_default.a.SUCCESS;
      self.dropzone.emit("success", file);
      self.dropzone.emit("complete", file);
    });
  },
  formatBytes: function formatBytes(bytes) {
    var kb = Math.round(bytes / 1024);

    if (kb < 1024) {
      return kb + " KiB";
    }

    var mb = Math.round(kb / 1024);

    if (mb < 1024) {
      return mb + " MB";
    }

    return Math.round(mb / 1024) + " GB";
  },
  setPath: function setPath(path) {
    var self = this;
    self.currentPath = path;
    self.options.url = null;
    self.options.url = self.dropzone.options.url = self.getUrl();
  },
  setupRelatedItems: function setupRelatedItems($input) {
    var self = this;
    var options = self.options.relatedItems;
    options.upload = false; // ensure that related items upload is off.

    if (self.options.initialFolder) {
      $input.attr("value", self.options.initialFolder);
    }

    var ri = new relateditems["a" /* default */]($input, options);
    ri.$el.on("change", function () {
      var result = jquery_js_exposed_default()(this).select2("data");
      var path = null;

      if (result.length > 0) {
        path = result[0].path;
      }

      self.setPath(path);
    });
    return ri;
  }
}));

/***/ }),

/***/ 215:
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ 216:
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./advlist": [
		146,
		14
	],
	"./advlist/": [
		146,
		14
	],
	"./advlist/index": [
		146,
		14
	],
	"./advlist/index.js": [
		146,
		14
	],
	"./advlist/plugin": [
		269,
		63
	],
	"./advlist/plugin.js": [
		269,
		63
	],
	"./advlist/plugin.min": [
		316,
		64
	],
	"./advlist/plugin.min.js": [
		316,
		64
	],
	"./anchor": [
		147,
		15
	],
	"./anchor/": [
		147,
		15
	],
	"./anchor/index": [
		147,
		15
	],
	"./anchor/index.js": [
		147,
		15
	],
	"./anchor/plugin": [
		270,
		65
	],
	"./anchor/plugin.js": [
		270,
		65
	],
	"./anchor/plugin.min": [
		317,
		66
	],
	"./anchor/plugin.min.js": [
		317,
		66
	],
	"./autolink": [
		148,
		16
	],
	"./autolink/": [
		148,
		16
	],
	"./autolink/index": [
		148,
		16
	],
	"./autolink/index.js": [
		148,
		16
	],
	"./autolink/plugin": [
		271,
		67
	],
	"./autolink/plugin.js": [
		271,
		67
	],
	"./autolink/plugin.min": [
		318,
		68
	],
	"./autolink/plugin.min.js": [
		318,
		68
	],
	"./autoresize": [
		149,
		17
	],
	"./autoresize/": [
		149,
		17
	],
	"./autoresize/index": [
		149,
		17
	],
	"./autoresize/index.js": [
		149,
		17
	],
	"./autoresize/plugin": [
		272,
		69
	],
	"./autoresize/plugin.js": [
		272,
		69
	],
	"./autoresize/plugin.min": [
		319,
		70
	],
	"./autoresize/plugin.min.js": [
		319,
		70
	],
	"./autosave": [
		150,
		18
	],
	"./autosave/": [
		150,
		18
	],
	"./autosave/index": [
		150,
		18
	],
	"./autosave/index.js": [
		150,
		18
	],
	"./autosave/plugin": [
		273,
		71
	],
	"./autosave/plugin.js": [
		273,
		71
	],
	"./autosave/plugin.min": [
		320,
		72
	],
	"./autosave/plugin.min.js": [
		320,
		72
	],
	"./bbcode": [
		151,
		19
	],
	"./bbcode/": [
		151,
		19
	],
	"./bbcode/index": [
		151,
		19
	],
	"./bbcode/index.js": [
		151,
		19
	],
	"./bbcode/plugin": [
		274,
		73
	],
	"./bbcode/plugin.js": [
		274,
		73
	],
	"./bbcode/plugin.min": [
		321,
		74
	],
	"./bbcode/plugin.min.js": [
		321,
		74
	],
	"./charmap": [
		152,
		1,
		46
	],
	"./charmap/": [
		152,
		1,
		46
	],
	"./charmap/index": [
		152,
		1,
		46
	],
	"./charmap/index.js": [
		152,
		1,
		46
	],
	"./charmap/plugin": [
		304,
		1
	],
	"./charmap/plugin.js": [
		304,
		1
	],
	"./charmap/plugin.min": [
		322,
		75
	],
	"./charmap/plugin.min.js": [
		322,
		75
	],
	"./code": [
		153,
		20
	],
	"./code/": [
		153,
		20
	],
	"./code/index": [
		153,
		20
	],
	"./code/index.js": [
		153,
		20
	],
	"./code/plugin": [
		275,
		76
	],
	"./code/plugin.js": [
		275,
		76
	],
	"./code/plugin.min": [
		323,
		77
	],
	"./code/plugin.min.js": [
		323,
		77
	],
	"./codesample": [
		154,
		2,
		47
	],
	"./codesample/": [
		154,
		2,
		47
	],
	"./codesample/index": [
		154,
		2,
		47
	],
	"./codesample/index.js": [
		154,
		2,
		47
	],
	"./codesample/plugin": [
		305,
		2
	],
	"./codesample/plugin.js": [
		305,
		2
	],
	"./codesample/plugin.min": [
		324,
		78
	],
	"./codesample/plugin.min.js": [
		324,
		78
	],
	"./colorpicker": [
		155,
		21
	],
	"./colorpicker/": [
		155,
		21
	],
	"./colorpicker/index": [
		155,
		21
	],
	"./colorpicker/index.js": [
		155,
		21
	],
	"./colorpicker/plugin": [
		276,
		79
	],
	"./colorpicker/plugin.js": [
		276,
		79
	],
	"./colorpicker/plugin.min": [
		325,
		80
	],
	"./colorpicker/plugin.min.js": [
		325,
		80
	],
	"./contextmenu": [
		156,
		22
	],
	"./contextmenu/": [
		156,
		22
	],
	"./contextmenu/index": [
		156,
		22
	],
	"./contextmenu/index.js": [
		156,
		22
	],
	"./contextmenu/plugin": [
		277,
		81
	],
	"./contextmenu/plugin.js": [
		277,
		81
	],
	"./contextmenu/plugin.min": [
		326,
		82
	],
	"./contextmenu/plugin.min.js": [
		326,
		82
	],
	"./directionality": [
		157,
		23
	],
	"./directionality/": [
		157,
		23
	],
	"./directionality/index": [
		157,
		23
	],
	"./directionality/index.js": [
		157,
		23
	],
	"./directionality/plugin": [
		278,
		83
	],
	"./directionality/plugin.js": [
		278,
		83
	],
	"./directionality/plugin.min": [
		327,
		84
	],
	"./directionality/plugin.min.js": [
		327,
		84
	],
	"./emoticons": [
		158,
		24
	],
	"./emoticons/": [
		158,
		24
	],
	"./emoticons/index": [
		158,
		24
	],
	"./emoticons/index.js": [
		158,
		24
	],
	"./emoticons/js/emojiimages": [
		328,
		85
	],
	"./emoticons/js/emojiimages.js": [
		328,
		85
	],
	"./emoticons/js/emojiimages.min": [
		329,
		86
	],
	"./emoticons/js/emojiimages.min.js": [
		329,
		86
	],
	"./emoticons/js/emojis": [
		330,
		87
	],
	"./emoticons/js/emojis.js": [
		330,
		87
	],
	"./emoticons/js/emojis.min": [
		331,
		88
	],
	"./emoticons/js/emojis.min.js": [
		331,
		88
	],
	"./emoticons/plugin": [
		279,
		89
	],
	"./emoticons/plugin.js": [
		279,
		89
	],
	"./emoticons/plugin.min": [
		332,
		90
	],
	"./emoticons/plugin.min.js": [
		332,
		90
	],
	"./fullpage": [
		159,
		25
	],
	"./fullpage/": [
		159,
		25
	],
	"./fullpage/index": [
		159,
		25
	],
	"./fullpage/index.js": [
		159,
		25
	],
	"./fullpage/plugin": [
		280,
		91
	],
	"./fullpage/plugin.js": [
		280,
		91
	],
	"./fullpage/plugin.min": [
		333,
		92
	],
	"./fullpage/plugin.min.js": [
		333,
		92
	],
	"./fullscreen": [
		160,
		3,
		48
	],
	"./fullscreen/": [
		160,
		3,
		48
	],
	"./fullscreen/index": [
		160,
		3,
		48
	],
	"./fullscreen/index.js": [
		160,
		3,
		48
	],
	"./fullscreen/plugin": [
		306,
		3
	],
	"./fullscreen/plugin.js": [
		306,
		3
	],
	"./fullscreen/plugin.min": [
		334,
		93
	],
	"./fullscreen/plugin.min.js": [
		334,
		93
	],
	"./help": [
		161,
		26
	],
	"./help/": [
		161,
		26
	],
	"./help/index": [
		161,
		26
	],
	"./help/index.js": [
		161,
		26
	],
	"./help/plugin": [
		281,
		94
	],
	"./help/plugin.js": [
		281,
		94
	],
	"./help/plugin.min": [
		335,
		95
	],
	"./help/plugin.min.js": [
		335,
		95
	],
	"./hr": [
		162,
		27
	],
	"./hr/": [
		162,
		27
	],
	"./hr/index": [
		162,
		27
	],
	"./hr/index.js": [
		162,
		27
	],
	"./hr/plugin": [
		282,
		96
	],
	"./hr/plugin.js": [
		282,
		96
	],
	"./hr/plugin.min": [
		336,
		97
	],
	"./hr/plugin.min.js": [
		336,
		97
	],
	"./image": [
		163,
		4,
		49
	],
	"./image/": [
		163,
		4,
		49
	],
	"./image/index": [
		163,
		4,
		49
	],
	"./image/index.js": [
		163,
		4,
		49
	],
	"./image/plugin": [
		307,
		4
	],
	"./image/plugin.js": [
		307,
		4
	],
	"./image/plugin.min": [
		337,
		98
	],
	"./image/plugin.min.js": [
		337,
		98
	],
	"./imagetools": [
		164,
		5,
		50
	],
	"./imagetools/": [
		164,
		5,
		50
	],
	"./imagetools/index": [
		164,
		5,
		50
	],
	"./imagetools/index.js": [
		164,
		5,
		50
	],
	"./imagetools/plugin": [
		308,
		5
	],
	"./imagetools/plugin.js": [
		308,
		5
	],
	"./imagetools/plugin.min": [
		338,
		99
	],
	"./imagetools/plugin.min.js": [
		338,
		99
	],
	"./importcss": [
		165,
		28
	],
	"./importcss/": [
		165,
		28
	],
	"./importcss/index": [
		165,
		28
	],
	"./importcss/index.js": [
		165,
		28
	],
	"./importcss/plugin": [
		283,
		100
	],
	"./importcss/plugin.js": [
		283,
		100
	],
	"./importcss/plugin.min": [
		339,
		101
	],
	"./importcss/plugin.min.js": [
		339,
		101
	],
	"./insertdatetime": [
		166,
		29
	],
	"./insertdatetime/": [
		166,
		29
	],
	"./insertdatetime/index": [
		166,
		29
	],
	"./insertdatetime/index.js": [
		166,
		29
	],
	"./insertdatetime/plugin": [
		284,
		102
	],
	"./insertdatetime/plugin.js": [
		284,
		102
	],
	"./insertdatetime/plugin.min": [
		340,
		103
	],
	"./insertdatetime/plugin.min.js": [
		340,
		103
	],
	"./legacyoutput": [
		167,
		30
	],
	"./legacyoutput/": [
		167,
		30
	],
	"./legacyoutput/index": [
		167,
		30
	],
	"./legacyoutput/index.js": [
		167,
		30
	],
	"./legacyoutput/plugin": [
		285,
		104
	],
	"./legacyoutput/plugin.js": [
		285,
		104
	],
	"./legacyoutput/plugin.min": [
		341,
		105
	],
	"./legacyoutput/plugin.min.js": [
		341,
		105
	],
	"./link": [
		168,
		6,
		51
	],
	"./link/": [
		168,
		6,
		51
	],
	"./link/index": [
		168,
		6,
		51
	],
	"./link/index.js": [
		168,
		6,
		51
	],
	"./link/plugin": [
		309,
		6
	],
	"./link/plugin.js": [
		309,
		6
	],
	"./link/plugin.min": [
		342,
		106
	],
	"./link/plugin.min.js": [
		342,
		106
	],
	"./lists": [
		169,
		7,
		52
	],
	"./lists/": [
		169,
		7,
		52
	],
	"./lists/index": [
		169,
		7,
		52
	],
	"./lists/index.js": [
		169,
		7,
		52
	],
	"./lists/plugin": [
		310,
		7
	],
	"./lists/plugin.js": [
		310,
		7
	],
	"./lists/plugin.min": [
		343,
		107
	],
	"./lists/plugin.min.js": [
		343,
		107
	],
	"./media": [
		170,
		8,
		53
	],
	"./media/": [
		170,
		8,
		53
	],
	"./media/index": [
		170,
		8,
		53
	],
	"./media/index.js": [
		170,
		8,
		53
	],
	"./media/plugin": [
		311,
		8
	],
	"./media/plugin.js": [
		311,
		8
	],
	"./media/plugin.min": [
		344,
		108
	],
	"./media/plugin.min.js": [
		344,
		108
	],
	"./nonbreaking": [
		171,
		31
	],
	"./nonbreaking/": [
		171,
		31
	],
	"./nonbreaking/index": [
		171,
		31
	],
	"./nonbreaking/index.js": [
		171,
		31
	],
	"./nonbreaking/plugin": [
		286,
		109
	],
	"./nonbreaking/plugin.js": [
		286,
		109
	],
	"./nonbreaking/plugin.min": [
		345,
		110
	],
	"./nonbreaking/plugin.min.js": [
		345,
		110
	],
	"./noneditable": [
		172,
		32
	],
	"./noneditable/": [
		172,
		32
	],
	"./noneditable/index": [
		172,
		32
	],
	"./noneditable/index.js": [
		172,
		32
	],
	"./noneditable/plugin": [
		287,
		111
	],
	"./noneditable/plugin.js": [
		287,
		111
	],
	"./noneditable/plugin.min": [
		346,
		112
	],
	"./noneditable/plugin.min.js": [
		346,
		112
	],
	"./pagebreak": [
		173,
		33
	],
	"./pagebreak/": [
		173,
		33
	],
	"./pagebreak/index": [
		173,
		33
	],
	"./pagebreak/index.js": [
		173,
		33
	],
	"./pagebreak/plugin": [
		288,
		113
	],
	"./pagebreak/plugin.js": [
		288,
		113
	],
	"./pagebreak/plugin.min": [
		347,
		114
	],
	"./pagebreak/plugin.min.js": [
		347,
		114
	],
	"./paste": [
		174,
		9,
		54
	],
	"./paste/": [
		174,
		9,
		54
	],
	"./paste/index": [
		174,
		9,
		54
	],
	"./paste/index.js": [
		174,
		9,
		54
	],
	"./paste/plugin": [
		312,
		9
	],
	"./paste/plugin.js": [
		312,
		9
	],
	"./paste/plugin.min": [
		348,
		115
	],
	"./paste/plugin.min.js": [
		348,
		115
	],
	"./preview": [
		175,
		34
	],
	"./preview/": [
		175,
		34
	],
	"./preview/index": [
		175,
		34
	],
	"./preview/index.js": [
		175,
		34
	],
	"./preview/plugin": [
		289,
		116
	],
	"./preview/plugin.js": [
		289,
		116
	],
	"./preview/plugin.min": [
		349,
		117
	],
	"./preview/plugin.min.js": [
		349,
		117
	],
	"./print": [
		176,
		35
	],
	"./print/": [
		176,
		35
	],
	"./print/index": [
		176,
		35
	],
	"./print/index.js": [
		176,
		35
	],
	"./print/plugin": [
		290,
		118
	],
	"./print/plugin.js": [
		290,
		118
	],
	"./print/plugin.min": [
		350,
		119
	],
	"./print/plugin.min.js": [
		350,
		119
	],
	"./quickbars": [
		177,
		36
	],
	"./quickbars/": [
		177,
		36
	],
	"./quickbars/index": [
		177,
		36
	],
	"./quickbars/index.js": [
		177,
		36
	],
	"./quickbars/plugin": [
		291,
		120
	],
	"./quickbars/plugin.js": [
		291,
		120
	],
	"./quickbars/plugin.min": [
		351,
		121
	],
	"./quickbars/plugin.min.js": [
		351,
		121
	],
	"./save": [
		178,
		37
	],
	"./save/": [
		178,
		37
	],
	"./save/index": [
		178,
		37
	],
	"./save/index.js": [
		178,
		37
	],
	"./save/plugin": [
		292,
		122
	],
	"./save/plugin.js": [
		292,
		122
	],
	"./save/plugin.min": [
		352,
		123
	],
	"./save/plugin.min.js": [
		352,
		123
	],
	"./searchreplace": [
		179,
		10,
		55
	],
	"./searchreplace/": [
		179,
		10,
		55
	],
	"./searchreplace/index": [
		179,
		10,
		55
	],
	"./searchreplace/index.js": [
		179,
		10,
		55
	],
	"./searchreplace/plugin": [
		313,
		10
	],
	"./searchreplace/plugin.js": [
		313,
		10
	],
	"./searchreplace/plugin.min": [
		353,
		124
	],
	"./searchreplace/plugin.min.js": [
		353,
		124
	],
	"./spellchecker": [
		180,
		38
	],
	"./spellchecker/": [
		180,
		38
	],
	"./spellchecker/index": [
		180,
		38
	],
	"./spellchecker/index.js": [
		180,
		38
	],
	"./spellchecker/plugin": [
		293,
		125
	],
	"./spellchecker/plugin.js": [
		293,
		125
	],
	"./spellchecker/plugin.min": [
		354,
		126
	],
	"./spellchecker/plugin.min.js": [
		354,
		126
	],
	"./tabfocus": [
		181,
		39
	],
	"./tabfocus/": [
		181,
		39
	],
	"./tabfocus/index": [
		181,
		39
	],
	"./tabfocus/index.js": [
		181,
		39
	],
	"./tabfocus/plugin": [
		294,
		127
	],
	"./tabfocus/plugin.js": [
		294,
		127
	],
	"./tabfocus/plugin.min": [
		355,
		128
	],
	"./tabfocus/plugin.min.js": [
		355,
		128
	],
	"./table": [
		182,
		11,
		56
	],
	"./table/": [
		182,
		11,
		56
	],
	"./table/index": [
		182,
		11,
		56
	],
	"./table/index.js": [
		182,
		11,
		56
	],
	"./table/plugin": [
		314,
		11
	],
	"./table/plugin.js": [
		314,
		11
	],
	"./table/plugin.min": [
		356,
		129
	],
	"./table/plugin.min.js": [
		356,
		129
	],
	"./template": [
		183,
		40
	],
	"./template/": [
		183,
		40
	],
	"./template/index": [
		183,
		40
	],
	"./template/index.js": [
		183,
		40
	],
	"./template/plugin": [
		295,
		130
	],
	"./template/plugin.js": [
		295,
		130
	],
	"./template/plugin.min": [
		357,
		131
	],
	"./template/plugin.min.js": [
		357,
		131
	],
	"./textcolor": [
		184,
		41
	],
	"./textcolor/": [
		184,
		41
	],
	"./textcolor/index": [
		184,
		41
	],
	"./textcolor/index.js": [
		184,
		41
	],
	"./textcolor/plugin": [
		296,
		132
	],
	"./textcolor/plugin.js": [
		296,
		132
	],
	"./textcolor/plugin.min": [
		358,
		133
	],
	"./textcolor/plugin.min.js": [
		358,
		133
	],
	"./textpattern": [
		185,
		12,
		57
	],
	"./textpattern/": [
		185,
		12,
		57
	],
	"./textpattern/index": [
		185,
		12,
		57
	],
	"./textpattern/index.js": [
		185,
		12,
		57
	],
	"./textpattern/plugin": [
		315,
		12
	],
	"./textpattern/plugin.js": [
		315,
		12
	],
	"./textpattern/plugin.min": [
		359,
		134
	],
	"./textpattern/plugin.min.js": [
		359,
		134
	],
	"./toc": [
		186,
		42
	],
	"./toc/": [
		186,
		42
	],
	"./toc/index": [
		186,
		42
	],
	"./toc/index.js": [
		186,
		42
	],
	"./toc/plugin": [
		297,
		135
	],
	"./toc/plugin.js": [
		297,
		135
	],
	"./toc/plugin.min": [
		360,
		136
	],
	"./toc/plugin.min.js": [
		360,
		136
	],
	"./visualblocks": [
		187,
		43
	],
	"./visualblocks/": [
		187,
		43
	],
	"./visualblocks/index": [
		187,
		43
	],
	"./visualblocks/index.js": [
		187,
		43
	],
	"./visualblocks/plugin": [
		298,
		137
	],
	"./visualblocks/plugin.js": [
		298,
		137
	],
	"./visualblocks/plugin.min": [
		361,
		138
	],
	"./visualblocks/plugin.min.js": [
		361,
		138
	],
	"./visualchars": [
		188,
		44
	],
	"./visualchars/": [
		188,
		44
	],
	"./visualchars/index": [
		188,
		44
	],
	"./visualchars/index.js": [
		188,
		44
	],
	"./visualchars/plugin": [
		299,
		139
	],
	"./visualchars/plugin.js": [
		299,
		139
	],
	"./visualchars/plugin.min": [
		362,
		140
	],
	"./visualchars/plugin.min.js": [
		362,
		140
	],
	"./wordcount": [
		189,
		45
	],
	"./wordcount/": [
		189,
		45
	],
	"./wordcount/index": [
		189,
		45
	],
	"./wordcount/index.js": [
		189,
		45
	],
	"./wordcount/plugin": [
		300,
		141
	],
	"./wordcount/plugin.js": [
		300,
		141
	],
	"./wordcount/plugin.min": [
		363,
		142
	],
	"./wordcount/plugin.min.js": [
		363,
		142
	]
};
function webpackAsyncContext(req) {
	if(!__webpack_require__.o(map, req)) {
		return Promise.resolve().then(function() {
			var e = new Error("Cannot find module '" + req + "'");
			e.code = 'MODULE_NOT_FOUND';
			throw e;
		});
	}

	var ids = map[req], id = ids[0];
	return Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {
		return __webpack_require__.t(id, 7);
	});
}
webpackAsyncContext.keys = function webpackAsyncContextKeys() {
	return Object.keys(map);
};
webpackAsyncContext.id = 216;
module.exports = webpackAsyncContext;

/***/ }),

/***/ 217:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createPopper; });
/* unused harmony export defaultModifiers */
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62);
/* harmony import */ var _modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(87);
/* harmony import */ var _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(88);
/* harmony import */ var _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(86);
/* harmony import */ var _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(85);
/* harmony import */ var _modifiers_offset_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(134);
/* harmony import */ var _modifiers_flip_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(136);
/* harmony import */ var _modifiers_preventOverflow_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(137);
/* harmony import */ var _modifiers_arrow_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(132);
/* harmony import */ var _modifiers_hide_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(133);










var defaultModifiers = [_modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"], _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"], _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"], _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"], _modifiers_offset_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"], _modifiers_flip_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"], _modifiers_preventOverflow_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"], _modifiers_arrow_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"], _modifiers_hide_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"]];
var createPopper = /*#__PURE__*/Object(_createPopper_js__WEBPACK_IMPORTED_MODULE_0__[/* popperGenerator */ "b"])({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ 218:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery Cookie Plugin v1.4.1
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
	if (true) {
		// AMD
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
}(function ($) {

	var pluses = /\+/g;

	function encode(s) {
		return config.raw ? s : encodeURIComponent(s);
	}

	function decode(s) {
		return config.raw ? s : decodeURIComponent(s);
	}

	function stringifyCookieValue(value) {
		return encode(config.json ? JSON.stringify(value) : String(value));
	}

	function parseCookieValue(s) {
		if (s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape...
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}

		try {
			// Replace server-side written pluses with spaces.
			// If we can't decode the cookie, ignore it, it's unusable.
			// If we can't parse the cookie, ignore it, it's unusable.
			s = decodeURIComponent(s.replace(pluses, ' '));
			return config.json ? JSON.parse(s) : s;
		} catch(e) {}
	}

	function read(s, converter) {
		var value = config.raw ? s : parseCookieValue(s);
		return $.isFunction(converter) ? converter(value) : value;
	}

	var config = $.cookie = function (key, value, options) {

		// Write

		if (value !== undefined && !$.isFunction(value)) {
			options = $.extend({}, config.defaults, options);

			if (typeof options.expires === 'number') {
				var days = options.expires, t = options.expires = new Date();
				t.setTime(+t + days * 864e+5);
			}

			return (document.cookie = [
				encode(key), '=', stringifyCookieValue(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path    ? '; path=' + options.path : '',
				options.domain  ? '; domain=' + options.domain : '',
				options.secure  ? '; secure' : ''
			].join(''));
		}

		// Read

		var result = key ? undefined : {};

		// To prevent the for loop in the first place assign an empty array
		// in case there are no cookies at all. Also prevents odd result when
		// calling $.cookie().
		var cookies = document.cookie ? document.cookie.split('; ') : [];

		for (var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = parts.join('=');

			if (key && key === name) {
				// If second argument (value) is a function it's a converter...
				result = read(cookie, value);
				break;
			}

			// Prevent storing a cookie that we couldn't decode.
			if (!key && (cookie = read(cookie)) !== undefined) {
				result[name] = cookie;
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function (key, options) {
		if ($.cookie(key) === undefined) {
			return false;
		}

		// Must not alter options, thus extending a fresh object...
		$.cookie(key, '', $.extend({}, options, { expires: -1 }));
		return !$.cookie(key);
	};

}));


/***/ }),

/***/ 23:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/jquery/dist/jquery.js-exposed
var jquery_js_exposed = __webpack_require__(0);
var jquery_js_exposed_default = /*#__PURE__*/__webpack_require__.n(jquery_js_exposed);

// EXTERNAL MODULE: ./node_modules/underscore/modules/index-all.js + 159 modules
var index_all = __webpack_require__(1);

// EXTERNAL MODULE: ./node_modules/mockup/src/core/ui/views/container.js
var container = __webpack_require__(78);

// EXTERNAL MODULE: ./node_modules/mockup/src/pat/backdrop/backdrop.js
var backdrop = __webpack_require__(131);

// CONCATENATED MODULE: ./node_modules/mockup/src/core/ui/templates/popover.xml
/* harmony default export */ var templates_popover = ("<div class=\"arrow\"></div>\n<div class=\"popover-title\">\n</div>\n<div class=\"items popover-content\">\n</div>\n\n");
// CONCATENATED MODULE: ./node_modules/mockup/src/core/ui/views/popover.js





/* harmony default export */ var views_popover = __webpack_exports__["a"] = (container["a" /* default */].extend({
  tagName: "div",
  className: "popover",
  eventPrefix: "popover",
  template: templates_popover,
  content: null,
  title: null,
  triggerView: null,
  idPrefix: "popover-",
  triggerEvents: {
    "button:click": "toggle"
  },
  placement: "bottom",
  events: {},
  opened: false,
  closeOnOutClick: true,
  appendInContainer: true,
  backdrop: undefined,
  $backdrop: null,
  useBackdrop: true,
  backdropOptions: {
    zIndex: "1009",
    opacity: "0.4",
    className: "backdrop backdrop-popover",
    classActiveName: "backdrop-active",
    closeOnEsc: false,
    closeOnClick: true
  },
  initialize: function initialize(options) {
    var self = this;
    container["a" /* default */].prototype.initialize.apply(this, [options]);
    this.bindTriggerEvents();
    this.on("render", function () {
      this.$el.attr("role", "tooltip").attr("aria-hidden", "false");
      this.renderTitle();
      this.renderContent();
    }, this);
    this.$el.on("keyup", function (e) {
      if (e.keyCode === 27) {
        self.hide();
      }
    });
  },
  afterRender: function afterRender() {},
  getTemplateOptions: function getTemplateOptions() {
    return this.options;
  },
  renderTitle: function renderTitle() {
    var title = this.title;

    if (typeof title === "function") {
      title = title(this.getTemplateOptions());
    }

    this.$(".popover-title").empty().append(title);
  },
  renderContent: function renderContent() {
    this.$(".popover-content").empty().append(this.content(this.getTemplateOptions()));
  },
  bindTriggerEvents: function bindTriggerEvents() {
    if (this.triggerView) {
      index_all["default"].each(this.triggerEvents, function (func, event) {
        var method = this[func];

        if (!method) {
          jquery_js_exposed_default.a.error("Function not found.");
        }

        this.stopListening(this.triggerView, event);
        this.listenTo(this.triggerView, event, method);
      }, this);
    }
  },
  getPosition: function getPosition() {
    var $el = this.triggerView.$el;
    return jquery_js_exposed_default.a.extend({}, {
      width: $el[0].offsetWidth,
      height: $el[0].offsetHeight
    }, $el.offset());
  },
  getBodyClassName: function getBodyClassName() {
    var name = "popover-";

    if (this.options.id) {
      name += this.options.id + "-";
    }

    name += "active";
    return name;
  },
  show: function show() {
    /* hide existing */
    jquery_js_exposed_default()(".popover:visible").each(function () {
      var popover = jquery_js_exposed_default()(this).data("component");

      if (popover) {
        popover.hide();
      }
    });
    this.position();
    this.setBackdrop();

    if (this.useBackdrop === true) {
      this.backdrop.show();
    }

    this.opened = true;

    if (this.triggerView) {
      this.triggerView.$el.addClass("active");
    }

    this.uiEventTrigger("show", this);
    this.$el.attr("aria-hidden", "false");
    jquery_js_exposed_default()("body").addClass(this.getBodyClassName());
  },
  position: function position() {
    var pos = this.getPosition();
    var $tip = this.$el,
        tp,
        placement,
        actualWidth,
        actualHeight;
    placement = this.placement;
    $tip.css({
      top: 0,
      left: 0
    }).addClass("active");
    actualWidth = $tip[0].offsetWidth;
    actualHeight = $tip[0].offsetHeight;

    switch (placement) {
      case "bottom-right":
        tp = {
          top: pos.top + pos.height,
          left: pos.left + pos.width - 40
        };
        break;

      case "bottom":
        tp = {
          top: pos.top + pos.height,
          left: pos.left + pos.width / 2 - actualWidth / 2
        };
        break;

      case "top":
        tp = {
          top: pos.top - actualHeight,
          left: pos.left + pos.width / 2 - actualWidth / 2
        };
        break;

      case "left":
        tp = {
          top: pos.top + pos.height / 2 - actualHeight / 2,
          left: pos.left - actualWidth
        };
        break;

      case "right":
        tp = {
          top: pos.top + pos.height / 2 - actualHeight / 2,
          left: pos.left + pos.width
        };
        break;
    }

    this.applyPlacement(tp, placement);
  },
  applyPlacement: function applyPlacement(offset, placement) {
    var $el = this.$el,
        $tip = this.$el,
        width = $tip[0].offsetWidth,
        height = $tip[0].offsetHeight,
        actualWidth,
        actualHeight,
        delta,
        replace;
    $el.removeClass(placement);
    $el.offset(offset).addClass(placement).addClass("active");
    actualWidth = $tip[0].offsetWidth;
    actualHeight = $tip[0].offsetHeight;

    if (placement === "top" && actualHeight !== height) {
      offset.top = offset.top + height - actualHeight;
      replace = true;
    }

    if (placement === "bottom" || placement === "top") {
      delta = 0;

      if (offset.left < 0) {
        delta = offset.left * -2;
        offset.left = 0;
        $el.removeClass(placement);
        $el.offset(offset).addClass(placement);
        actualWidth = $tip[0].offsetWidth;
        actualHeight = $tip[0].offsetHeight;
      }

      this.positionArrow(delta - width + actualWidth, actualWidth, "left");
    } else if (placement !== "bottom-right") {
      // If placement is bottom-right, don't override left position for the arrow that is defined in css to 20px.
      this.positionArrow(actualHeight - height, actualHeight, "top");
    }

    if (replace) {
      $el.offset(offset);
    }
  },
  positionArrow: function positionArrow(delta, dimension, position) {
    var $arrow = this.$(".arrow");
    $arrow.css(position, delta ? 50 * (1 - delta / dimension) + "%" : "");
  },
  hide: function hide() {
    this.opened = false;
    this.$el.removeClass("active");

    if (this.triggerView) {
      this.triggerView.$el.removeClass("active");
      this.triggerView.$el.attr("aria-hidden", "true");
    }

    this.uiEventTrigger("hide", this);
    this.$el.attr("aria-hidden", "true");
    jquery_js_exposed_default()("body").removeClass(this.getBodyClassName());
  },
  toggle: function toggle(button, e) {
    if (this.opened) {
      this.hide();
    } else {
      this.show();
    }
  },
  setBackdrop: function setBackdrop() {
    if (this.useBackdrop === true && this.backdrop === undefined) {
      var self = this;
      this.$backdrop = this.$el.closest(".ui-backdrop-element");

      if (this.$backdrop.length === 0) {
        this.$backdrop = jquery_js_exposed_default()("body");
      }

      this.backdrop = new backdrop["a" /* default */](this.$backdrop, this.backdropOptions);
      this.backdrop.$el.on("hidden.backdrop.patterns", function (e) {
        if (e.namespace === "backdrop.patterns") {
          e.stopPropagation();

          if (self.opened === true) {
            self.hide();
          }
        }
      });
      this.on("popover:hide", function () {
        this.backdrop.hide();
      }, this);
    }
  }
}));

/***/ }),

/***/ 24:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export getUID */
/* unused harmony export getSelectorFromElement */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getElementFromSelector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return getTransitionDurationFromElement; });
/* unused harmony export triggerTransitionEnd */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return isElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return emulateTransitionEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return typeCheckConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return isVisible; });
/* unused harmony export findShadowRoot */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return noop; });
/* unused harmony export reflow */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return getjQuery; });
/* unused harmony export onDOMContentLoaded */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return isRTL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return defineJQueryPlugin; });
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-beta2): util/index.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

const MAX_UID = 1000000
const MILLISECONDS_MULTIPLIER = 1000
const TRANSITION_END = 'transitionend'

// Shoutout AngusCroll (https://goo.gl/pxwQGp)
const toType = obj => {
  if (obj === null || obj === undefined) {
    return `${obj}`
  }

  return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase()
}

/**
 * --------------------------------------------------------------------------
 * Public Util Api
 * --------------------------------------------------------------------------
 */

const getUID = prefix => {
  do {
    prefix += Math.floor(Math.random() * MAX_UID)
  } while (document.getElementById(prefix))

  return prefix
}

const getSelector = element => {
  let selector = element.getAttribute('data-bs-target')

  if (!selector || selector === '#') {
    let hrefAttr = element.getAttribute('href')

    // The only valid content that could double as a selector are IDs or classes,
    // so everything starting with `#` or `.`. If a "real" URL is used as the selector,
    // `document.querySelector` will rightfully complain it is invalid.
    // See https://github.com/twbs/bootstrap/issues/32273
    if (!hrefAttr || (!hrefAttr.includes('#') && !hrefAttr.startsWith('.'))) {
      return null
    }

    // Just in case some CMS puts out a full URL with the anchor appended
    if (hrefAttr.includes('#') && !hrefAttr.startsWith('#')) {
      hrefAttr = '#' + hrefAttr.split('#')[1]
    }

    selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null
  }

  return selector
}

const getSelectorFromElement = element => {
  const selector = getSelector(element)

  if (selector) {
    return document.querySelector(selector) ? selector : null
  }

  return null
}

const getElementFromSelector = element => {
  const selector = getSelector(element)

  return selector ? document.querySelector(selector) : null
}

const getTransitionDurationFromElement = element => {
  if (!element) {
    return 0
  }

  // Get transition-duration of the element
  let { transitionDuration, transitionDelay } = window.getComputedStyle(element)

  const floatTransitionDuration = Number.parseFloat(transitionDuration)
  const floatTransitionDelay = Number.parseFloat(transitionDelay)

  // Return 0 if element or transition duration is not found
  if (!floatTransitionDuration && !floatTransitionDelay) {
    return 0
  }

  // If multiple durations are defined, take the first
  transitionDuration = transitionDuration.split(',')[0]
  transitionDelay = transitionDelay.split(',')[0]

  return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER
}

const triggerTransitionEnd = element => {
  element.dispatchEvent(new Event(TRANSITION_END))
}

const isElement = obj => (obj[0] || obj).nodeType

const emulateTransitionEnd = (element, duration) => {
  let called = false
  const durationPadding = 5
  const emulatedDuration = duration + durationPadding

  function listener() {
    called = true
    element.removeEventListener(TRANSITION_END, listener)
  }

  element.addEventListener(TRANSITION_END, listener)
  setTimeout(() => {
    if (!called) {
      triggerTransitionEnd(element)
    }
  }, emulatedDuration)
}

const typeCheckConfig = (componentName, config, configTypes) => {
  Object.keys(configTypes).forEach(property => {
    const expectedTypes = configTypes[property]
    const value = config[property]
    const valueType = value && isElement(value) ? 'element' : toType(value)

    if (!new RegExp(expectedTypes).test(valueType)) {
      throw new TypeError(
        `${componentName.toUpperCase()}: ` +
        `Option "${property}" provided type "${valueType}" ` +
        `but expected type "${expectedTypes}".`
      )
    }
  })
}

const isVisible = element => {
  if (!element) {
    return false
  }

  if (element.style && element.parentNode && element.parentNode.style) {
    const elementStyle = getComputedStyle(element)
    const parentNodeStyle = getComputedStyle(element.parentNode)

    return elementStyle.display !== 'none' &&
      parentNodeStyle.display !== 'none' &&
      elementStyle.visibility !== 'hidden'
  }

  return false
}

const findShadowRoot = element => {
  if (!document.documentElement.attachShadow) {
    return null
  }

  // Can find the shadow root otherwise it'll return the document
  if (typeof element.getRootNode === 'function') {
    const root = element.getRootNode()
    return root instanceof ShadowRoot ? root : null
  }

  if (element instanceof ShadowRoot) {
    return element
  }

  // when we don't find a shadow root
  if (!element.parentNode) {
    return null
  }

  return findShadowRoot(element.parentNode)
}

const noop = () => function () {}

const reflow = element => element.offsetHeight

const getjQuery = () => {
  const { jQuery } = window

  if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
    return jQuery
  }

  return null
}

const onDOMContentLoaded = callback => {
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', callback)
  } else {
    callback()
  }
}

const isRTL = document.documentElement.dir === 'rtl'

const defineJQueryPlugin = (name, plugin) => {
  onDOMContentLoaded(() => {
    const $ = getjQuery()
    /* istanbul ignore if */
    if ($) {
      const JQUERY_NO_CONFLICT = $.fn[name]
      $.fn[name] = plugin.jQueryInterface
      $.fn[name].Constructor = plugin
      $.fn[name].noConflict = () => {
        $.fn[name] = JQUERY_NO_CONFLICT
        return plugin.jQueryInterface
      }
    }
  })
}




/***/ }),

/***/ 25:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-beta2): dom/event-handler.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */



/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const namespaceRegex = /[^.]*(?=\..*)\.|.*/
const stripNameRegex = /\..*/
const stripUidRegex = /::\d+$/
const eventRegistry = {} // Events storage
let uidEvent = 1
const customEvents = {
  mouseenter: 'mouseover',
  mouseleave: 'mouseout'
}
const nativeEvents = new Set([
  'click',
  'dblclick',
  'mouseup',
  'mousedown',
  'contextmenu',
  'mousewheel',
  'DOMMouseScroll',
  'mouseover',
  'mouseout',
  'mousemove',
  'selectstart',
  'selectend',
  'keydown',
  'keypress',
  'keyup',
  'orientationchange',
  'touchstart',
  'touchmove',
  'touchend',
  'touchcancel',
  'pointerdown',
  'pointermove',
  'pointerup',
  'pointerleave',
  'pointercancel',
  'gesturestart',
  'gesturechange',
  'gestureend',
  'focus',
  'blur',
  'change',
  'reset',
  'select',
  'submit',
  'focusin',
  'focusout',
  'load',
  'unload',
  'beforeunload',
  'resize',
  'move',
  'DOMContentLoaded',
  'readystatechange',
  'error',
  'abort',
  'scroll'
])

/**
 * ------------------------------------------------------------------------
 * Private methods
 * ------------------------------------------------------------------------
 */

function getUidEvent(element, uid) {
  return (uid && `${uid}::${uidEvent++}`) || element.uidEvent || uidEvent++
}

function getEvent(element) {
  const uid = getUidEvent(element)

  element.uidEvent = uid
  eventRegistry[uid] = eventRegistry[uid] || {}

  return eventRegistry[uid]
}

function bootstrapHandler(element, fn) {
  return function handler(event) {
    event.delegateTarget = element

    if (handler.oneOff) {
      EventHandler.off(element, event.type, fn)
    }

    return fn.apply(element, [event])
  }
}

function bootstrapDelegationHandler(element, selector, fn) {
  return function handler(event) {
    const domElements = element.querySelectorAll(selector)

    for (let { target } = event; target && target !== this; target = target.parentNode) {
      for (let i = domElements.length; i--;) {
        if (domElements[i] === target) {
          event.delegateTarget = target

          if (handler.oneOff) {
            // eslint-disable-next-line unicorn/consistent-destructuring
            EventHandler.off(element, event.type, fn)
          }

          return fn.apply(target, [event])
        }
      }
    }

    // To please ESLint
    return null
  }
}

function findHandler(events, handler, delegationSelector = null) {
  const uidEventList = Object.keys(events)

  for (let i = 0, len = uidEventList.length; i < len; i++) {
    const event = events[uidEventList[i]]

    if (event.originalHandler === handler && event.delegationSelector === delegationSelector) {
      return event
    }
  }

  return null
}

function normalizeParams(originalTypeEvent, handler, delegationFn) {
  const delegation = typeof handler === 'string'
  const originalHandler = delegation ? delegationFn : handler

  // allow to get the native events from namespaced events ('click.bs.button' --> 'click')
  let typeEvent = originalTypeEvent.replace(stripNameRegex, '')
  const custom = customEvents[typeEvent]

  if (custom) {
    typeEvent = custom
  }

  const isNative = nativeEvents.has(typeEvent)

  if (!isNative) {
    typeEvent = originalTypeEvent
  }

  return [delegation, originalHandler, typeEvent]
}

function addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {
  if (typeof originalTypeEvent !== 'string' || !element) {
    return
  }

  if (!handler) {
    handler = delegationFn
    delegationFn = null
  }

  const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn)
  const events = getEvent(element)
  const handlers = events[typeEvent] || (events[typeEvent] = {})
  const previousFn = findHandler(handlers, originalHandler, delegation ? handler : null)

  if (previousFn) {
    previousFn.oneOff = previousFn.oneOff && oneOff

    return
  }

  const uid = getUidEvent(originalHandler, originalTypeEvent.replace(namespaceRegex, ''))
  const fn = delegation ?
    bootstrapDelegationHandler(element, handler, delegationFn) :
    bootstrapHandler(element, handler)

  fn.delegationSelector = delegation ? handler : null
  fn.originalHandler = originalHandler
  fn.oneOff = oneOff
  fn.uidEvent = uid
  handlers[uid] = fn

  element.addEventListener(typeEvent, fn, delegation)
}

function removeHandler(element, events, typeEvent, handler, delegationSelector) {
  const fn = findHandler(events[typeEvent], handler, delegationSelector)

  if (!fn) {
    return
  }

  element.removeEventListener(typeEvent, fn, Boolean(delegationSelector))
  delete events[typeEvent][fn.uidEvent]
}

function removeNamespacedHandlers(element, events, typeEvent, namespace) {
  const storeElementEvent = events[typeEvent] || {}

  Object.keys(storeElementEvent).forEach(handlerKey => {
    if (handlerKey.includes(namespace)) {
      const event = storeElementEvent[handlerKey]

      removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector)
    }
  })
}

const EventHandler = {
  on(element, event, handler, delegationFn) {
    addHandler(element, event, handler, delegationFn, false)
  },

  one(element, event, handler, delegationFn) {
    addHandler(element, event, handler, delegationFn, true)
  },

  off(element, originalTypeEvent, handler, delegationFn) {
    if (typeof originalTypeEvent !== 'string' || !element) {
      return
    }

    const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn)
    const inNamespace = typeEvent !== originalTypeEvent
    const events = getEvent(element)
    const isNamespace = originalTypeEvent.startsWith('.')

    if (typeof originalHandler !== 'undefined') {
      // Simplest case: handler is passed, remove that listener ONLY.
      if (!events || !events[typeEvent]) {
        return
      }

      removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null)
      return
    }

    if (isNamespace) {
      Object.keys(events).forEach(elementEvent => {
        removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1))
      })
    }

    const storeElementEvent = events[typeEvent] || {}
    Object.keys(storeElementEvent).forEach(keyHandlers => {
      const handlerKey = keyHandlers.replace(stripUidRegex, '')

      if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
        const event = storeElementEvent[keyHandlers]

        removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector)
      }
    })
  },

  trigger(element, event, args) {
    if (typeof event !== 'string' || !element) {
      return null
    }

    const $ = Object(_util_index__WEBPACK_IMPORTED_MODULE_0__[/* getjQuery */ "e"])()
    const typeEvent = event.replace(stripNameRegex, '')
    const inNamespace = event !== typeEvent
    const isNative = nativeEvents.has(typeEvent)

    let jQueryEvent
    let bubbles = true
    let nativeDispatch = true
    let defaultPrevented = false
    let evt = null

    if (inNamespace && $) {
      jQueryEvent = $.Event(event, args)

      $(element).trigger(jQueryEvent)
      bubbles = !jQueryEvent.isPropagationStopped()
      nativeDispatch = !jQueryEvent.isImmediatePropagationStopped()
      defaultPrevented = jQueryEvent.isDefaultPrevented()
    }

    if (isNative) {
      evt = document.createEvent('HTMLEvents')
      evt.initEvent(typeEvent, bubbles, true)
    } else {
      evt = new CustomEvent(event, {
        bubbles,
        cancelable: true
      })
    }

    // merge custom information in our event
    if (typeof args !== 'undefined') {
      Object.keys(args).forEach(key => {
        Object.defineProperty(evt, key, {
          get() {
            return args[key]
          }
        })
      })
    }

    if (defaultPrevented) {
      evt.preventDefault()
    }

    if (nativeDispatch) {
      element.dispatchEvent(evt)
    }

    if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') {
      jQueryEvent.preventDefault()
    }

    return evt
  }
}

/* harmony default export */ __webpack_exports__["a"] = (EventHandler);


/***/ }),

/***/ 26:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getWindow; });
/*:: import type { Window } from '../types'; */

/*:: declare function getWindow(node: Node | Window): Window; */
function getWindow(node) {
  if (node.toString() !== '[object Window]') {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }

  return node;
}

/***/ }),

/***/ 262:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/index.js
var lib = __webpack_require__(263);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/popper.js
var popper = __webpack_require__(217);

// EXTERNAL MODULE: ./node_modules/bootstrap/js/src/util/index.js
var util = __webpack_require__(24);

// EXTERNAL MODULE: ./node_modules/bootstrap/js/src/dom/data.js
var dom_data = __webpack_require__(65);

// EXTERNAL MODULE: ./node_modules/bootstrap/js/src/dom/event-handler.js
var event_handler = __webpack_require__(25);

// CONCATENATED MODULE: ./node_modules/bootstrap/js/src/dom/manipulator.js
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-beta2): dom/manipulator.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

function normalizeData(val) {
  if (val === 'true') {
    return true
  }

  if (val === 'false') {
    return false
  }

  if (val === Number(val).toString()) {
    return Number(val)
  }

  if (val === '' || val === 'null') {
    return null
  }

  return val
}

function normalizeDataKey(key) {
  return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`)
}

const Manipulator = {
  setDataAttribute(element, key, value) {
    element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value)
  },

  removeDataAttribute(element, key) {
    element.removeAttribute(`data-bs-${normalizeDataKey(key)}`)
  },

  getDataAttributes(element) {
    if (!element) {
      return {}
    }

    const attributes = {}

    Object.keys(element.dataset)
      .filter(key => key.startsWith('bs'))
      .forEach(key => {
        let pureKey = key.replace(/^bs/, '')
        pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length)
        attributes[pureKey] = normalizeData(element.dataset[key])
      })

    return attributes
  },

  getDataAttribute(element, key) {
    return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`))
  },

  offset(element) {
    const rect = element.getBoundingClientRect()

    return {
      top: rect.top + document.body.scrollTop,
      left: rect.left + document.body.scrollLeft
    }
  },

  position(element) {
    return {
      top: element.offsetTop,
      left: element.offsetLeft
    }
  }
}

/* harmony default export */ var manipulator = (Manipulator);

// CONCATENATED MODULE: ./node_modules/bootstrap/js/src/dom/selector-engine.js
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-beta2): dom/selector-engine.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const NODE_TEXT = 3

const SelectorEngine = {
  find(selector, element = document.documentElement) {
    return [].concat(...Element.prototype.querySelectorAll.call(element, selector))
  },

  findOne(selector, element = document.documentElement) {
    return Element.prototype.querySelector.call(element, selector)
  },

  children(element, selector) {
    return [].concat(...element.children)
      .filter(child => child.matches(selector))
  },

  parents(element, selector) {
    const parents = []

    let ancestor = element.parentNode

    while (ancestor && ancestor.nodeType === Node.ELEMENT_NODE && ancestor.nodeType !== NODE_TEXT) {
      if (ancestor.matches(selector)) {
        parents.push(ancestor)
      }

      ancestor = ancestor.parentNode
    }

    return parents
  },

  prev(element, selector) {
    let previous = element.previousElementSibling

    while (previous) {
      if (previous.matches(selector)) {
        return [previous]
      }

      previous = previous.previousElementSibling
    }

    return []
  },

  next(element, selector) {
    let next = element.nextElementSibling

    while (next) {
      if (next.matches(selector)) {
        return [next]
      }

      next = next.nextElementSibling
    }

    return []
  }
}

/* harmony default export */ var selector_engine = (SelectorEngine);

// EXTERNAL MODULE: ./node_modules/bootstrap/js/src/base-component.js
var base_component = __webpack_require__(138);

// CONCATENATED MODULE: ./node_modules/bootstrap/js/src/dropdown.js
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-beta2): dropdown.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */










/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const NAME = 'dropdown'
const DATA_KEY = 'bs.dropdown'
const EVENT_KEY = `.${DATA_KEY}`
const DATA_API_KEY = '.data-api'

const ESCAPE_KEY = 'Escape'
const SPACE_KEY = 'Space'
const TAB_KEY = 'Tab'
const ARROW_UP_KEY = 'ArrowUp'
const ARROW_DOWN_KEY = 'ArrowDown'
const RIGHT_MOUSE_BUTTON = 2 // MouseEvent.button value for the secondary button, usually the right button

const REGEXP_KEYDOWN = new RegExp(`${ARROW_UP_KEY}|${ARROW_DOWN_KEY}|${ESCAPE_KEY}`)

const EVENT_HIDE = `hide${EVENT_KEY}`
const EVENT_HIDDEN = `hidden${EVENT_KEY}`
const EVENT_SHOW = `show${EVENT_KEY}`
const EVENT_SHOWN = `shown${EVENT_KEY}`
const EVENT_CLICK = `click${EVENT_KEY}`
const EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`
const EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY}${DATA_API_KEY}`
const EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY}${DATA_API_KEY}`

const CLASS_NAME_DISABLED = 'disabled'
const CLASS_NAME_SHOW = 'show'
const CLASS_NAME_DROPUP = 'dropup'
const CLASS_NAME_DROPEND = 'dropend'
const CLASS_NAME_DROPSTART = 'dropstart'
const CLASS_NAME_NAVBAR = 'navbar'

const SELECTOR_DATA_TOGGLE = '[data-bs-toggle="dropdown"]'
const SELECTOR_FORM_CHILD = '.dropdown form'
const SELECTOR_MENU = '.dropdown-menu'
const SELECTOR_NAVBAR_NAV = '.navbar-nav'
const SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)'

const PLACEMENT_TOP = util["g" /* isRTL */] ? 'top-end' : 'top-start'
const PLACEMENT_TOPEND = util["g" /* isRTL */] ? 'top-start' : 'top-end'
const PLACEMENT_BOTTOM = util["g" /* isRTL */] ? 'bottom-end' : 'bottom-start'
const PLACEMENT_BOTTOMEND = util["g" /* isRTL */] ? 'bottom-start' : 'bottom-end'
const PLACEMENT_RIGHT = util["g" /* isRTL */] ? 'left-start' : 'right-start'
const PLACEMENT_LEFT = util["g" /* isRTL */] ? 'right-start' : 'left-start'

const Default = {
  offset: [0, 2],
  flip: true,
  boundary: 'clippingParents',
  reference: 'toggle',
  display: 'dynamic',
  popperConfig: null
}

const DefaultType = {
  offset: '(array|string|function)',
  flip: 'boolean',
  boundary: '(string|element)',
  reference: '(string|element|object)',
  display: 'string',
  popperConfig: '(null|object|function)'
}

/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class dropdown_Dropdown extends base_component["a" /* default */] {
  constructor(element, config) {
    super(element)

    this._popper = null
    this._config = this._getConfig(config)
    this._menu = this._getMenuElement()
    this._inNavbar = this._detectNavbar()

    this._addEventListeners()
  }

  // Getters

  static get Default() {
    return Default
  }

  static get DefaultType() {
    return DefaultType
  }

  static get DATA_KEY() {
    return DATA_KEY
  }

  // Public

  toggle() {
    if (this._element.disabled || this._element.classList.contains(CLASS_NAME_DISABLED)) {
      return
    }

    const isActive = this._element.classList.contains(CLASS_NAME_SHOW)

    dropdown_Dropdown.clearMenus()

    if (isActive) {
      return
    }

    this.show()
  }

  show() {
    if (this._element.disabled || this._element.classList.contains(CLASS_NAME_DISABLED) || this._menu.classList.contains(CLASS_NAME_SHOW)) {
      return
    }

    const parent = dropdown_Dropdown.getParentFromElement(this._element)
    const relatedTarget = {
      relatedTarget: this._element
    }

    const showEvent = event_handler["a" /* default */].trigger(this._element, EVENT_SHOW, relatedTarget)

    if (showEvent.defaultPrevented) {
      return
    }

    // Totally disable Popper for Dropdowns in Navbar
    if (this._inNavbar) {
      manipulator.setDataAttribute(this._menu, 'popper', 'none')
    } else {
      if (typeof lib === 'undefined') {
        throw new TypeError('Bootstrap\'s dropdowns require Popper (https://popper.js.org)')
      }

      let referenceElement = this._element

      if (this._config.reference === 'parent') {
        referenceElement = parent
      } else if (Object(util["f" /* isElement */])(this._config.reference)) {
        referenceElement = this._config.reference

        // Check if it's jQuery element
        if (typeof this._config.reference.jquery !== 'undefined') {
          referenceElement = this._config.reference[0]
        }
      } else if (typeof this._config.reference === 'object') {
        referenceElement = this._config.reference
      }

      const popperConfig = this._getPopperConfig()
      const isDisplayStatic = popperConfig.modifiers.find(modifier => modifier.name === 'applyStyles' && modifier.enabled === false)

      this._popper = popper["a" /* createPopper */](referenceElement, this._menu, popperConfig)

      if (isDisplayStatic) {
        manipulator.setDataAttribute(this._menu, 'popper', 'static')
      }
    }

    // If this is a touch-enabled device we add extra
    // empty mouseover listeners to the body's immediate children;
    // only needed because of broken event delegation on iOS
    // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
    if ('ontouchstart' in document.documentElement &&
      !parent.closest(SELECTOR_NAVBAR_NAV)) {
      [].concat(...document.body.children)
        .forEach(elem => event_handler["a" /* default */].on(elem, 'mouseover', null, Object(util["i" /* noop */])()))
    }

    this._element.focus()
    this._element.setAttribute('aria-expanded', true)

    this._menu.classList.toggle(CLASS_NAME_SHOW)
    this._element.classList.toggle(CLASS_NAME_SHOW)
    event_handler["a" /* default */].trigger(this._element, EVENT_SHOWN, relatedTarget)
  }

  hide() {
    if (this._element.disabled || this._element.classList.contains(CLASS_NAME_DISABLED) || !this._menu.classList.contains(CLASS_NAME_SHOW)) {
      return
    }

    const relatedTarget = {
      relatedTarget: this._element
    }

    const hideEvent = event_handler["a" /* default */].trigger(this._element, EVENT_HIDE, relatedTarget)

    if (hideEvent.defaultPrevented) {
      return
    }

    if (this._popper) {
      this._popper.destroy()
    }

    this._menu.classList.toggle(CLASS_NAME_SHOW)
    this._element.classList.toggle(CLASS_NAME_SHOW)
    manipulator.removeDataAttribute(this._menu, 'popper')
    event_handler["a" /* default */].trigger(this._element, EVENT_HIDDEN, relatedTarget)
  }

  dispose() {
    super.dispose()
    event_handler["a" /* default */].off(this._element, EVENT_KEY)
    this._menu = null

    if (this._popper) {
      this._popper.destroy()
      this._popper = null
    }
  }

  update() {
    this._inNavbar = this._detectNavbar()
    if (this._popper) {
      this._popper.update()
    }
  }

  // Private

  _addEventListeners() {
    event_handler["a" /* default */].on(this._element, EVENT_CLICK, event => {
      event.preventDefault()
      event.stopPropagation()
      this.toggle()
    })
  }

  _getConfig(config) {
    config = {
      ...this.constructor.Default,
      ...manipulator.getDataAttributes(this._element),
      ...config
    }

    Object(util["j" /* typeCheckConfig */])(NAME, config, this.constructor.DefaultType)

    if (typeof config.reference === 'object' && !Object(util["f" /* isElement */])(config.reference) &&
      typeof config.reference.getBoundingClientRect !== 'function'
    ) {
      // Popper virtual elements require a getBoundingClientRect method
      throw new TypeError(`${NAME.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`)
    }

    return config
  }

  _getMenuElement() {
    return selector_engine.next(this._element, SELECTOR_MENU)[0]
  }

  _getPlacement() {
    const parentDropdown = this._element.parentNode

    if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {
      return PLACEMENT_RIGHT
    }

    if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {
      return PLACEMENT_LEFT
    }

    // We need to trim the value because custom properties can also include spaces
    const isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end'

    if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {
      return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP
    }

    return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM
  }

  _detectNavbar() {
    return this._element.closest(`.${CLASS_NAME_NAVBAR}`) !== null
  }

  _getOffset() {
    const { offset } = this._config

    if (typeof offset === 'string') {
      return offset.split(',').map(val => Number.parseInt(val, 10))
    }

    if (typeof offset === 'function') {
      return popperData => offset(popperData, this._element)
    }

    return offset
  }

  _getPopperConfig() {
    const defaultBsPopperConfig = {
      placement: this._getPlacement(),
      modifiers: [{
        name: 'preventOverflow',
        options: {
          altBoundary: this._config.flip,
          boundary: this._config.boundary
        }
      },
      {
        name: 'offset',
        options: {
          offset: this._getOffset()
        }
      }]
    }

    // Disable Popper if we have a static display
    if (this._config.display === 'static') {
      defaultBsPopperConfig.modifiers = [{
        name: 'applyStyles',
        enabled: false
      }]
    }

    return {
      ...defaultBsPopperConfig,
      ...(typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig)
    }
  }

  // Static

  static dropdownInterface(element, config) {
    let data = dom_data["a" /* default */].getData(element, DATA_KEY)
    const _config = typeof config === 'object' ? config : null

    if (!data) {
      data = new dropdown_Dropdown(element, _config)
    }

    if (typeof config === 'string') {
      if (typeof data[config] === 'undefined') {
        throw new TypeError(`No method named "${config}"`)
      }

      data[config]()
    }
  }

  static jQueryInterface(config) {
    return this.each(function () {
      dropdown_Dropdown.dropdownInterface(this, config)
    })
  }

  static clearMenus(event) {
    if (event && (event.button === RIGHT_MOUSE_BUTTON || (event.type === 'keyup' && event.key !== TAB_KEY))) {
      return
    }

    const toggles = selector_engine.find(SELECTOR_DATA_TOGGLE)

    for (let i = 0, len = toggles.length; i < len; i++) {
      const context = dom_data["a" /* default */].getData(toggles[i], DATA_KEY)
      const relatedTarget = {
        relatedTarget: toggles[i]
      }

      if (event && event.type === 'click') {
        relatedTarget.clickEvent = event
      }

      if (!context) {
        continue
      }

      const dropdownMenu = context._menu
      if (!toggles[i].classList.contains(CLASS_NAME_SHOW)) {
        continue
      }

      if (event && ((event.type === 'click' &&
          /input|textarea/i.test(event.target.tagName)) ||
          (event.type === 'keyup' && event.key === TAB_KEY)) &&
          dropdownMenu.contains(event.target)) {
        continue
      }

      const hideEvent = event_handler["a" /* default */].trigger(toggles[i], EVENT_HIDE, relatedTarget)
      if (hideEvent.defaultPrevented) {
        continue
      }

      // If this is a touch-enabled device we remove the extra
      // empty mouseover listeners we added for iOS support
      if ('ontouchstart' in document.documentElement) {
        [].concat(...document.body.children)
          .forEach(elem => event_handler["a" /* default */].off(elem, 'mouseover', null, Object(util["i" /* noop */])()))
      }

      toggles[i].setAttribute('aria-expanded', 'false')

      if (context._popper) {
        context._popper.destroy()
      }

      dropdownMenu.classList.remove(CLASS_NAME_SHOW)
      toggles[i].classList.remove(CLASS_NAME_SHOW)
      manipulator.removeDataAttribute(dropdownMenu, 'popper')
      event_handler["a" /* default */].trigger(toggles[i], EVENT_HIDDEN, relatedTarget)
    }
  }

  static getParentFromElement(element) {
    return Object(util["c" /* getElementFromSelector */])(element) || element.parentNode
  }

  static dataApiKeydownHandler(event) {
    // If not input/textarea:
    //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
    // If input/textarea:
    //  - If space key => not a dropdown command
    //  - If key is other than escape
    //    - If key is not up or down => not a dropdown command
    //    - If trigger inside the menu => not a dropdown command
    if (/input|textarea/i.test(event.target.tagName) ?
      event.key === SPACE_KEY || (event.key !== ESCAPE_KEY &&
      ((event.key !== ARROW_DOWN_KEY && event.key !== ARROW_UP_KEY) ||
        event.target.closest(SELECTOR_MENU))) :
      !REGEXP_KEYDOWN.test(event.key)) {
      return
    }

    event.preventDefault()
    event.stopPropagation()

    if (this.disabled || this.classList.contains(CLASS_NAME_DISABLED)) {
      return
    }

    const parent = dropdown_Dropdown.getParentFromElement(this)
    const isActive = this.classList.contains(CLASS_NAME_SHOW)

    if (event.key === ESCAPE_KEY) {
      const button = this.matches(SELECTOR_DATA_TOGGLE) ? this : selector_engine.prev(this, SELECTOR_DATA_TOGGLE)[0]
      button.focus()
      dropdown_Dropdown.clearMenus()
      return
    }

    if (!isActive && (event.key === ARROW_UP_KEY || event.key === ARROW_DOWN_KEY)) {
      const button = this.matches(SELECTOR_DATA_TOGGLE) ? this : selector_engine.prev(this, SELECTOR_DATA_TOGGLE)[0]
      button.click()
      return
    }

    if (!isActive || event.key === SPACE_KEY) {
      dropdown_Dropdown.clearMenus()
      return
    }

    const items = selector_engine.find(SELECTOR_VISIBLE_ITEMS, parent).filter(util["h" /* isVisible */])

    if (!items.length) {
      return
    }

    let index = items.indexOf(event.target)

    // Up
    if (event.key === ARROW_UP_KEY && index > 0) {
      index--
    }

    // Down
    if (event.key === ARROW_DOWN_KEY && index < items.length - 1) {
      index++
    }

    // index is -1 if the first keydown is an ArrowUp
    index = index === -1 ? 0 : index

    items[index].focus()
  }
}

/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */

event_handler["a" /* default */].on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE, dropdown_Dropdown.dataApiKeydownHandler)
event_handler["a" /* default */].on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, dropdown_Dropdown.dataApiKeydownHandler)
event_handler["a" /* default */].on(document, EVENT_CLICK_DATA_API, dropdown_Dropdown.clearMenus)
event_handler["a" /* default */].on(document, EVENT_KEYUP_DATA_API, dropdown_Dropdown.clearMenus)
event_handler["a" /* default */].on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {
  event.preventDefault()
  event.stopPropagation()
  dropdown_Dropdown.dropdownInterface(this, 'toggle')
})
event_handler["a" /* default */].on(document, EVENT_CLICK_DATA_API, SELECTOR_FORM_CHILD, e => e.stopPropagation())

/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .Dropdown to jQuery only if jQuery is present
 */

Object(util["a" /* defineJQueryPlugin */])(NAME, dropdown_Dropdown)

/* harmony default export */ var dropdown = (dropdown_Dropdown);


/***/ }),

/***/ 263:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "top", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["u"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "bottom", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["i"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "right", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["s"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "left", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["l"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "auto", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "basePlacements", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["e"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "start", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["t"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "end", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["k"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "clippingParents", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["j"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "viewport", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["w"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "popper", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["p"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reference", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["r"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "variationPlacements", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["v"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "placements", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["o"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "beforeRead", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["g"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "read", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["q"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "afterRead", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["b"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "beforeMain", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["f"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "main", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["m"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "afterMain", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["a"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "beforeWrite", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["h"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "write", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["x"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "afterWrite", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["c"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "modifierPhases", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["n"]; });

/* harmony import */ var _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(113);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "applyStyles", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["a"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "arrow", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["b"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "computeStyles", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["c"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "eventListeners", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flip", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["e"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hide", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["f"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "offset", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["g"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "popperOffsets", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["h"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "preventOverflow", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["i"]; });

/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "popperGenerator", function() { return _createPopper_js__WEBPACK_IMPORTED_MODULE_2__["b"]; });

/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(41);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "detectOverflow", function() { return _createPopper_js__WEBPACK_IMPORTED_MODULE_3__["a"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createPopperBase", function() { return _createPopper_js__WEBPACK_IMPORTED_MODULE_2__["a"]; });

/* harmony import */ var _popper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(217);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createPopper", function() { return _popper_js__WEBPACK_IMPORTED_MODULE_4__["a"]; });

/* harmony import */ var _popper_lite_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(114);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createPopperLite", function() { return _popper_lite_js__WEBPACK_IMPORTED_MODULE_5__["a"]; });


 // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ 264:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// UNUSED EXPORTS: parser

// EXTERNAL MODULE: ./node_modules/jquery/dist/jquery.js-exposed
var jquery_js_exposed = __webpack_require__(0);
var jquery_js_exposed_default = /*#__PURE__*/__webpack_require__.n(jquery_js_exposed);

// CONCATENATED MODULE: ./node_modules/patternslib/src/core/jquery-ext.js
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * @license
 * Patterns @VERSION@ jquery-ext - various jQuery extensions
 *
 * Copyright 2011 Humberto Sermeño
 */

var methods = {
  init: function init(options) {
    var settings = {
      time: 3
      /* time it will wait before moving to "timeout" after a move event */
      ,
      initialTime: 8
      /* time it will wait before first adding the "timeout" class */
      ,
      exceptionAreas: []
      /* IDs of elements that, if the mouse is over them, will reset the timer */

    };
    return this.each(function () {
      var $this = jquery_js_exposed_default()(this),
          data = $this.data("timeout");

      if (!data) {
        if (options) {
          jquery_js_exposed_default.a.extend(settings, options);
        }

        $this.data("timeout", {
          lastEvent: new Date(),
          trueTime: settings.time,
          time: settings.initialTime,
          untouched: true,
          inExceptionArea: false
        });
        $this.on("mouseover.timeout", methods.mouseMoved);
        $this.on("mouseenter.timeout", methods.mouseMoved);
        jquery_js_exposed_default()(settings.exceptionAreas).each(function () {
          $this.find(this).live("mouseover.timeout", {
            parent: $this
          }, methods.enteredException).live("mouseleave.timeout", {
            parent: $this
          }, methods.leftException);
        });
        if (settings.initialTime > 0) $this.timeout("startTimer");else $this.addClass("timeout");
      }
    });
  },
  enteredException: function enteredException(event) {
    var data = event.data.parent.data("timeout");
    data.inExceptionArea = true;
    event.data.parent.data("timeout", data);
    event.data.parent.trigger("mouseover");
  },
  leftException: function leftException(event) {
    var data = event.data.parent.data("timeout");
    data.inExceptionArea = false;
    event.data.parent.data("timeout", data);
  },
  destroy: function destroy() {
    return this.each(function () {
      var $this = jquery_js_exposed_default()(this),
          data = $this.data("timeout");
      jquery_js_exposed_default()(window).off(".timeout");
      data.timeout.remove();
      $this.removeData("timeout");
    });
  },
  mouseMoved: function mouseMoved() {
    var $this = jquery_js_exposed_default()(this),
        data = $this.data("timeout");

    if ($this.hasClass("timeout")) {
      $this.removeClass("timeout");
      $this.timeout("startTimer");
    } else if (data.untouched) {
      data.untouched = false;
      data.time = data.trueTime;
    }

    data.lastEvent = new Date();
    $this.data("timeout", data);
  },
  startTimer: function startTimer() {
    var $this = jquery_js_exposed_default()(this),
        data = $this.data("timeout");

    var fn = function fn() {
      var data = $this.data("timeout");

      if (data && data.lastEvent) {
        if (data.inExceptionArea) {
          setTimeout(fn, Math.floor(data.time * 1000));
        } else {
          var now = new Date();
          var diff = Math.floor(data.time * 1000) - (now - data.lastEvent);

          if (diff > 0) {
            // the timeout has not ocurred, so set the timeout again
            setTimeout(fn, diff + 100);
          } else {
            // timeout ocurred, so set the class
            $this.addClass("timeout");
          }
        }
      }
    };

    setTimeout(fn, Math.floor(data.time * 1000));
  }
};

jquery_js_exposed_default.a.fn.timeout = function (method) {
  if (methods[method]) {
    return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
  } else if (_typeof(method) === "object" || !method) {
    return methods.init.apply(this, arguments);
  } else {
    jquery_js_exposed_default.a.error("Method " + method + " does not exist on jQuery.timeout");
  }
}; // Custom jQuery selector to find elements with scrollbars


jquery_js_exposed_default.a.extend(jquery_js_exposed_default.a.expr[":"], {
  scrollable: function scrollable(element) {
    var vertically_scrollable, horizontally_scrollable;
    if (jquery_js_exposed_default()(element).css("overflow") === "scroll" || jquery_js_exposed_default()(element).css("overflowX") === "scroll" || jquery_js_exposed_default()(element).css("overflowY") === "scroll") return true;
    vertically_scrollable = element.clientHeight < element.scrollHeight && (jquery_js_exposed_default.a.inArray(jquery_js_exposed_default()(element).css("overflowY"), ["scroll", "auto"]) !== -1 || jquery_js_exposed_default.a.inArray(jquery_js_exposed_default()(element).css("overflow"), ["scroll", "auto"]) !== -1);
    if (vertically_scrollable) return true;
    horizontally_scrollable = element.clientWidth < element.scrollWidth && (jquery_js_exposed_default.a.inArray(jquery_js_exposed_default()(element).css("overflowX"), ["scroll", "auto"]) !== -1 || jquery_js_exposed_default.a.inArray(jquery_js_exposed_default()(element).css("overflow"), ["scroll", "auto"]) !== -1);
    return horizontally_scrollable;
  }
}); // Make Visible in scroll

jquery_js_exposed_default.a.fn.makeVisibleInScroll = function (parent_id) {
  var absoluteParent = null;

  if (typeof parent_id === "string") {
    absoluteParent = jquery_js_exposed_default()("#" + parent_id);
  } else if (parent_id) {
    absoluteParent = jquery_js_exposed_default()(parent_id);
  }

  return this.each(function () {
    var $this = jquery_js_exposed_default()(this),
        parent;

    if (!absoluteParent) {
      parent = $this.parents(":scrollable");

      if (parent.length > 0) {
        parent = jquery_js_exposed_default()(parent[0]);
      } else {
        parent = jquery_js_exposed_default()(window);
      }
    } else {
      parent = absoluteParent;
    }

    var elemTop = $this.position().top;
    var elemBottom = $this.height() + elemTop;
    var viewTop = parent.scrollTop();
    var viewBottom = parent.height() + viewTop;

    if (elemTop < viewTop) {
      parent.scrollTop(elemTop);
    } else if (elemBottom > viewBottom - parent.height() / 2) {
      parent.scrollTop(elemTop - (parent.height() - $this.height()) / 2);
    }
  });
}; //Work around warning for jQuery 3.x:
//JQMIGRATE: jQuery.fn.offset() requires an element connected to a document


jquery_js_exposed_default.a.fn.safeOffset = function () {
  var docElem,
      elem = this[0],
      origin = {
    top: 0,
    left: 0
  };

  if (!elem || !elem.nodeType) {
    return origin;
  }

  docElem = (elem.ownerDocument || document).documentElement;

  if (!jquery_js_exposed_default.a.contains(docElem, elem)) {
    return origin;
  }

  return jquery_js_exposed_default.a.fn.offset.apply(this, arguments);
}; //Make absolute location


jquery_js_exposed_default.a.fn.setPositionAbsolute = function (element, offsettop, offsetleft) {
  return this.each(function () {
    // set absolute location for based on the element passed
    // dynamically since every browser has different settings
    var $this = jquery_js_exposed_default()(this);
    var thiswidth = jquery_js_exposed_default()(this).width();
    var pos = element.safeOffset();
    var width = element.width();
    var height = element.height();
    var setleft = pos.left + width - thiswidth + offsetleft;
    var settop = pos.top + height + offsettop;
    $this.css({
      "z-index": 1,
      "position": "absolute",
      "marginLeft": 0,
      "marginTop": 0,
      "left": setleft + "px",
      "top": settop + "px",
      "width": thiswidth
    });
    $this.remove().appendTo("body").show();
  });
};

jquery_js_exposed_default.a.fn.positionAncestor = function (selector) {
  var left = 0;
  var top = 0;
  this.each(function () {
    // check if current element has an ancestor matching a selector
    // and that ancestor is positioned
    var $ancestor = jquery_js_exposed_default()(this).closest(selector);

    if ($ancestor.length && $ancestor.css("position") !== "static") {
      var $child = jquery_js_exposed_default()(this);
      var childMarginEdgeLeft = $child.safeOffset().left - parseInt($child.css("marginLeft"), 10);
      var childMarginEdgeTop = $child.safeOffset().top - parseInt($child.css("marginTop"), 10);
      var ancestorPaddingEdgeLeft = $ancestor.safeOffset().left + parseInt($ancestor.css("borderLeftWidth"), 10);
      var ancestorPaddingEdgeTop = $ancestor.safeOffset().top + parseInt($ancestor.css("borderTopWidth"), 10);
      left = childMarginEdgeLeft - ancestorPaddingEdgeLeft;
      top = childMarginEdgeTop - ancestorPaddingEdgeTop; // we have found the ancestor and computed the position
      // stop iterating

      return false;
    }
  });
  return {
    left: left,
    top: top
  };
};

jquery_js_exposed_default.a.fn.findInclusive = function (selector) {
  return this.find("*").addBack().filter(selector);
};

jquery_js_exposed_default.a.fn.slideIn = function (speed, easing, callback) {
  return this.animate({
    width: "show"
  }, speed, easing, callback);
};

jquery_js_exposed_default.a.fn.slideOut = function (speed, easing, callback) {
  return this.animate({
    width: "hide"
  }, speed, easing, callback);
}; // case-insensitive :contains


jquery_js_exposed_default.a.expr[":"].Contains = function (a, i, m) {
  return jquery_js_exposed_default()(a).text().toUpperCase().indexOf(m[3].toUpperCase()) >= 0;
};

jquery_js_exposed_default.a.fn.scopedFind = function (selector) {
  /*  If the selector starts with an object id do a global search,
   *  otherwise do a local search.
   */
  if (selector.indexOf("#") === 0) {
    return jquery_js_exposed_default()(selector);
  } else {
    return this.find(selector);
  }
};

/* harmony default export */ var jquery_ext = (undefined);
// EXTERNAL MODULE: ./node_modules/regenerator-runtime/runtime.js
var runtime = __webpack_require__(37);

// EXTERNAL MODULE: ./node_modules/underscore/modules/index-all.js + 159 modules
var index_all = __webpack_require__(1);

// EXTERNAL MODULE: ./node_modules/patternslib/src/core/logging.js
var logging = __webpack_require__(28);

// EXTERNAL MODULE: ./node_modules/patternslib/src/core/parser.js
var parser = __webpack_require__(50);

// EXTERNAL MODULE: ./node_modules/patternslib/src/core/registry.js
var registry = __webpack_require__(12);

// CONCATENATED MODULE: ./node_modules/patternslib/src/pat/ajax/ajax.js
/**
 * Patterns ajax - AJAX injection for forms and anchors
 *
 * Copyright 2012-2013 Florian Friesdorf
 * Copyright 2012-2013 Marko Durkovic
 */




var log = logging["a" /* default */].getLogger("pat.ajax");
var ajax_parser = new parser["a" /* default */]("ajax");
ajax_parser.addArgument("url", function ($el) {
  return ($el.is("a") ? $el.attr("href") : $el.is("form") ? $el.attr("action") : "").split("#")[0];
});
jquery_js_exposed_default.a.ajaxSetup({
  // Disable caching of AJAX responses
  cache: false
});
var xhrCount = {};

xhrCount.get = function (a) {
  return this[a] !== undefined ? this[a] : 0;
};

xhrCount.inc = function (a) {
  this[a] = this.get(a) + 1;
  return this.get(a);
};

var _ = {
  name: "ajax",
  trigger: ".pat-ajax",
  parser: ajax_parser,
  init: function init($el) {
    $el.off(".pat-ajax");
    $el.filter("a").on("click.pat-ajax", _.onTriggerEvents);
    $el.filter("form").on("submit.pat-ajax", _.onTriggerEvents).on("click.pat-ajax", "[type=submit]", _.onClickSubmit);
    $el.filter(":not(form,a)").each(function () {
      log.warn("Unsupported element:", this);
    });
    return $el;
  },
  destroy: function destroy($el) {
    $el.off(".pat-ajax");
  },
  onClickSubmit: function onClickSubmit(event) {
    var $form = jquery_js_exposed_default()(event.target).parents("form").first(),
        name = event.target.name,
        value = jquery_js_exposed_default()(event.target).val(),
        data = {};

    if (name) {
      data[name] = value;
    }

    $form.data("pat-ajax.clicked-data", data);
  },
  onTriggerEvents: function onTriggerEvents(event) {
    if (event) {
      event.preventDefault();
    }

    _.request(jquery_js_exposed_default()(this));
  },
  request: function request($el, opts) {
    return $el.each(function () {
      _._request(jquery_js_exposed_default()(this), opts);
    });
  },
  _request: function _request($el, opts) {
    var cfg = _.parser.parse($el, opts),
        onError = function onError(jqxhr, status, error) {
      // error can also stem from a javascript
      // exception, not only errors described in the
      // jqxhr.
      log.error("load error for " + cfg.url + ":", error, jqxhr);
      $el.trigger({
        type: "pat-ajax-error",
        jqxhr: jqxhr
      });
    },
        seqNumber = xhrCount.inc(cfg.url),
        onSuccess = function onSuccess(data, status, jqxhr) {
      log.debug("success: jqxhr:", jqxhr);

      if (seqNumber === xhrCount.get(cfg.url)) {
        // if this url is requested multiple time, only return the last result
        $el.trigger({
          type: "pat-ajax-success",
          jqxhr: jqxhr
        });
      } else {// ignore
      }
    },
        temp = $el.data("pat-ajax.clicked-data"),
        clickedData = temp ? jquery_js_exposed_default.a.param(temp) : "",
        args = {
      context: $el,
      data: [$el.serialize(), clickedData].filter(Boolean).join("&"),
      url: cfg.url,
      method: $el.attr("method") ? $el.attr("method") : "GET"
    };

    if ($el.is("form") && $el.attr("method") && $el.attr("method").toUpperCase() == "POST") {
      var formdata = new FormData($el[0]);

      for (var key in temp) {
        formdata.append(key, temp[key]);
      }

      args["method"] = "POST";
      args["data"] = formdata;
      args["cache"] = false;
      args["contentType"] = false;
      args["processData"] = false;
      args["type"] = "POST";
    }

    $el.removeData("pat-ajax.clicked-data");
    log.debug("request:", args, $el[0]); // Make it happen

    var ajax_deferred = jquery_js_exposed_default.a.ajax(args);
    if (ajax_deferred) ajax_deferred.done(onSuccess).fail(onError);
  }
};
registry["a" /* default */].register(_);
/* harmony default export */ var ajax = (_);
// EXTERNAL MODULE: ./node_modules/patternslib/src/core/dom.js
var dom = __webpack_require__(35);

// EXTERNAL MODULE: ./node_modules/patternslib/src/core/utils.js
var utils = __webpack_require__(13);

// CONCATENATED MODULE: ./node_modules/patternslib/src/pat/inject/inject.js
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

 // for :scrollable for autoLoading-visible

 // needed for ``await`` support









var inject_log = logging["a" /* default */].getLogger("pat.inject");
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var inject_parser = new parser["a" /* default */]("inject");
inject_parser.addArgument("default-selector");
inject_parser.addArgument("target");
inject_parser.addArgument("data-type", "html");
inject_parser.addArgument("next-href");
inject_parser.addArgument("source");
inject_parser.addArgument("trigger", "default", ["default", "autoload", "autoload-visible", "idle"]);
inject_parser.addArgument("delay"); // only used in autoload

inject_parser.addArgument("confirm", "class", ["never", "always", "form-data", "class"]);
inject_parser.addArgument("confirm-message", "Are you sure you want to leave this page?");
inject_parser.addArgument("hooks", [], ["raptor"], true); // After injection, pat-inject will trigger an event for each hook: pat-inject-hook-$(hook)

inject_parser.addArgument("loading-class", "injecting"); // Add a class to the target while content is still loading.

inject_parser.addArgument("executing-class", "executing"); // Add a class to the element while content is still loading.

inject_parser.addArgument("executed-class", "executed"); // Add a class to the element when content is loaded.

inject_parser.addArgument("class"); // Add a class to the injected content.

inject_parser.addArgument("history");
inject_parser.addArgument("push-marker");
inject_parser.addArgument("scroll"); // XXX: this should not be here but the parser would bail on
// unknown parameters and expand/collapsible need to pass the url
// to us

inject_parser.addArgument("url");
var inject = {
  name: "inject",
  trigger: ".raptor-ui .ui-button.pat-inject, a.pat-inject, form.pat-inject, .pat-subform.pat-inject",
  parser: inject_parser,
  init: function init($el, opts) {
    var _this = this;

    var cfgs = this.extractConfig($el, opts);

    if (cfgs.some(function (e) {
      return e.history === "record";
    }) && !("pushState" in history)) {
      // if the injection shall add a history entry and HTML5 pushState
      // is missing, then don't initialize the injection.
      return $el;
    }

    $el.data("pat-inject", cfgs);

    if (cfgs[0].nextHref && cfgs[0].nextHref.indexOf("#") === 0) {
      // In case the next href is an anchor, and it already
      // exists in the page, we do not activate the injection
      // but instead just change the anchors href.
      // XXX: This is used in only one project for linked
      // fullcalendars, it's sanity is wonky and we should
      // probably solve it differently.
      if ($el.is("a") && jquery_js_exposed_default()(cfgs[0].nextHref).length > 0) {
        inject_log.debug("Skipping as next href is anchor, which already exists", cfgs[0].nextHref); // XXX: reconsider how the injection enters exhausted state

        return $el.attr({
          href: (window.location.href.split("#")[0] || "") + cfgs[0].nextHref
        });
      }
    }

    if (cfgs[0].pushMarker) {
      jquery_js_exposed_default()("body").on("push", function (event, data) {
        inject_log.debug("received push message: " + data);

        if (data == cfgs[0].pushMarker) {
          inject_log.debug("re-injecting " + data);

          _this.onTrigger({
            currentTarget: $el[0]
          });
        }
      });
    }

    if (cfgs[0].idleTrigger) {
      this._initIdleTrigger($el, cfgs[0].idleTrigger);
    } else {
      switch (cfgs[0].trigger) {
        case "default":
          cfgs.forEach(function (cfg) {
            if (cfg.delay) {
              cfg.processDelay = cfg.delay;
            }
          }); // setup event handlers

          if ($el.is("form")) {
            $el.on("submit.pat-inject", this.onTrigger.bind(this)).on("click.pat-inject", "[type=submit]", ajax.onClickSubmit).on("click.pat-inject", "[type=submit][formaction], [type=image][formaction]", this.onFormActionSubmit.bind(this));
          } else if ($el.is(".pat-subform")) {
            inject_log.debug("Initializing subform with injection");
          } else {
            $el.on("click.pat-inject", this.onTrigger.bind(this));
          }

          break;

        case "autoload":
          if (!cfgs[0].delay) {
            this.onTrigger({
              currentTarget: $el[0]
            });
          } else {
            // generate UID
            var uid = Math.random().toString(36);
            $el.attr("data-pat-inject-uid", uid); // function to trigger the autoload and mark as triggered

            var delayed_trigger = function delayed_trigger(uid_) {
              // Check if the element has been removed from the dom
              var still_there = jquery_js_exposed_default()("[data-pat-inject-uid='" + uid_ + "']");
              if (still_there.length == 0) return false;
              $el.data("pat-inject-autoloaded", true);

              _this.onTrigger({
                currentTarget: $el[0]
              });

              return true;
            };

            window.setTimeout(delayed_trigger.bind(null, uid), cfgs[0].delay);
          }

          break;

        case "autoload-visible":
          this._initAutoloadVisible($el, cfgs);

          break;

        case "idle":
          this._initIdleTrigger($el, cfgs[0].delay);

          break;
      }
    }

    inject_log.debug("initialised:", $el);
    return $el;
  },
  destroy: function destroy($el) {
    $el.off(".pat-inject");
    $el.data("pat-inject", null);
    return $el;
  },
  onTrigger: function onTrigger(e) {
    /* Injection has been triggered, either via form submission or a
     * link has been clicked.
     */
    var $el = jquery_js_exposed_default()(e.currentTarget);
    var cfgs = $el.data("pat-inject");

    if ($el.is("form")) {
      jquery_js_exposed_default()(cfgs).each(function (i, v) {
        v.params = jquery_js_exposed_default.a.param($el.serializeArray());
      });
    }

    e.preventDefault && e.preventDefault();
    $el.trigger("patterns-inject-triggered");
    this.execute(cfgs, $el);
  },
  onFormActionSubmit: function onFormActionSubmit(e) {
    ajax.onClickSubmit(e); // make sure the submitting button is sent with the form

    var $button = jquery_js_exposed_default()(e.target);
    var formaction = $button.attr("formaction");
    var $form = $button.parents(".pat-inject").first();
    var opts = {
      url: formaction,
      $formaction_button: $button
    };
    var $cfg_node = $button.closest("[data-pat-inject]");
    var cfgs = this.extractConfig($cfg_node, opts);
    jquery_js_exposed_default()(cfgs).each(function (i, v) {
      v.params = jquery_js_exposed_default.a.param($form.serializeArray());
    });
    e.preventDefault();
    $form.trigger("patterns-inject-triggered");
    this.execute(cfgs, $form);
  },
  submitSubform: function submitSubform($sub) {
    /* This method is called from pat-subform
     */
    var $el = $sub.parents("form");
    var cfgs = $sub.data("pat-inject"); // store the params of the subform in the config, to be used by history

    jquery_js_exposed_default()(cfgs).each(function (i, v) {
      v.params = jquery_js_exposed_default.a.param($sub.serializeArray());
    });

    try {
      $el.trigger("patterns-inject-triggered");
    } catch (e) {
      inject_log.error("patterns-inject-triggered", e);
    }

    this.execute(cfgs, $el);
  },
  extractConfig: function extractConfig($el, opts) {
    opts = jquery_js_exposed_default.a.extend({}, opts);
    var cfgs = inject_parser.parse($el, opts, true);
    cfgs.forEach(function (cfg) {
      // opts and cfg have priority, fallback to href/action
      cfg.url = opts.url || cfg.url || $el.attr("href") || $el.attr("action") || $el.parents("form").attr("action") || "";

      if (opts.$formaction_button && (cfg.target || "").startsWith("self")) {
        // In case of button formaction submit with target ``self``,
        // set it. Otherwise the ``form`` will be used as target.
        cfg.$target = opts.$formaction_button;
      } // separate selector from url


      var urlparts = cfg.url.split("#");
      cfg.url = urlparts[0];

      if (urlparts.length > 2) {
        inject_log.warn("Ignoring additional source ids:", urlparts.slice(2));
      }

      if (!cfg.defaultSelector) {
        // if no selector, check for selector as part of original url
        cfg.defaultSelector = urlparts[1] && "#" + urlparts[1] || "body";
      }

      if (cfg.delay) {
        try {
          cfg.delay = utils["a" /* default */].parseTime(cfg.delay);
        } catch (e) {
          inject_log.warn("Invalid delay value: ", cfg.delay);
          cfg.delay = null;
        }
      }

      cfg.processDelay = 0;
    });
    return cfgs;
  },
  elementIsDirty: function elementIsDirty(m) {
    /* Check whether the passed in form element contains a value.
     */
    var data = jquery_js_exposed_default.a.map(m.find(":input:not(select)"), function (i) {
      var val = jquery_js_exposed_default()(i).val();
      return Boolean(val) && val !== jquery_js_exposed_default()(i).attr("placeholder");
    });
    return jquery_js_exposed_default.a.inArray(true, data) !== -1;
  },
  askForConfirmation: function askForConfirmation(cfgs) {
    var _this2 = this;

    /* If configured to do so, show a confirmation dialog to the user.
     * This is done before attempting to perform injection.
     */
    var should_confirm = false;
    var message;

    index_all["default"].each(cfgs, function (cfg) {
      var _confirm = false;

      if (cfg.confirm == "always") {
        _confirm = true;
      } else if (cfg.confirm === "form-data") {
        if (cfg.target != "none") _confirm = _this2.elementIsDirty(cfg.$target);
      } else if (cfg.confirm === "class") {
        if (cfg.target != "none") _confirm = cfg.$target.hasClass("is-dirty");
      }

      if (_confirm) {
        should_confirm = true;
        message = cfg.confirmMessage;
      }
    });

    if (should_confirm) {
      if (!window.confirm(message)) {
        return false;
      }
    }

    return true;
  },
  ensureTarget: function ensureTarget(cfg, $el) {
    /* Make sure that a target element exists and that it's assigned to
     * cfg.$target.
     */
    // make sure target exist
    if (cfg.target === "none") {
      // special case, we don't want to inject anything
      return true;
    }

    cfg.$target = cfg.$target || (cfg.target === "self" ? $el : jquery_js_exposed_default()(cfg.target));

    if (cfg.$target.length === 0) {
      if (!cfg.target) {
        inject_log.error("Need target selector", cfg);
        return false;
      }

      cfg.$target = this.createTarget(cfg.target);
      cfg.$injected = cfg.$target;
    }

    return true;
  },
  verifySingleConfig: function verifySingleConfig($el, url, cfg) {
    /* Verify one of potentially multiple configs (i.e. argument lists).
     *
     * Extract modifiers such as ::element or ::after.
     * Ensure that a target element exists.
     */
    if (cfg.url !== url) {
      // in case of multi-injection, all injections need to use
      // the same url
      inject_log.error("Unsupported different urls for multi-inject");
      return false;
    } // defaults


    cfg.source = cfg.source || cfg.defaultSelector;
    cfg.target = cfg.target || cfg.defaultSelector;

    if (!this.extractModifiers(cfg)) {
      return false;
    }

    if (!this.ensureTarget(cfg, $el)) {
      return false;
    }

    this.listenForFormReset(cfg);
    return true;
  },
  verifyConfig: function verifyConfig(cfgs, $el) {
    /* Verify and post-process all the configurations.
     * Each "config" is an arguments list separated by the &&
     * combination operator.
     *
     * In case of multi-injection, only one URL is allowed, which
     * should be specified in the first config (i.e. arguments list).
     *
     * Verification for each cfg in the array needs to succeed.
     */
    return cfgs.every(index_all["default"].partial(this.verifySingleConfig.bind(this), $el, cfgs[0].url));
  },
  listenForFormReset: function listenForFormReset(cfg) {
    /* if pat-inject is used to populate target in some form and when
     * Cancel button is pressed (this triggers reset event on the
     * form) you would expect to populate with initial placeholder
     */
    if (cfg.target === "none") // Special case, we don't want to display any return value.
      return;
    var $form = cfg.$target.parents("form");

    if ($form.length !== 0 && cfg.$target.data("initial-value") === undefined) {
      cfg.$target.data("initial-value", cfg.$target.html());
      $form.on("reset", function () {
        cfg.$target.html(cfg.$target.data("initial-value"));
      });
    }
  },
  extractModifiers: function extractModifiers(cfg) {
    /* The user can add modifiers to the source and target arguments.
     * Modifiers such as ::element, ::before and ::after.
     * We identifiy and extract these modifiers here.
     */
    var source_re = /^(.*?)(::element)?$/;
    var target_re = /^(.*?)(::element)?(::after|::before)?$/;
    var source_match = source_re.exec(cfg.source);
    var target_match = target_re.exec(cfg.target);
    cfg.source = source_match[1];
    cfg.sourceMod = source_match[2] ? "element" : "content";
    cfg.target = target_match[1];
    var targetMod = target_match[2] ? "element" : "content";
    var targetPosition = (target_match[3] || "::").slice(2); // position relative to target

    if (cfg.loadingClass) {
      cfg.loadingClass += " " + cfg.loadingClass + "-" + targetMod;

      if (targetPosition && cfg.loadingClass) {
        cfg.loadingClass += " " + cfg.loadingClass + "-" + targetPosition;
      }
    }

    cfg.action = targetMod + targetPosition; // Once we start detecting illegal combinations, we'll
    // return false in case of error

    return true;
  },
  createTarget: function createTarget(selector) {
    /* create a target that matches the selector
     *
     * XXX: so far we only support #target and create a div with
     * that id appended to the body.
     */
    if (selector.slice(0, 1) !== "#") {
      inject_log.error("only id supported for non-existing target");
      return null;
    }

    var $target = jquery_js_exposed_default()("<div />").attr({
      id: selector.slice(1)
    });
    jquery_js_exposed_default()("body").append($target);
    return $target;
  },
  stopBubblingFromRemovedElement: function stopBubblingFromRemovedElement($el, cfgs, ev) {
    /* IE8 fix. Stop event from propagating IF $el will be removed
     * from the DOM. With pat-inject, often $el is the target that
     * will itself be replaced with injected content.
     *
     * IE8 cannot handle events bubbling up from an element removed
     * from the DOM.
     *
     * See: http://stackoverflow.com/questions/7114368/why-is-jquery-remove-throwing-attr-exception-in-ie8
     */
    var _iterator = _createForOfIteratorHelper(cfgs),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var cfg = _step.value;
        var sel = cfg.target;

        if ($el.parents(sel).addBack(sel) && !ev.isPropagationStopped()) {
          ev.stopPropagation();
          return;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  },
  _performInjection: function _performInjection(target, $el, $source, cfg, trigger, title) {
    /* Called after the XHR has succeeded and we have a new $source
     * element to inject.
     */
    if (cfg.sourceMod === "content") {
      $source = $source.contents();
    }

    var $src; // $source.clone() does not work with shived elements in IE8

    if (document.all && document.querySelector && !document.addEventListener) {
      $src = $source.map(function (idx, el) {
        return jquery_js_exposed_default()(el.outerHTML)[0];
      });
    } else {
      $src = $source.safeClone();
    }

    $src.findInclusive("img").on("load", function (e) {
      jquery_js_exposed_default()(e.currentTarget).trigger("pat-inject-content-loaded");
    });
    var $injected = cfg.$injected || $src; // Now the injection actually happens.

    if (this._inject(trigger, $src, jquery_js_exposed_default()(target), cfg)) {
      this._afterInjection($el, $injected, cfg);
    } // History support. if subform is submitted, append form params


    var glue = cfg.url.indexOf("?") > -1 ? "&" : "?";

    if (cfg.history === "record" && "pushState" in history) {
      if (cfg.params) {
        history.pushState({
          url: cfg.url + glue + cfg.params
        }, "", cfg.url + glue + cfg.params);
      } else {
        history.pushState({
          url: cfg.url
        }, "", cfg.url);
      } // Also inject title element if we have one


      if (title) this._inject(trigger, title, jquery_js_exposed_default()("title"), {
        action: "element"
      });
    }
  },
  _afterInjection: function _afterInjection($el, $injected, cfg) {
    /* Set a class on the injected elements and fire the
     * patterns-injected event.
     */
    $injected.filter(function (idx, el_) {
      // setting data on textnode fails in IE8
      return el_.nodeType !== TEXT_NODE;
    }).data("pat-injected", {
      origin: cfg.url
    });

    if ($injected.length === 1 && $injected[0].nodeType == TEXT_NODE) {
      // Only one element injected, and it was a text node.
      // So we trigger "patterns-injected" on the parent.
      // The event handler should check whether the
      // injected element and the triggered element are
      // the same.
      $injected.parent().trigger("patterns-injected", [cfg, $el[0], $injected[0]]);
    } else {
      $injected.each(function (idx, el_) {
        // patterns-injected event will be triggered for each injected (non-text) element.
        if (el_.nodeType !== TEXT_NODE) {
          jquery_js_exposed_default()(el_).addClass(cfg["class"]).trigger("patterns-injected", [cfg, $el[0], el_]);
        }
      });
    }

    if (cfg.scroll && cfg.scroll !== "none") {
      var scroll_container = cfg.$target.parents().addBack().filter(":scrollable");
      scroll_container = scroll_container.length ? scroll_container[0] : window; // default for scroll===top

      var top = 0;
      var left = 0;

      if (cfg.scroll !== "top") {
        var scroll_target = cfg.scroll === "target" ? cfg.$target[0] : $injected.filter(cfg.scroll)[0]; // Get the reference element to which against we calculate
        // the relative position of the target.
        // In case of a scroll container of window, we do not have
        // getBoundingClientRect method, so get the body instead.

        var scroll_container_ref = scroll_container === window ? document.body : scroll_container; // Calculate absolute [¹] position difference between
        // scroll_container and scroll_target.
        // Substract the container's border from the scrolling
        // value, as this one isn't respected by
        // getBoundingClientRect [²] and would lead to covered
        // items [³].
        // ¹) so that it doesn't make a difference, if the element
        // is below or above the scrolling container. We just need
        // to know the absolute difference.
        // ²) Calculations are based from the viewport.
        // ³) See:
        //      https://docs.microsoft.com/en-us/previous-versions//hh781509(v=vs.85)
        //      https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect

        left = Math.abs(scroll_target.getBoundingClientRect().left + scroll_container_ref.scrollLeft - scroll_container_ref.getBoundingClientRect().left - utils["a" /* default */].getCSSValue(scroll_container_ref, "border-left-width", true));
        top = Math.abs(scroll_target.getBoundingClientRect().top + scroll_container_ref.scrollTop - scroll_container_ref.getBoundingClientRect().top - utils["a" /* default */].getCSSValue(scroll_container_ref, "border-top-width", true));
      }

      if (scroll_container === window) {
        scroll_container.scrollTo(left, top);
      } else {
        scroll_container.scrollLeft = left;
        scroll_container.scrollTop = top;
      }
    }

    $el.trigger("pat-inject-success");
  },
  _onInjectSuccess: function _onInjectSuccess($el, cfgs, ev) {
    var _this3 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var data, sources$, title;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              data = ev && ev.jqxhr && ev.jqxhr.responseText;

              if (data) {
                _context.next = 4;
                break;
              }

              inject_log.warn("No response content, aborting", ev);
              return _context.abrupt("return");

            case 4:
              if (cfgs[0].source === "none") {
                // Special case, we want to call something, but we don't want to inject anything
                data = "";
              }

              jquery_js_exposed_default.a.each(cfgs[0].hooks || [], function (idx, hook) {
                return $el.trigger("pat-inject-hook-" + hook);
              });

              _this3.stopBubblingFromRemovedElement($el, cfgs, ev);

              _context.next = 9;
              return _this3.callTypeHandler(cfgs[0].dataType, "sources", $el, [cfgs, data, ev]);

            case 9:
              sources$ = _context.sent;

              if (sources$ && sources$[sources$.length - 1] && sources$[sources$.length - 1][0] && sources$[sources$.length - 1][0].nodeName == "TITLE") {
                title = sources$[sources$.length - 1];
              }

              cfgs.forEach(function (cfg, idx1) {
                var perform_inject = function perform_inject() {
                  if (cfg.target != "none") cfg.$target.each(function (idx2, target) {
                    _this3._performInjection(target, $el, sources$[idx1], cfg, ev.target, title);
                  });
                };

                if (cfg.processDelay) {
                  setTimeout(function () {
                    return perform_inject();
                  }, cfg.processDelay);
                } else {
                  perform_inject();
                }
              });

              if (cfgs[0].nextHref && $el.is("a")) {
                // In case next-href is specified the anchor's href will
                // be set to it after the injection is triggered.
                $el.attr({
                  href: cfgs[0].nextHref.replace(/&amp;/g, "&")
                });

                _this3.destroy($el);
              }

              $el.off("pat-ajax-success.pat-inject");
              $el.off("pat-ajax-error.pat-inject");

            case 15:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  _onInjectError: function _onInjectError($el, cfgs, event) {
    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var _document$querySelect;

      var explanation, fallback, status, timestamp, url_params, fallback_url, fallback_response, msg_attr;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              explanation = "";
              status = event.jqxhr.status;
              timestamp = new Date();

              if (status % 100 == 4) {
                explanation = "Sorry! We couldn't find the page to load. Please make a screenshot and send it to support. Thank you!";
              } else if (status % 100 == 5) {
                explanation = "I am very sorry! There was an error at the server. Please make a screenshot and contact support. Thank you!";
              } else if (status == 0) {
                explanation = "It seems, the server is down. Please make a screenshot and contact support. Thank you!";
              }

              url_params = new URLSearchParams(window.location.search);
              fallback_url = (_document$querySelect = document.querySelector("meta[name=pat-inject-status-".concat(status, "]"))) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.getAttribute("content", false);

              if (!(fallback_url && url_params.get("pat-inject-errorhandler.off") === null)) {
                _context2.next = 20;
                break;
              }

              _context2.prev = 7;
              _context2.next = 10;
              return fetch(fallback_url, {
                method: "GET"
              });

            case 10:
              fallback_response = _context2.sent;
              fallback = document.createElement("html");
              _context2.next = 14;
              return fallback_response.text();

            case 14:
              fallback.innerHTML = _context2.sent;
              fallback = fallback.querySelector("body");
              _context2.next = 20;
              break;

            case 18:
              _context2.prev = 18;
              _context2.t0 = _context2["catch"](7);

            case 20:
              // clean up
              cfgs.forEach(function (cfg) {
                if ("$injected" in cfg) cfg.$injected.remove();
              });
              $el.off("pat-ajax-success.pat-inject");
              $el.off("pat-ajax-error.pat-inject");

              if (fallback) {
                document.body.innerHTML = fallback.innerHTML;
              } else {
                msg_attr = fallback || "".concat(explanation, " Status is ").concat(status, " ").concat(event.jqxhr.statusText, ", time was ").concat(timestamp, ". You can click to close this.");
                jquery_js_exposed_default()("body").attr("data-error-message", msg_attr);
                jquery_js_exposed_default()("body").on("click", function () {
                  jquery_js_exposed_default()("body").removeAttr("data-error-message");
                  window.location.href = window.location.href; // reload
                });
              }

            case 24:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[7, 18]]);
    }))();
  },
  execute: function execute(cfgs, $el) {
    /* Actually execute the injection.
     *
     * Either by making an ajax request or by spoofing an ajax
     * request when the content is readily available in the current page.
     */
    // get a kinda deep copy, we scribble on it
    cfgs = cfgs.map(function (cfg) {
      return jquery_js_exposed_default.a.extend({}, cfg);
    });

    if (!this.verifyConfig(cfgs, $el)) {
      return;
    }

    if (!this.askForConfirmation(cfgs)) {
      return;
    }

    if ($el.data("pat-inject-triggered")) {
      // Prevent double triggers;
      return;
    }

    $el.data("pat-inject-triggered", true); // possibility for spinners on targets

    index_all["default"].chain(cfgs).filter(index_all["default"].property("loadingClass")).each(function (cfg) {
      if (cfg.target != "none") cfg.$target.addClass(cfg.loadingClass);
    }); // Put the execute class on the elem that has pat inject on it


    index_all["default"].chain(cfgs).filter(index_all["default"].property("loadingClass")).each(function (cfg) {
      return $el.addClass(cfg.executingClass);
    });

    $el.on("pat-ajax-success.pat-inject", this._onInjectSuccess.bind(this, $el, cfgs));
    $el.on("pat-ajax-error.pat-inject", this._onInjectError.bind(this, $el, cfgs));
    $el.on("pat-ajax-success.pat-inject pat-ajax-error.pat-inject", function () {
      return $el.removeData("pat-inject-triggered");
    });

    if (cfgs[0].url.length) {
      ajax.request($el, {
        url: cfgs[0].url
      });
    } else {
      // If there is no url specified, then content is being fetched
      // from the same page.
      // No need to do an ajax request for this, so we spoof the ajax
      // event.
      $el.trigger({
        type: "pat-ajax-success",
        jqxhr: {
          responseText: jquery_js_exposed_default()("body").html()
        }
      });
    }
  },
  _inject: function _inject(trigger, $source, $target, cfg) {
    // action to jquery method mapping, except for "content"
    // and "element"
    var method = {
      contentbefore: "prepend",
      contentafter: "append",
      elementbefore: "before",
      elementafter: "after"
    }[cfg.action];

    if (cfg.source === "none") {
      $target.replaceWith("");
      return true;
    }

    if ($source.length === 0) {
      inject_log.warn("Aborting injection, source not found:", $source);
      jquery_js_exposed_default()(trigger).trigger("pat-inject-missingSource", {
        url: cfg.url,
        selector: cfg.source
      });
      return false;
    }

    if (cfg.target === "none") // Special case. Don't do anything, we don't want any result
      return true;

    if ($target.length === 0) {
      inject_log.warn("Aborting injection, target not found:", $target);
      jquery_js_exposed_default()(trigger).trigger("pat-inject-missingTarget", {
        selector: cfg.target
      });
      return false;
    }

    if (cfg.action === "content") {
      $target.empty().append($source);
    } else if (cfg.action === "element") {
      $target.replaceWith($source);
    } else {
      $target[method]($source);
    }

    return true;
  },
  _sourcesFromHtml: function _sourcesFromHtml(html, url, sources) {
    var $html = this._parseRawHtml(html, url);

    return sources.map(function (source) {
      if (source === "body") {
        source = "#__original_body";
      }

      if (source === "none") {
        return jquery_js_exposed_default()("<!-- -->");
      }

      var $source = $html.find(source);

      if ($source.length === 0) {
        if (source != "title") {
          inject_log.warn("No source elements for selector:", source, $html);
        }
      }

      $source.find('a[href^="#"]').each(function (idx, el_) {
        var href = el_.getAttribute("href");

        if (href.indexOf("#{1}") !== -1) {
          // We ignore hrefs containing #{1} because they're not
          // valid and only applicable in the context of
          // pat-clone.
          return;
        } // Skip in-document links pointing to an id that is inside
        // this fragment.


        if (href.length === 1) {
          // Special case for top-of-page links
          el_.href = url;
        } else if (!$source.find(href).length) {
          el_.href = url + href;
        }
      });
      return $source;
    });
  },
  _rebaseAttrs: {
    A: "href",
    FORM: "action",
    IMG: "data-pat-inject-rebase-src",
    OBJECT: "data",
    SOURCE: "data-pat-inject-rebase-src",
    VIDEO: "data-pat-inject-rebase-src"
  },
  _rebaseOptions: {
    "calendar": ["url", "event-sources"],
    "collapsible": ["load-content"],
    "date-picker": ["i18n"],
    "datetime-picker": ["i18n"],
    "inject": ["url"]
  },
  _rebaseHTML: function _rebaseHTML(base, html) {
    var _this4 = this;

    if (html === "") {
      // Special case, source is none
      return "";
    }

    var $page = jquery_js_exposed_default()(html.replace(/(\s)(src\s*)=/gi, '$1src="" data-pat-inject-rebase-$2=').trim()).wrapAll("<div>").parent();
    $page.find(Object.keys(this._rebaseAttrs).join(",")).each(function (idx, el_) {
      var $el_ = jquery_js_exposed_default()(el_);
      var attrName = _this4._rebaseAttrs[el_.tagName];
      var value = $el_.attr(attrName);

      if (value && value.slice(0, 2) !== "@@" && value[0] !== "#" && value.slice(0, 7) !== "mailto:" && value.slice(0, 11) !== "javascript:") {
        value = utils["a" /* default */].rebaseURL(base, value);
        $el_.attr(attrName, value);
      }
    });

    for (var _i = 0, _Object$entries = Object.entries(this._rebaseOptions); _i < _Object$entries.length; _i++) {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          pattern_name = _Object$entries$_i[0],
          opts = _Object$entries$_i[1];

      var _iterator2 = _createForOfIteratorHelper(dom["a" /* default */].querySelectorAllAndMe($page[0], "[data-pat-".concat(pattern_name, "]"))),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var el_ = _step2.value;
          var val = el_.getAttribute("data-pat-".concat(pattern_name), false);

          if (val) {
            var pattern = registry["a" /* default */].patterns[pattern_name];
            var pattern_parser = pattern === null || pattern === void 0 ? void 0 : pattern.parser;

            if (!pattern_parser) {
              continue;
            }

            var options = pattern_parser._parse(val);

            var changed = false;

            var _iterator3 = _createForOfIteratorHelper(opts),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var opt = _step3.value;
                var _val = options[opt];

                if (!_val) {
                  continue;
                }

                changed = true;

                if (Array.isArray(_val)) {
                  options[opt] = _val.map(function (it) {
                    return utils["a" /* default */].rebaseURL(base, it);
                  });
                } else {
                  options[opt] = utils["a" /* default */].rebaseURL(base, _val);
                }
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }

            if (changed) {
              el_.setAttribute("data-pat-".concat(pattern_name), JSON.stringify(options));
            }
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    } // XXX: IE8 changes the order of attributes in html. The following
    // lines move data-pat-inject-rebase-src to src.


    $page.find("[data-pat-inject-rebase-src]").each(function (id, el_) {
      var $el = jquery_js_exposed_default()(el_);
      $el.attr("src", $el.attr("data-pat-inject-rebase-src")).removeAttr("data-pat-inject-rebase-src");
    });
    return $page.html().replace(/src="" data-pat-inject-rebase-/g, "").trim();
  },
  _parseRawHtml: function _parseRawHtml(html, url) {
    url = url || ""; // remove script tags and head and replace body by a div

    var title = html.match(/\<title\>(.*)\<\/title\>/);
    var clean_html = html.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, "").replace(/<head\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/head>/gi, "").replace(/<body([^>]*?)>/gi, '<div id="__original_body">').replace(/<\/body([^>]*?)>/gi, "</div>");

    if (title && title.length == 2) {
      clean_html = title[0] + clean_html;
    }

    try {
      clean_html = this._rebaseHTML(url, clean_html);
    } catch (e) {
      inject_log.error("Error rebasing urls", e);
    }

    var $html = jquery_js_exposed_default()("<div/>").html(clean_html);

    if ($html.children().length === 0) {
      inject_log.warn("Parsing html resulted in empty jquery object:", clean_html);
    }

    return $html;
  },
  // XXX: hack
  _initAutoloadVisible: function _initAutoloadVisible($el, cfgs) {
    var _this5 = this;

    if ($el.data("pat-inject-autoloaded")) {
      // ignore executed autoloads
      return false;
    }

    var $scrollable = $el.parents(":scrollable"); // function to trigger the autoload and mark as triggered

    var trigger = function trigger(event) {
      if ($el.data("pat-inject-autoloaded")) {
        return false;
      }

      $el.data("pat-inject-autoloaded", true);

      _this5.onTrigger({
        currentTarget: $el[0]
      });

      event && event.preventDefault();
      return true;
    };

    $el.click(trigger); // Use case 1: a (heigh-constrained) scrollable parent

    if ($scrollable.length) {
      // if scrollable parent and visible -> trigger it
      // we only look at the closest scrollable parent, no nesting
      // Check visibility for scrollable
      var checkVisibility = utils["a" /* default */].debounce(function () {
        if ($el.data("patterns.autoload") || !jquery_js_exposed_default.a.contains(document, $el[0])) {
          return false;
        }

        if (!$el.is(":visible")) {
          return false;
        } // check if the target element still exists. Otherwise halt and catch fire


        var target = ($el.data("pat-inject")[0].target || cfgs[0].defaultSelector).replace(/::element/, "");

        if (target && target !== "self" && jquery_js_exposed_default()(target).length === 0) {
          return false;
        }

        var reltop = $el.safeOffset().top - $scrollable.safeOffset().top - 1000,
            doTrigger = reltop <= $scrollable.innerHeight();

        if (doTrigger) {
          // checkVisibility was possibly installed as a scroll
          // handler and has now served its purpose -> remove
          jquery_js_exposed_default()($scrollable[0]).off("scroll", checkVisibility);
          jquery_js_exposed_default()(window).off("resize.pat-autoload", checkVisibility);
          return trigger();
        }

        return false;
      }, 100);

      if (checkVisibility()) {
        return true;
      } // wait to become visible - again only immediate scrollable parent


      jquery_js_exposed_default()($scrollable[0]).on("scroll", checkVisibility);
      jquery_js_exposed_default()(window).on("resize.pat-autoload", checkVisibility);
    } else {
      // Use case 2: scrolling the entire page
      // Check visibility for non-scrollable
      var _checkVisibility = utils["a" /* default */].debounce(function () {
        if ($el.parents(":scrollable").length) {
          // Because of a resize the element has now a scrollable parent
          // and we should reset the correct event
          jquery_js_exposed_default()(window).off(".pat-autoload", _checkVisibility);
          return _this5._initAutoloadVisible($el);
        }

        if ($el.data("patterns.autoload")) {
          return false;
        }

        if (!$el.is(":visible")) {
          return false;
        }

        if (!utils["a" /* default */].elementInViewport($el[0])) {
          return false;
        } // check if the target element still exists. Otherwise halt and catch fire


        var target = ($el.data("pat-inject")[0].target || cfgs[0].defaultSelector).replace(/::element/, "");

        if (target && target !== "self" && jquery_js_exposed_default()(target).length === 0) {
          return false;
        }

        jquery_js_exposed_default()(window).off(".pat-autoload", _checkVisibility);
        return trigger();
      }, 100);

      if (_checkVisibility()) {
        return true;
      } // https://github.com/w3c/IntersectionObserver/tree/master/polyfill


      if (IntersectionObserver) {
        var observer = new IntersectionObserver(_checkVisibility);
        $el.each(function (idx, el) {
          return observer.observe(el);
        });
      } else {
        jquery_js_exposed_default()(window).on("resize.pat-autoload scroll.pat-autoload", _checkVisibility);
      }
    }

    return false;
  },
  _initIdleTrigger: function _initIdleTrigger($el, delay) {
    var _this6 = this;

    // XXX TODO: handle item removed from DOM
    var timeout = parseInt(delay, 10);
    var timer;

    var onTimeout = function onTimeout() {
      _this6.onTrigger({
        currentTarget: $el[0]
      });

      unsub();
      clearTimeout(timer);
    };

    var onInteraction = utils["a" /* default */].debounce(function () {
      if (!document.body.contains($el[0])) {
        unsub();
        return;
      }

      clearTimeout(timer);
      timer = setTimeout(onTimeout, timeout);
    }, timeout);

    var unsub = function unsub() {
      ["scroll", "resize"].forEach(function (e) {
        return window.removeEventListener(e, onInteraction);
      });
      ["click", "keypress", "keyup", "mousemove", "touchstart", "touchend"].forEach(function (e) {
        return document.removeEventListener(e, onInteraction);
      });
    };

    onInteraction();
    ["scroll", "resize"].forEach(function (e) {
      return window.addEventListener(e, onInteraction);
    });
    ["click", "keypress", "keyup", "mousemove", "touchstart", "touchend"].forEach(function (e) {
      return document.addEventListener(e, onInteraction);
    });
  },
  // XXX: simple so far to see what the team thinks of the idea
  registerTypeHandler: function registerTypeHandler(type, handler) {
    this.handlers[type] = handler;
  },
  callTypeHandler: function callTypeHandler(type, fn, context, params) {
    var _this7 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              type = type || "html";

              if (!(_this7.handlers[type] && jquery_js_exposed_default.a.isFunction(_this7.handlers[type][fn]))) {
                _context3.next = 7;
                break;
              }

              _context3.next = 4;
              return _this7.handlers[type][fn].bind(_this7).apply(void 0, _toConsumableArray(params));

            case 4:
              return _context3.abrupt("return", _context3.sent);

            case 7:
              return _context3.abrupt("return", null);

            case 8:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }))();
  },
  handlers: {
    html: {
      sources: function sources(cfgs, data) {
        var sources = cfgs.map(function (cfg) {
          return cfg.source;
        });
        sources.push("title");
        return this._sourcesFromHtml(data, cfgs[0].url, sources);
      }
    }
  }
};
jquery_js_exposed_default()(document).on("patterns-injected.inject", function (ev, cfg, trigger, injected) {
  /* Listen for the patterns-injected event.
   *
   * Remove the "loading-class" classes from all injection targets and
   * then scan the injected content for new patterns.
   */
  if (cfg && cfg.skipPatInjectHandler) {
    // Allow skipping this handler but still have other handlers in other
    // patterns listen to ``patterns-injected``.
    return;
  }

  if (cfg) {
    cfg.$target.removeClass(cfg.loadingClass); // Remove the executing class, add the executed class to the element with pat.inject on it.

    jquery_js_exposed_default()(trigger).removeClass(cfg.executingClass).addClass(cfg.executedClass);
  }

  if (injected.nodeType !== TEXT_NODE && injected !== COMMENT_NODE) {
    registry["a" /* default */].scan(injected, null, {
      type: "injection",
      element: trigger
    });
    jquery_js_exposed_default()(injected).trigger("patterns-injected-scanned");
  }
});
jquery_js_exposed_default()(window).on("popstate", function (event) {
  // popstate also triggers on traditional anchors
  if (!event.originalEvent.state && "replaceState" in history) {
    try {
      history.replaceState("anchor", "", document.location.href);
    } catch (e) {
      inject_log.debug(e);
    }

    return;
  } // Not only change the URL, also reload the page.


  window.location.reload();
}); // this entry ensures that the initally loaded page can be reached with
// the back button

if ("replaceState" in history) {
  try {
    history.replaceState("pageload", "", document.location.href);
  } catch (e) {
    inject_log.debug(e);
  }
}

registry["a" /* default */].register(inject);
/* harmony default export */ var inject_inject = __webpack_exports__["a"] = (inject);

/***/ }),

/***/ 265:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _core_ui_views_popover__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23);
/* harmony import */ var _upload_upload__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(214);



/* harmony default export */ __webpack_exports__["a"] = (_core_ui_views_popover__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].extend({
  className: "popover upload",
  title: underscore__WEBPACK_IMPORTED_MODULE_0__["default"].template('<%- _t("Upload files") %>'),
  content: underscore__WEBPACK_IMPORTED_MODULE_0__["default"].template('<input type="text" name="upload" style="display:none" />' + '<div class="uploadify-me"></div>'),
  initialize: function initialize(options) {
    var self = this;
    self.app = options.app;
    _core_ui_views_popover__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].prototype.initialize.apply(self, [options]);
    self.currentPathData = null;
    $("body").on("context-info-loaded", function (event, data) {
      self.currentPathData = data;
    });
  },
  render: function render() {
    var self = this;
    _core_ui_views_popover__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].prototype.render.call(this);
    var options = self.app.options.upload;

    options.success = function () {
      self.app.collection.pager();
    };

    options.currentPath = self.app.getCurrentPath();
    options.allowPathSelection = false;
    self.upload = new _upload_upload__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](self.$(".uploadify-me").addClass("pat-upload"), options);
    return this;
  },
  toggle: function toggle(button, e) {
    /* we need to be able to change the current default upload directory */
    _core_ui_views_popover__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].prototype.toggle.apply(this, [button, e]);
    var self = this;

    if (!this.opened) {
      return;
    }

    var currentPath = self.app.getCurrentPath();

    if (self.currentPathData && currentPath !== self.upload.currentPath) {
      self.upload.setPath(currentPath);
    }
  }
}));
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),

/***/ 267:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

var stylesInDom = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDom.length; i++) {
    if (stylesInDom[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var index = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3]
    };

    if (index !== -1) {
      stylesInDom[index].references++;
      stylesInDom[index].updater(obj);
    } else {
      stylesInDom.push({
        identifier: identifier,
        updater: addStyle(obj, options),
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function insertStyleElement(options) {
  var style = document.createElement('style');
  var attributes = options.attributes || {};

  if (typeof attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : undefined;

    if (nonce) {
      attributes.nonce = nonce;
    }
  }

  Object.keys(attributes).forEach(function (key) {
    style.setAttribute(key, attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.media ? "@media ".concat(obj.media, " {").concat(obj.css, "}") : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  } else {
    style.removeAttribute('media');
  }

  if (sourceMap && typeof btoa !== 'undefined') {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    if (Object.prototype.toString.call(newList) !== '[object Array]') {
      return;
    }

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDom[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDom[_index].references === 0) {
        stylesInDom[_index].updater();

        stylesInDom.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ 268:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join('');
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === 'string') {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring

  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || '').concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
  return "/*# ".concat(data, " */");
}

/***/ }),

/***/ 27:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getDocumentElement; });
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18);

function getDocumentElement(element) {
  // $FlowFixMe[incompatible-return]: assume body is always available
  return ((Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__[/* isElement */ "a"])(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
  element.document) || window.document).documentElement;
}

/***/ }),

/***/ 28:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Patterns logging - minimal logging framework
 *
 * Copyright 2012 Simplon B.V.
 */
// source: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind
if (!Function.prototype.bind) {
  Function.prototype.bind = function (oThis) {
    if (typeof this !== "function") {
      // closest thing possible to the ECMAScript 5 internal IsCallable function
      throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
    }

    var aArgs = Array.prototype.slice.call(arguments, 1),
        fToBind = this,
        fNOP = function fNOP() {},
        fBound = function fBound() {
      return fToBind.apply(this instanceof fNOP && oThis ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
    };

    fNOP.prototype = this.prototype;
    fBound.prototype = new fNOP();
    return fBound;
  };
}

var root, // root logger instance
writer; // writer instance, used to output log entries

var Level = {
  DEBUG: 10,
  INFO: 20,
  WARN: 30,
  ERROR: 40,
  FATAL: 50
};

function IEConsoleWriter() {}

IEConsoleWriter.prototype = {
  output: function output(log_name, level, messages) {
    // console.log will magically appear in IE8 when the user opens the
    // F12 Developer Tools, so we have to test for it every time.
    if (typeof window.console === "undefined" || typeof console.log === "undefined") return;
    if (log_name) messages.unshift(log_name + ":");
    var message = messages.join(" "); // Under some conditions console.log will be available but the
    // other functions are missing.

    if (_typeof(console.info) === undefined) {
      var level_name;
      if (level <= Level.DEBUG) level_name = "DEBUG";else if (level <= Level.INFO) level_name = "INFO";else if (level <= Level.WARN) level_name = "WARN";else if (level <= Level.ERROR) level_name = "ERROR";else level_name = "FATAL";
      console.log("[" + level_name + "] " + message);
    } else {
      if (level <= Level.DEBUG) {
        // console.debug exists but is deprecated
        message = "[DEBUG] " + message;
        console.log(message);
      } else if (level <= Level.INFO) console.info(message);else if (level <= Level.WARN) console.warn(message);else console.error(message);
    }
  }
};

function ConsoleWriter() {}

ConsoleWriter.prototype = {
  output: function output(log_name, level, messages) {
    if (log_name) messages.unshift(log_name + ":");

    if (level <= Level.DEBUG) {
      // console.debug exists but is deprecated
      messages.unshift("[DEBUG]");
      console.log.apply(console, messages);
    } else if (level <= Level.INFO) console.info.apply(console, messages);else if (level <= Level.WARN) console.warn.apply(console, messages);else console.error.apply(console, messages);
  }
};

function Logger(name, parent) {
  this._loggers = {};
  this.name = name || "";
  this._parent = parent || null;

  if (!parent) {
    this._enabled = true;
    this._level = Level.WARN;
  }
}

Logger.prototype = {
  getLogger: function getLogger(name) {
    var path = name.split("."),
        root = this,
        route = this.name ? [this.name] : [];

    while (path.length) {
      var entry = path.shift();
      route.push(entry);
      if (!(entry in root._loggers)) root._loggers[entry] = new Logger(route.join("."), root);
      root = root._loggers[entry];
    }

    return root;
  },
  _getFlag: function _getFlag(flag) {
    var context = this;
    flag = "_" + flag;

    while (context !== null) {
      if (context[flag] !== undefined) return context[flag];
      context = context._parent;
    }

    return null;
  },
  setEnabled: function setEnabled(state) {
    this._enabled = !!state;
  },
  isEnabled: function isEnabled() {
    this._getFlag("enabled");
  },
  setLevel: function setLevel(level) {
    if (typeof level === "number") this._level = level;else if (typeof level === "string") {
      level = level.toUpperCase();
      if (level in Level) this._level = Level[level];
    }
  },
  getLevel: function getLevel() {
    return this._getFlag("level");
  },
  log: function log(level, messages) {
    if (!messages.length || !this._getFlag("enabled") || level < this._getFlag("level")) return;
    messages = Array.prototype.slice.call(messages);
    writer.output(this.name, level, messages);
  },
  debug: function debug() {
    this.log(Level.DEBUG, arguments);
  },
  info: function info() {
    this.log(Level.INFO, arguments);
  },
  warn: function warn() {
    this.log(Level.WARN, arguments);
  },
  error: function error() {
    this.log(Level.ERROR, arguments);
  },
  fatal: function fatal() {
    this.log(Level.FATAL, arguments);
  }
};

function getWriter() {
  return writer;
}

function setWriter(w) {
  writer = w;
}

if (!window.console || !window.console.log || typeof window.console.log.apply !== "function") {
  setWriter(new IEConsoleWriter());
} else {
  setWriter(new ConsoleWriter());
}

root = new Logger();
var logconfig = /loglevel(|-[^=]+)=([^&]+)/g,
    match;

while ((match = logconfig.exec(window.location.search)) !== null) {
  var logger = match[1] === "" ? root : root.getLogger(match[1].slice(1));
  logger.setLevel(match[2].toUpperCase());
}

var api = {
  Level: Level,
  getLogger: root.getLogger.bind(root),
  setEnabled: root.setEnabled.bind(root),
  isEnabled: root.isEnabled.bind(root),
  setLevel: root.setLevel.bind(root),
  getLevel: root.getLevel.bind(root),
  debug: root.debug.bind(root),
  info: root.info.bind(root),
  warn: root.warn.bind(root),
  error: root.error.bind(root),
  fatal: root.fatal.bind(root),
  getWriter: getWriter,
  setWriter: setWriter
};
/* harmony default export */ __webpack_exports__["a"] = (api);

/***/ }),

/***/ 29:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getBasePlacement; });

function getBasePlacement(placement) {
  return placement.split('-')[0];
}

/***/ }),

/***/ 3:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _i18n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(112);
/* i18n integration.
 *
 * This is a singleton.
 * Configuration is done on the body tag data-i18ncatalogurl attribute
 *     <body data-i18ncatalogurl="/plonejsi18n">
 *
 *  Or, it'll default to "/plonejsi18n"
 */
 // we're creating a singleton here so we can potentially
// delay the initialization of the translate catalog
// until after the dom is available

var _t = null;

var translate = function translate(msgid, keywords) {
  if (_t === null) {
    var i18n = new _i18n__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]();
    i18n.loadCatalog("widgets");
    _t = i18n.MessageFactory("widgets");
  }

  return _t(msgid, keywords);
};

/* harmony default export */ __webpack_exports__["a"] = (translate);

/***/ }),

/***/ 31:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getNodeName; });
function getNodeName(element) {
  return element ? (element.nodeName || '').toLowerCase() : null;
}

/***/ }),

/***/ 32:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _i18n_wrapper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(20);
/* harmony import */ var backbone__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(backbone__WEBPACK_IMPORTED_MODULE_3__);




/* harmony default export */ __webpack_exports__["a"] = (backbone__WEBPACK_IMPORTED_MODULE_3___default.a.View.extend({
  isUIView: true,
  eventPrefix: "ui",
  template: null,
  idPrefix: "base-",
  appendInContainer: true,
  initialize: function initialize(options) {
    this.options = options;

    for (var key in this.options) {
      this[key] = this.options[key];
    }

    this.options._t = _i18n_wrapper__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"];
  },
  render: function render() {
    this.applyTemplate();
    this.trigger("render", this);
    this.afterRender();

    if (this.options.id) {
      // apply id to element
      this.$el.attr("id", this.idPrefix + this.options.id);
    }

    return this;
  },
  afterRender: function afterRender() {},
  serializedModel: function serializedModel() {
    return this.options;
  },
  applyTemplate: function applyTemplate() {
    if (this.template !== null) {
      var data = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({
        _t: _i18n_wrapper__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]
      }, this.options, this.serializedModel());
      var template = this.template;

      if (typeof template === "string") {
        template = underscore__WEBPACK_IMPORTED_MODULE_1__["default"].template(template);
      }

      this.$el.html(template(data));
    }
  },
  propagateEvent: function propagateEvent(eventName) {
    if (eventName.indexOf(":") > 0) {
      var eventId = eventName.split(":")[0];

      if (this.eventPrefix !== "") {
        if (eventId === this.eventPrefix || eventId === this.eventPrefix + "." + this.id) {
          return true;
        }
      }
    }

    return false;
  },
  uiEventTrigger: function uiEventTrigger(name) {
    var args = [].slice.call(arguments, 0);

    if (this.eventPrefix !== "") {
      args[0] = this.eventPrefix + ":" + name;
      backbone__WEBPACK_IMPORTED_MODULE_3___default.a.View.prototype.trigger.apply(this, args);

      if (this.id) {
        args[0] = this.eventPrefix + "." + this.id + ":" + name;
        backbone__WEBPACK_IMPORTED_MODULE_3___default.a.View.prototype.trigger.apply(this, args);
      }
    }
  }
}));

/***/ }),

/***/ 35:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* Utilities for DOM traversal or navigation */
var DATA_STYLE_DISPLAY = "__patternslib__style__display";

var toNodeArray = function toNodeArray(nodes) {
  // Return an array of DOM nodes
  if (nodes.jquery || nodes instanceof NodeList) {
    // jQuery or document.querySelectorAll
    nodes = _toConsumableArray(nodes);
  } else if (nodes instanceof Array === false) {
    nodes = [nodes];
  }

  return nodes;
};

var querySelectorAllAndMe = function querySelectorAllAndMe(el, selector) {
  // Like querySelectorAll but including the element where it starts from.
  // Returns an Array, not a NodeList
  var all = _toConsumableArray(el.querySelectorAll(selector));

  if (el.matches(selector)) {
    all.unshift(el); // start element should be first.
  }

  return all;
};

var wrap = function wrap(el, wrapper) {
  // Wrap a element with a wrapper element.
  // See: https://stackoverflow.com/a/13169465/1337474
  el.parentNode.insertBefore(wrapper, el);
  wrapper.appendChild(el);
};

var hide = function hide(el) {
  // Hides the element with ``display: none``
  if (el.style.display === "none") {
    // Nothing to do.
    return;
  }

  if (el.style.display) {
    el[DATA_STYLE_DISPLAY] = el.style.display;
  }

  el.style.display = "none";
};

var show = function show(el) {
  // Shows element by removing ``display: none`` and restoring the display
  // value to whatever it was before.
  var val = el[DATA_STYLE_DISPLAY] || null;
  el.style.display = val;
  delete el[DATA_STYLE_DISPLAY];
};

var find_parents = function find_parents(el, selector) {
  var _el$parentNode;

  // Return all direct parents of ``el`` matching ``selector``.
  // This matches against all parents but not the element itself.
  // The order of elements is from the search starting point up to higher
  // DOM levels.
  var parent = (el === null || el === void 0 ? void 0 : (_el$parentNode = el.parentNode) === null || _el$parentNode === void 0 ? void 0 : _el$parentNode.closest) && el.parentNode.closest(selector) || null;
  var ret = [];

  while (parent) {
    var _parent$parentNode;

    ret.push(parent);
    parent = ((_parent$parentNode = parent.parentNode) === null || _parent$parentNode === void 0 ? void 0 : _parent$parentNode.closest(selector)) || null;
  }

  return ret;
};

var find_scoped = function find_scoped(el, selector) {
  // If the selector starts with an object id do a global search,
  // otherwise do a local search.
  return (selector.indexOf("#") === 0 ? document : el).querySelectorAll(selector);
};

var is_visible = function is_visible(el) {
  // Check, if element is visible in DOM.
  // https://stackoverflow.com/a/19808107/1337474
  return el.offsetWidth > 0 && el.offsetHeight > 0;
};

var create_from_string = function create_from_string(string) {
  // Create a DOM element from a string.
  var div = document.createElement("div");
  div.innerHTML = string.trim();
  return div.firstChild;
};

var dom = {
  toNodeArray: toNodeArray,
  querySelectorAllAndMe: querySelectorAllAndMe,
  wrap: wrap,
  hide: hide,
  show: show,
  find_parents: find_parents,
  find_scoped: find_scoped,
  is_visible: is_visible,
  create_from_string: create_from_string
};
/* harmony default export */ __webpack_exports__["a"] = (dom);

/***/ }),

/***/ 36:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getComputedStyle; });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(26);

function getComputedStyle(element) {
  return Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(element).getComputedStyle(element);
}

/***/ }),

/***/ 364:
/***/ (function(module, exports, __webpack_require__) {

// NOTE: Import this file before any other files
// Overwrite path to load resources or use default one.
__webpack_require__.p = window.__patternslib_public_path__ || "/dist/"; // eslint-disable-line no-undef

/***/ }),

/***/ 365:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["jQuery"] = __webpack_require__(366);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(59)))

/***/ }),

/***/ 366:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */
( function( global, factory ) {

	"use strict";

	if (  true && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.5.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( _i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */
( function( window ) {
var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ( {} ).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	pushNative = arr.push,
	push = arr.push,
	slice = arr.slice,

	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[ i ] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
		"ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5]
		// or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
		"*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
			whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
			whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		return nonHex ?

			// Strip the backslash prefix from a non-hex escape sequence
			nonHex :

			// Replace a hexadecimal escape sequence with the encoded Unicode code point
			// Support: IE <=11+
			// For values outside the Basic Multilingual Plane (BMP), manually construct a
			// surrogate pair
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android<4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;

			// Can't trust NodeList.length
			while ( ( target[ j++ ] = els[ i++ ] ) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

				// Support: IE 8 only
				// Exclude object elements
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					if ( newContext !== context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split( "|" ),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[ i ] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( ( cur = cur.nextSibling ) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
					inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem.namespaceURI,
		docElem = ( elem.ownerDocument || elem ).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
	// Safari 4 - 5 only, Opera <=11.6 - 12.x only
	// IE/Edge & older browsers don't support the :scope pseudo-class.
	// Support: Safari 6.0 only
	// Safari 6.0 supports :scope but it's an alias of :root there.
	support.scope = assert( function( el ) {
		docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
		return typeof el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	} );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert( function( el ) {
		el.className = "i";
		return !el.getAttribute( "className" );
	} );

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild( document.createComment( "" ) );
		return !el.getElementsByTagName( "*" ).length;
	} );

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter[ "ID" ] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( ( elem = results[ i++ ] ) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert( function( el ) {

			var input;

			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll( "[selected]" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Support: IE 11+, Edge 15 - 18+
			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
			// Adding a temporary attribute to the document before the selection works
			// around the issue.
			// Interestingly, IE 10 & older don't seem to have the issue.
			input = document.createElement( "input" );
			input.setAttribute( "name", "" );
			el.appendChild( input );
			if ( !el.querySelectorAll( "[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
					whitespace + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push( ":checked" );
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Support: Firefox <=3.6 - 5 only
			// Old Firefox doesn't throw on a badly-escaped identifier.
			el.querySelectorAll( "\\\f" );
			rbuggyQSA.push( "[\\r\\n\\f]" );
		} );

		assert( function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement( "input" );
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll( "[name=d]" ).length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: Opera 10 - 11 only
			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll( "*,:x" );
			rbuggyQSA.push( ",.*:" );
		} );
	}

	if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		assert( function( el ) {

			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		} );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			) );
		} :
		function( a, b ) {
			if ( b ) {
				while ( ( b = b.parentNode ) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a == document || a.ownerDocument == preferredDoc &&
				contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b == document || b.ownerDocument == preferredDoc &&
				contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			return a == document ? -1 :
				b == document ? 1 :
				/* eslint-enable eqeqeq */
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( ( cur = cur.parentNode ) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( ( cur = cur.parentNode ) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[ i ] === bp[ i ] ) {
			i++;
		}

		return i ?

			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[ i ], bp[ i ] ) :

			// Otherwise nodes in our document sort first
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			ap[ i ] == preferredDoc ? -1 :
			bp[ i ] == preferredDoc ? 1 :
			/* eslint-enable eqeqeq */
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

				// As well, disconnected nodes are said to be in a document
				// fragment in IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			( val = elem.getAttributeNode( name ) ) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {

		// If no nodeType, this is expected to be an array
		while ( ( node = elem[ i++ ] ) ) {

			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {

			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}

	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
				match[ 5 ] || "" ).replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

				// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				Sizzle.error( match[ 0 ] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace +
					")" + className + "(" + whitespace + "|$)" ) ) && classCache(
						className, function( elem ) {
							return pattern.test(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute( "class" ) ||
								""
							);
				} );
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				/* eslint-disable max-len */

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
				/* eslint-enable max-len */

			};
		},

		"CHILD": function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || ( node[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								( outerCache[ node.uniqueID ] = {} );

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {

								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												( outerCache[ node.uniqueID ] = {} );

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		"not": markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element (issue #299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		"has": markFunction( function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		} ),

		"contains": markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"selected": function( elem ) {

			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {

			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos[ "empty" ]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		"last": createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		"even": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"odd": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rcombinators.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :

			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] ||
							( outerCache[ elem.uniqueID ] = {} );

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = uniqueCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts(
				selector || "*",
				context.nodeType ? [ context ] : context,
				[]
			),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?

				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

					// If the preceding token was a descendant combinator, insert an implicit any-element `*`
					tokens
						.slice( 0, i - 1 )
						.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache(
			selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace( runescape, funescape ), context ) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
						context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert( function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute( "href" ) === "#";
} ) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	} );
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
} ) ) {
	addHandle( "value", function( elem, _name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	} );
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert( function( el ) {
	return el.getAttribute( "disabled" ) == null;
} ) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
		}
	} );
}

return Sizzle;

} )( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
					dataPriv.get( this, "events" ) || Object.create( null )
				)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();
						return result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px";
				tr.style.height = "1px";
				trChild.style.height = "9px";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = parseInt( trStyle.height ) > 3;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
					jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = (
					dataPriv.get( cur, "events" ) || Object.create( null )
				)[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {

				// Handle: regular nodes (via `this.ownerDocument`), window
				// (via `this.document`) & document (via `this`).
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script
			if ( !isSuccess && jQuery.inArray( "script", s.dataTypes ) > -1 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			if ( typeof props.top === "number" ) {
				props.top += "px";
			}
			if ( typeof props.left === "number" ) {
				props.left += "px";
			}
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ 367:
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./prism-coy.css": [
		586,
		158
	],
	"./prism-dark.css": [
		587,
		159
	],
	"./prism-funky.css": [
		588,
		160
	],
	"./prism-okaidia.css": [
		589,
		161
	],
	"./prism-solarizedlight.css": [
		590,
		162
	],
	"./prism-tomorrow.css": [
		591,
		163
	],
	"./prism-twilight.css": [
		592,
		164
	],
	"./prism.css": [
		593,
		165
	]
};
function webpackAsyncContext(req) {
	if(!__webpack_require__.o(map, req)) {
		return Promise.resolve().then(function() {
			var e = new Error("Cannot find module '" + req + "'");
			e.code = 'MODULE_NOT_FOUND';
			throw e;
		});
	}

	var ids = map[req], id = ids[0];
	return __webpack_require__.e(ids[1]).then(function() {
		return __webpack_require__.t(id, 7);
	});
}
webpackAsyncContext.keys = function webpackAsyncContextKeys() {
	return Object.keys(map);
};
webpackAsyncContext.id = 367;
module.exports = webpackAsyncContext;

/***/ }),

/***/ 368:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {!function($,undefined){function dayAm(year,month){return new Date(year,month+1,0).getDate()}function zeropad(val,len){for(val=""+val,len=len||2;val.length<len;)val="0"+val;return val}function format(formatter,date,text,lang){var d=date.getDate(),D=date.getDay(),m=date.getMonth(),y=date.getFullYear(),flags={d:d,dd:zeropad(d),ddd:LABELS[lang].shortDays[D],dddd:LABELS[lang].days[D],m:m+1,mm:zeropad(m+1),mmm:LABELS[lang].shortMonths[m],mmmm:LABELS[lang].months[m],yy:String(y).slice(2),yyyy:y},ret=formatters[formatter](text,date,flags,lang);return tmpTag.html(ret).html()}function integer(val){return parseInt(val,10)}function isSameDay(d1,d2){return d1.getFullYear()===d2.getFullYear()&&d1.getMonth()==d2.getMonth()&&d1.getDate()==d2.getDate()}function parseDate(val){if(val!==undefined){if(val.constructor==Date)return val;if("string"==typeof val){var els=val.split("-");if(3==els.length)return new Date(integer(els[0]),integer(els[1])-1,integer(els[2]));if(!/^-?\d+$/.test(val))return;val=integer(val)}var date=new Date;return date.setDate(date.getDate()+val),date}}function Dateinput(input,conf){function select(date,conf,e){return input.attr("readonly")?void self.hide(e):(value=date,currYear=date.getFullYear(),currMonth=date.getMonth(),currDay=date.getDate(),e||(e=$.Event("api")),"click"!=e.type||/msie/.test(navigator.userAgent.toLowerCase())||input.focus(),e.type="beforeChange",fire.trigger(e,[date]),void(e.isDefaultPrevented()||(input.val(format(conf.formatter,date,conf.format,conf.lang)),e.type="change",e.target=input[0],fire.trigger(e),input.data("date",date),self.hide(e))))}function onShow(ev){ev.type="onShow",fire.trigger(ev),$(document).on("keydown.d",function(e){if(e.ctrlKey)return!0;var key=e.keyCode;if(8==key||46==key)return input.val(""),self.hide(e);if(27==key||9==key)return self.hide(e);if($(KEYS).index(key)>=0){if(!opened)return self.show(e),e.preventDefault();var days=$("#"+css.weeks+" a"),el=$("."+css.focus),index=days.index(el);return el.removeClass(css.focus),74==key||40==key?index+=7:75==key||38==key?index-=7:76==key||39==key?index+=1:(72==key||37==key)&&(index-=1),index>41?(self.addMonth(),el=$("#"+css.weeks+" a:eq("+(index-42)+")")):0>index?(self.addMonth(-1),el=$("#"+css.weeks+" a:eq("+(index+42)+")")):el=days.eq(index),el.addClass(css.focus),e.preventDefault()}return 34==key?self.addMonth():33==key?self.addMonth(-1):36==key?self.today():(13==key&&($(e.target).is("select")||$("."+css.focus).click()),$([16,17,18,9]).index(key)>=0)}),$(document).on("click.d",function(e){var el=e.target;el.id==css.root||$(el).parents("#"+css.root).length||el==input[0]||trigger&&el==trigger[0]||self.hide(e)})}var trigger,pm,nm,currYear,currMonth,currDay,opened,original,self=this,now=new Date,yearNow=now.getFullYear(),css=conf.css,labels=LABELS[conf.lang],root=$("#"+css.root),title=root.find("#"+css.title),value=input.attr("data-value")||conf.value||input.val(),min=input.attr("min")||conf.min,max=input.attr("max")||conf.max;if(0===min&&(min="0"),value=parseDate(value)||now,min=parseDate(min||new Date(yearNow+conf.yearRange[0],1,1)),max=parseDate(max||new Date(yearNow+conf.yearRange[1]+1,1,-1)),!labels)throw"Dateinput: invalid language: "+conf.lang;if("date"==input.attr("type")){var original=input.clone(),def=original.wrap("<div/>").parent().html(),clone=$(def.replace(/type/i,"type=text data-orig-type"));conf.value&&clone.val(conf.value),input.replaceWith(clone),input=clone}input.addClass(css.input);var fire=input.add(self);if(!root.length){if(root=$("<div><div><a/><div/><a/></div><div><div/><div/></div></div>").hide().css({position:"absolute"}).attr("id",css.root),root.children().eq(0).attr("id",css.head).end().eq(1).attr("id",css.body).children().eq(0).attr("id",css.days).end().eq(1).attr("id",css.weeks).end().end().end().find("a").eq(0).attr("id",css.prev).end().eq(1).attr("id",css.next),title=root.find("#"+css.head).find("div").attr("id",css.title),conf.selectors){var monthSelector=$("<select/>").attr("id",css.month),yearSelector=$("<select/>").attr("id",css.year);title.html(monthSelector.add(yearSelector))}for(var days=root.find("#"+css.days),d=0;7>d;d++)days.append($("<span/>").text(labels.shortDays[(d+conf.firstDay)%7]));$("body").append(root)}conf.trigger&&(trigger=$("<a/>").attr("href","#").addClass(css.trigger).click(function(e){return conf.toggle?self.toggle():self.show(),e.preventDefault()}).insertAfter(input));var weeks=root.find("#"+css.weeks);yearSelector=root.find("#"+css.year),monthSelector=root.find("#"+css.month),$.extend(self,{show:function(e){if(!input.attr("disabled")&&!opened&&(e=e||$.Event(),e.type="onBeforeShow",fire.trigger(e),!e.isDefaultPrevented())){$.each(instances,function(){this.hide()}),opened=!0,monthSelector.off("change").change(function(){self.setValue(integer(yearSelector.val()),integer($(this).val()))}),yearSelector.off("change").change(function(){self.setValue(integer($(this).val()),integer(monthSelector.val()))}),pm=root.find("#"+css.prev).off("click").click(function(){return pm.hasClass(css.disabled)||self.addMonth(-1),!1}),nm=root.find("#"+css.next).off("click").click(function(){return nm.hasClass(css.disabled)||self.addMonth(),!1}),self.setValue(value);var pos=input.offset();return/iPad/i.test(navigator.userAgent)&&(pos.top-=$(window).scrollTop()),root.css({top:pos.top+input.outerHeight(!0)+conf.offset[0],left:pos.left+conf.offset[1]}),conf.speed?root.show(conf.speed,function(){onShow(e)}):(root.show(),onShow(e)),self}},setValue:function(year,month,day){var date=integer(month)>=-1?new Date(integer(year),integer(month),integer(day==undefined||isNaN(day)?1:day)):year||value;if(min>date?date=min:date>max&&(date=max),"string"==typeof year&&(date=parseDate(year)),year=date.getFullYear(),month=date.getMonth(),day=date.getDate(),-1==month?(month=11,year--):12==month&&(month=0,year++),!opened)return select(date,conf),self;currMonth=month,currYear=year,currDay=day;var week,tmp=new Date(year,month,1-conf.firstDay),begin=tmp.getDay(),days=dayAm(year,month),prevDays=dayAm(year,month-1);if(conf.selectors){monthSelector.empty(),$.each(labels.months,function(i,m){min<new Date(year,i+1,1)&&max>new Date(year,i,0)&&monthSelector.append($("<option/>").html(m).attr("value",i))}),yearSelector.empty();for(var yearNow=now.getFullYear(),i=yearNow+conf.yearRange[0];i<yearNow+conf.yearRange[1];i++)min<new Date(i+1,0,1)&&max>new Date(i,0,0)&&yearSelector.append($("<option/>").text(i));monthSelector.val(month),yearSelector.val(year)}else title.html(labels.months[month]+" "+year);weeks.empty(),pm.add(nm).removeClass(css.disabled);for(var a,num,j=begin?0:-7;(begin?42:35)>j;j++)a=$("<a/>"),j%7===0&&(week=$("<div/>").addClass(css.week),weeks.append(week)),begin>j?(a.addClass(css.off),num=prevDays-begin+j+1,date=new Date(year,month-1,num)):j>=begin+days?(a.addClass(css.off),num=j-days-begin+1,date=new Date(year,month+1,num)):(num=j-begin+1,date=new Date(year,month,num),isSameDay(value,date)?a.attr("id",css.current).addClass(css.focus):isSameDay(now,date)&&a.attr("id",css.today)),min&&min>date&&a.add(pm).addClass(css.disabled),max&&date>max&&a.add(nm).addClass(css.disabled),a.attr("href","#"+num).text(num).data("date",date),week.append(a);return weeks.find("a").click(function(e){var el=$(this);return el.hasClass(css.disabled)||($("#"+css.current).removeAttr("id"),el.attr("id",css.current),select(el.data("date"),conf,e)),!1}),css.sunday&&weeks.find("."+css.week).each(function(){var beg=conf.firstDay?7-conf.firstDay:0;$(this).children().slice(beg,beg+1).addClass(css.sunday)}),self},setMin:function(val,fit){return min=parseDate(val),fit&&min>value&&self.setValue(min),self},setMax:function(val,fit){return max=parseDate(val),fit&&value>max&&self.setValue(max),self},today:function(){return self.setValue(now)},addDay:function(amount){return this.setValue(currYear,currMonth,currDay+(amount||1))},addMonth:function(amount){var targetMonth=currMonth+(amount||1),daysInTargetMonth=dayAm(currYear,targetMonth),targetDay=daysInTargetMonth>=currDay?currDay:daysInTargetMonth;return this.setValue(currYear,targetMonth,targetDay)},addYear:function(amount){return this.setValue(currYear+(amount||1),currMonth,currDay)},destroy:function(){input.add(document).off("click.d keydown.d"),root.add(trigger).remove(),input.removeData("dateinput").removeClass(css.input),original&&input.replaceWith(original)},hide:function(e){if(opened){if(e=$.Event(),e.type="onHide",fire.trigger(e),e.isDefaultPrevented())return;$(document).off("click.d keydown.d"),root.hide(),opened=!1}return self},toggle:function(){return self.isOpen()?self.hide():self.show()},getConf:function(){return conf},getInput:function(){return input},getCalendar:function(){return root},getValue:function(dateFormat){return dateFormat?format(conf.formatter,value,dateFormat,conf.lang):value},isOpen:function(){return opened}}),$.each(["onBeforeShow","onShow","change","onHide"],function(i,name){$.isFunction(conf[name])&&$(self).on(name,conf[name]),self[name]=function(fn){return fn&&$(self).on(name,fn),self}}),conf.editable||input.on("focus.d click.d",self.show).keydown(function(e){var key=e.keyCode;return!opened&&$(KEYS).index(key)>=0?(self.show(e),e.preventDefault()):((8==key||46==key)&&input.val(""),e.shiftKey||e.ctrlKey||e.altKey||9==key?!0:e.preventDefault())}),parseDate(input.val())&&select(value,conf)}$.tools=$.tools||{version:"@VERSION"};var tool,instances=[],formatters={},KEYS=[75,76,38,39,74,72,40,37],LABELS={};tool=$.tools.dateinput={conf:{format:"mm/dd/yy",formatter:"default",selectors:!1,yearRange:[-5,5],lang:"en",offset:[0,0],speed:0,firstDay:0,min:undefined,max:undefined,trigger:0,toggle:0,editable:0,css:{prefix:"cal",input:"date",root:0,head:0,title:0,prev:0,next:0,month:0,year:0,days:0,body:0,weeks:0,today:0,current:0,week:0,off:0,sunday:0,focus:0,disabled:0,trigger:0}},addFormatter:function(name,fn){formatters[name]=fn},localize:function(language,labels){$.each(labels,function(key,val){labels[key]=val.split(",")}),LABELS[language]=labels}},tool.localize("en",{months:"January,February,March,April,May,June,July,August,September,October,November,December",shortMonths:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec",days:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday",shortDays:"Sun,Mon,Tue,Wed,Thu,Fri,Sat"});var tmpTag=$("<a/>");tool.addFormatter("default",function(text,date,flags){return text.replace(/d{1,4}|m{1,4}|yy(?:yy)?|"[^"]*"|'[^']*'/g,function($0){return $0 in flags?flags[$0]:$0})}),tool.addFormatter("prefixed",function(text,date,flags){return text.replace(/%(d{1,4}|m{1,4}|yy(?:yy)?|"[^"]*"|'[^']*')/g,function($0,$1){return $1 in flags?flags[$1]:$0})}),$.expr[":"].date=function(el){var type=el.getAttribute("type");return type&&"date"==type||!!$(el).data("dateinput")},$.fn.dateinput=function(conf){if(this.data("dateinput"))return this;conf=$.extend(!0,{},tool.conf,conf),$.each(conf.css,function(key,val){val||"prefix"==key||(conf.css[key]=(conf.css.prefix||"")+(val||key))});var els;return this.each(function(){var el=new Dateinput($(this),conf);instances.push(el);var input=el.getInput().data("dateinput",el);els=els?els.add(input):input}),els?els:this}}(jQuery);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),

/***/ 369:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {/**
 * @license 
 * jQuery Tools @VERSION Overlay - Overlay base. Extend it.
 * 
 * NO COPYRIGHTS OR LICENSES. DO WHAT YOU LIKE.
 * 
 * http://flowplayer.org/tools/overlay/
 *
 * Since: March 2008
 * Date: @DATE 
 */
(function($) { 

	// static constructs
	$.tools = $.tools || {version: '@VERSION'};
	
	$.tools.overlay = {
		
		addEffect: function(name, loadFn, closeFn) {
			effects[name] = [loadFn, closeFn];	
		},
	
		conf: {  
			close: null,	
			closeOnClick: true,
			closeOnEsc: true,			
			closeSpeed: 'fast',
			effect: 'default',
			
			// since 1.2. fixed positioning not supported by IE6
			fixed: !/msie/.test(navigator.userAgent.toLowerCase()) || navigator.appVersion > 6, 
			
			left: 'center',		
			load: false, // 1.2
			mask: null,  
			oneInstance: true,
			speed: 'normal',
			target: null, // target element to be overlayed. by default taken from [rel]
			top: '10%'
		}
	};

	
	var instances = [], effects = {};
		
	// the default effect. nice and easy!
	$.tools.overlay.addEffect('default', 
		
		/* 
			onLoad/onClose functions must be called otherwise none of the 
			user supplied callback methods won't be called
		*/
		function(pos, onLoad) {
			
			var conf = this.getConf(),
				 w = $(window);				 
				
			if (!conf.fixed)  {
				pos.top += w.scrollTop();
				pos.left += w.scrollLeft();
			} 
				
			pos.position = conf.fixed ? 'fixed' : 'absolute';
			this.getOverlay().css(pos).fadeIn(conf.speed, onLoad); 
			
		}, function(onClose) {
			this.getOverlay().fadeOut(this.getConf().closeSpeed, onClose); 			
		}		
	);		

	
	function Overlay(trigger, conf) {		
		
		// private variables
		var self = this,
			 fire = trigger.add(self),
			 w = $(window), 
			 closers,            
			 overlay,
			 opened,
			 maskConf = $.tools.expose && (conf.mask || conf.expose),
			 uid = Math.random().toString().slice(10);		
		
			 
		// mask configuration
		if (maskConf) {			
			if (typeof maskConf == 'string') { maskConf = {color: maskConf}; }
			maskConf.closeOnClick = maskConf.closeOnEsc = false;
		}			 
		 
		// get overlay and trigger
		var jq = conf.target || trigger.attr("rel");
		overlay = jq ? $(jq) :  false || trigger;	
		
		// overlay not found. cannot continue
		if (!overlay.length) { throw "Could not find Overlay: " + jq; }
		
		// trigger's click event
		if (trigger && trigger.index(overlay) == -1) {
			trigger.click(function(e) {				
				self.load(e);
				return e.preventDefault();
			});
		}   			
		
		// API methods  
		$.extend(self, {

			load: function(e) {
				
				// can be opened only once
				if (self.isOpened()) { return self; }
				
				// find the effect
		 		var eff = effects[conf.effect];
		 		if (!eff) { throw "Overlay: cannot find effect : \"" + conf.effect + "\""; }
				
				// close other instances?
				if (conf.oneInstance) {
					$.each(instances, function() {
						this.close(e);
					});
				}
				
				// onBeforeLoad
				e = e || $.Event();
				e.type = "onBeforeLoad";
				fire.trigger(e);				
				if (e.isDefaultPrevented()) { return self; }				

				// opened
				opened = true;
				
				// possible mask effect
				if (maskConf) { $(overlay).expose(maskConf); }				
				
				// position & dimensions 
				var top = conf.top,					
					 left = conf.left,
					 oWidth = overlay.outerWidth(true),
					 oHeight = overlay.outerHeight(true); 
				
				if (typeof top == 'string')  {
					top = top == 'center' ? Math.max((w.height() - oHeight) / 2, 0) : 
						parseInt(top, 10) / 100 * w.height();			
				}				
				
				if (left == 'center') { left = Math.max((w.width() - oWidth) / 2, 0); }

				
		 		// load effect  		 		
				eff[0].call(self, {top: top, left: left}, function() {					
					if (opened) {
						e.type = "onLoad";
						fire.trigger(e);
					}
				}); 				

				// mask.click closes overlay
				if (maskConf && conf.closeOnClick) {
					$.mask.getMask().one("click", self.close); 
				}
				
				// when window is clicked outside overlay, we close
				if (conf.closeOnClick) {
					$(document).on("click." + uid, function(e) { 
						if (!$(e.target).parents(overlay).length) { 
							self.close(e); 
						}
					});						
				}						
			
				// keyboard::escape
				if (conf.closeOnEsc) { 

					// one callback is enough if multiple instances are loaded simultaneously
					$(document).on("keydown." + uid, function(e) {
						if (e.keyCode == 27) { 
							self.close(e);	 
						}
					});			
				}

				
				return self; 
			}, 
			
			close: function(e) {

				if (!self.isOpened()) { return self; }
				
				e = e || $.Event();
				e.type = "onBeforeClose";
				fire.trigger(e);				
				if (e.isDefaultPrevented()) { return; }				
				
				opened = false;
				
				// close effect
				effects[conf.effect][1].call(self, function() {
					e.type = "onClose";
					fire.trigger(e); 
				});
				
				// unbind the keyboard / clicking actions
				$(document).off("click." + uid + " keydown." + uid);		  
				
				if (maskConf) {
					$.mask.close();		
				}
				 
				return self;
			}, 
			
			getOverlay: function() {
				return overlay;	
			},
			
			getTrigger: function() {
				return trigger;	
			},
			
			getClosers: function() {
				return closers;	
			},			

			isOpened: function()  {
				return opened;
			},
			
			// manipulate start, finish and speeds
			getConf: function() {
				return conf;	
			}			
			
		});
		
		// callbacks	
		$.each("onBeforeLoad,onStart,onLoad,onBeforeClose,onClose".split(","), function(i, name) {
				
			// configuration
			if ($.isFunction(conf[name])) { 
				$(self).on(name, conf[name]); 
			}

			// API
			self[name] = function(fn) {
				if (fn) { $(self).on(name, fn); }
				return self;
			};
		});
		
		// close button
		closers = overlay.find(conf.close || ".close");		
		
		if (!closers.length && !conf.close) {
			closers = $('<a class="close"></a>');
			overlay.prepend(closers);	
		}		
		
		closers.click(function(e) { 
			self.close(e);  
		});	
		
		// autoload
		if (conf.load) { self.load(); }
		
	}
	
	// jQuery plugin initialization
	$.fn.overlay = function(conf) {   
		
		// already constructed --> return API
		var el = this.data("overlay");
		if (el) { return el; }	  		 
		
		if ($.isFunction(conf)) {
			conf = {onBeforeLoad: conf};	
		}

		conf = $.extend(true, {}, $.tools.overlay.conf, conf);
		
		this.each(function() {		
			el = new Overlay($(this), conf);
			instances.push(el);
			$(this).data("overlay", el);	
		});
		
		return conf.api ? el: this;		
	}; 
	
})(jQuery);



/**
 * @license 
 * jQuery Tools @VERSION Scrollable - New wave UI design
 * 
 * NO COPYRIGHTS OR LICENSES. DO WHAT YOU LIKE.
 * 
 * http://flowplayer.org/tools/scrollable.html
 *
 * Since: March 2008
 * Date: @DATE 
 */
(function($) { 

	// static constructs
	$.tools = $.tools || {version: '@VERSION'};
	
	$.tools.scrollable = {
		
		conf: {	
			activeClass: 'active',
			circular: false,
			clonedClass: 'cloned',
			disabledClass: 'disabled',
			easing: 'swing',
			initialIndex: 0,
			item: '> *',
			items: '.items',
			keyboard: true,
			mousewheel: false,
			next: '.next',   
			prev: '.prev', 
			size: 1,
			speed: 400,
			vertical: false,
			touch: true,
			wheelSpeed: 0
		} 
	};
					
	// get hidden element's width or height even though it's hidden
	function dim(el, key) {
		var v = parseInt(el.css(key), 10);
		if (v) { return v; }
		var s = el[0].currentStyle; 
		return s && s.width && parseInt(s.width, 10);	
	}

	function find(root, query) { 
		var el = $(query);
		return el.length < 2 ? el : root.parent().find(query);
	}
	
	var current;		
	
	// constructor
	function Scrollable(root, conf) {   
		
		// current instance
		var self = this, 
			 fire = root.add(self),
			 itemWrap = root.children(),
			 index = 0,
			 vertical = conf.vertical;
				
		if (!current) { current = self; } 
		if (itemWrap.length > 1) { itemWrap = $(conf.items, root); }
		
		
		// in this version circular not supported when size > 1
		if (conf.size > 1) { conf.circular = false; } 
		
		// methods
		$.extend(self, {
				
			getConf: function() {
				return conf;	
			},			
			
			getIndex: function() {
				return index;	
			}, 

			getSize: function() {
				return self.getItems().size();	
			},

			getNaviButtons: function() {
				return prev.add(next);	
			},
			
			getRoot: function() {
				return root;	
			},
			
			getItemWrap: function() {
				return itemWrap;	
			},
			
			getItems: function() {
				return itemWrap.find(conf.item).not("." + conf.clonedClass);	
			},
							
			move: function(offset, time) {
				return self.seekTo(index + offset, time);
			},
			
			next: function(time) {
				return self.move(conf.size, time);	
			},
			
			prev: function(time) {
				return self.move(-conf.size, time);	
			},
			
			begin: function(time) {
				return self.seekTo(0, time);	
			},
			
			end: function(time) {
				return self.seekTo(self.getSize() -1, time);	
			},	
			
			focus: function() {
				current = self;
				return self;
			},
			
			addItem: function(item) {
				item = $(item);
				
				if (!conf.circular)  {
					itemWrap.append(item);
					next.removeClass("disabled");
					
				} else {
					itemWrap.children().last().before(item);
					itemWrap.children().first().replaceWith(item.clone().addClass(conf.clonedClass)); 						
				}
				
				fire.trigger("onAddItem", [item]);
				return self;
			},
			
			
			/* all seeking functions depend on this */		
			seekTo: function(i, time, fn) {	
				
				// ensure numeric index
				if (!i.jquery) { i *= 1; }
				
				// avoid seeking from end clone to the beginning
				if (conf.circular && i === 0 && index == -1 && time !== 0) { return self; }
				
				// check that index is sane				
				if (!conf.circular && i < 0 || i > self.getSize() || i < -1) { return self; }
				
				var item = i;
			
				if (i.jquery) {
					i = self.getItems().index(i);	
					
				} else {
					item = self.getItems().eq(i);
				}  
				
				// onBeforeSeek
				var e = $.Event("onBeforeSeek"); 
				if (!fn) {
					fire.trigger(e, [i, time]);				
					if (e.isDefaultPrevented() || !item.length) { return self; }			
				}  
	
				var props = vertical ? {top: -item.position().top} : {left: -item.position().left};  
				
				index = i;
				current = self;  
				if (time === undefined) { time = conf.speed; }   
				
				itemWrap.animate(props, time, conf.easing, fn || function() { 
					fire.trigger("onSeek", [i]);		
				});	 
				
				return self; 
			}					
			
		});
				
		// callbacks	
		$.each(['onBeforeSeek', 'onSeek', 'onAddItem'], function(i, name) {
				
			// configuration
			if ($.isFunction(conf[name])) { 
				$(self).on(name, conf[name]); 
			}
			
			self[name] = function(fn) {
				if (fn) { $(self).on(name, fn); }
				return self;
			};
		});  
		
		// circular loop
		if (conf.circular) {
			
			var cloned1 = self.getItems().slice(-1).clone().prependTo(itemWrap),
				 cloned2 = self.getItems().eq(1).clone().appendTo(itemWrap);

			cloned1.add(cloned2).addClass(conf.clonedClass);
			
			self.onBeforeSeek(function(e, i, time) {
				
				if (e.isDefaultPrevented()) { return; }
				
				/*
					1. animate to the clone without event triggering
					2. seek to correct position with 0 speed
				*/
				if (i == -1) {
					self.seekTo(cloned1, time, function()  {
						self.end(0);		
					});          
					return e.preventDefault();
					
				} else if (i == self.getSize()) {
					self.seekTo(cloned2, time, function()  {
						self.begin(0);		
					});	
				}
				
			});

			// seek over the cloned item

			// if the scrollable is hidden the calculations for seekTo position
			// will be incorrect (eg, if the scrollable is inside an overlay).
			// ensure the elements are shown, calculate the correct position,
			// then re-hide the elements. This must be done synchronously to
			// prevent the hidden elements being shown to the user.

			// See: https://github.com/jquerytools/jquerytools/issues#issue/87

			var hidden_parents = root.parents().add(root).filter(function () {
				if ($(this).css('display') === 'none') {
					return true;
				}
			});
			if (hidden_parents.length) {
				hidden_parents.show();
				self.seekTo(0, 0, function() {});
				hidden_parents.hide();
			}
			else {
				self.seekTo(0, 0, function() {});
			}

		}
		
		// next/prev buttons
		var prev = find(root, conf.prev).click(function(e) { e.stopPropagation(); self.prev(); }),
			 next = find(root, conf.next).click(function(e) { e.stopPropagation(); self.next(); }); 
		
		if (!conf.circular) {
			self.onBeforeSeek(function(e, i) {
				setTimeout(function() {
					if (!e.isDefaultPrevented()) {
						prev.toggleClass(conf.disabledClass, i <= 0);
						next.toggleClass(conf.disabledClass, i >= self.getSize() -1);
					}
				}, 1);
			});
			
			if (!conf.initialIndex) {
				prev.addClass(conf.disabledClass);	
			}			
		}
			
		if (self.getSize() < 2) {
			prev.add(next).addClass(conf.disabledClass);	
		}
			
		// mousewheel support
		if (conf.mousewheel && $.fn.mousewheel) {
			root.mousewheel(function(e, delta)  {
				if (conf.mousewheel) {
					self.move(delta < 0 ? 1 : -1, conf.wheelSpeed || 50);
					return false;
				}
			});			
		}
		
		// touch event
		if (conf.touch) {
			var touch = {};
			
			itemWrap[0].ontouchstart = function(e) {
				var t = e.touches[0];
				touch.x = t.clientX;
				touch.y = t.clientY;
			};
			
			itemWrap[0].ontouchmove = function(e) {
				
				// only deal with one finger
				if (e.touches.length == 1 && !itemWrap.is(":animated")) {			
					var t = e.touches[0],
						 deltaX = touch.x - t.clientX,
						 deltaY = touch.y - t.clientY;
	
					self[vertical && deltaY > 0 || !vertical && deltaX > 0 ? 'next' : 'prev']();				
					e.preventDefault();
				}
			};
		}
		
		if (conf.keyboard)  {
			
			$(document).on("keydown.scrollable", function(evt) {

				// skip certain conditions
				if (!conf.keyboard || evt.altKey || evt.ctrlKey || evt.metaKey || $(evt.target).is(":input")) { 
					return; 
				}
				
				// does this instance have focus?
				if (conf.keyboard != 'static' && current != self) { return; }
					
				var key = evt.keyCode;
			
				if (vertical && (key == 38 || key == 40)) {
					self.move(key == 38 ? -1 : 1);
					return evt.preventDefault();
				}
				
				if (!vertical && (key == 37 || key == 39)) {					
					self.move(key == 37 ? -1 : 1);
					return evt.preventDefault();
				}	  
				
			});  
		}
		
		// initial index
		if (conf.initialIndex) {
			self.seekTo(conf.initialIndex, 0, function() {});
		}
	} 

		
	// jQuery plugin implementation
	$.fn.scrollable = function(conf) { 
			
		// already constructed --> return API
		var el = this.data("scrollable");
		if (el) { return el; }		 

		conf = $.extend({}, $.tools.scrollable.conf, conf); 
		
		this.each(function() {			
			el = new Scrollable($(this), conf);
			$(this).data("scrollable", el);	
		});
		
		return conf.api ? el: this; 
		
	};
			
	
})(jQuery);


/**
 * @license 
 * jQuery Tools @VERSION Tabs- The basics of UI design.
 * 
 * NO COPYRIGHTS OR LICENSES. DO WHAT YOU LIKE.
 * 
 * http://flowplayer.org/tools/tabs/
 *
 * Since: November 2008
 * Date: @DATE 
 */  
(function($) {
		
	// static constructs
	$.tools = $.tools || {version: '@VERSION'};
	
	$.tools.tabs = {
		
		conf: {
			tabs: 'a',
			current: 'current',
			onBeforeClick: null,
			onClick: null, 
			effect: 'default',
			initialEffect: false,   // whether or not to show effect in first init of tabs
			initialIndex: 0,			
			event: 'click',
			rotate: false,
			
      // slide effect
      slideUpSpeed: 400,
      slideDownSpeed: 400,
			
			// 1.2
			history: false
		},
		
		addEffect: function(name, fn) {
			effects[name] = fn;
		}
		
	};
	
	var effects = {
		
		// simple "toggle" effect
		'default': function(i, done) { 
			this.getPanes().hide().eq(i).show();
			done.call();
		}, 
		
		/*
			configuration:
				- fadeOutSpeed (positive value does "crossfading")
				- fadeInSpeed
		*/
		fade: function(i, done) {		
			
			var conf = this.getConf(),
				 speed = conf.fadeOutSpeed,
				 panes = this.getPanes();
			
			if (speed) {
				panes.fadeOut(speed);	
			} else {
				panes.hide();	
			}

			panes.eq(i).fadeIn(conf.fadeInSpeed, done);	
		},
		
		// for basic accordions
		slide: function(i, done) {
		  var conf = this.getConf();
		  
			this.getPanes().slideUp(conf.slideUpSpeed);
			this.getPanes().eq(i).slideDown(conf.slideDownSpeed, done);			 
		}, 

		/**
		 * AJAX effect
		 */
		ajax: function(i, done)  {			
			this.getPanes().eq(0).load(this.getTabs().eq(i).attr("href"), done);	
		}		
	};   	
	
	/**
	 * Horizontal accordion
	 * 
	 * @deprecated will be replaced with a more robust implementation
	*/
	
	var
	  /**
	  *   @type {Boolean}
	  *
	  *   Mutex to control horizontal animation
	  *   Disables clicking of tabs while animating
	  *   They mess up otherwise as currentPane gets set *after* animation is done
	  */
	  animating,
	  /**
	  *   @type {Number}
	  *   
	  *   Initial width of tab panes
	  */
	  w;
	 
	$.tools.tabs.addEffect("horizontal", function(i, done) {
	  if (animating) return;    // don't allow other animations
	  
	  var nextPane = this.getPanes().eq(i),
	      currentPane = this.getCurrentPane();
	      
		// store original width of a pane into memory
		w || ( w = this.getPanes().eq(0).width() );
		animating = true;
		
		nextPane.show(); // hidden by default
		
		// animate current pane's width to zero
    // animate next pane's width at the same time for smooth animation
    currentPane.animate({width: 0}, {
      step: function(now){
        nextPane.css("width", w-now);
      },
      complete: function(){
        $(this).hide();
        done.call();
        animating = false;
     }
    });
    // Dirty hack...  onLoad, currentPant will be empty and nextPane will be the first pane
    // If this is the case, manually run callback since the animation never occured, and reset animating
    if (!currentPane.length){ 
      done.call(); 
      animating = false;
    }
	});	

	
	function Tabs(root, paneSelector, conf) {
		
		var self = this,
        trigger = root.add(this),
        tabs = root.find(conf.tabs),
        panes = paneSelector.jquery ? paneSelector : root.children(paneSelector),
        current;
			 
		
		// make sure tabs and panes are found
		if (!tabs.length)  { tabs = root.children(); }
		if (!panes.length) { panes = root.parent().find(paneSelector); }
		if (!panes.length) { panes = $(paneSelector); }
		
		
		// public methods
		$.extend(this, {				
			click: function(i, e) {
			  
				var tab = tabs.eq(i),
				    firstRender = !root.data('tabs');
				
				if (typeof i == 'string' && i.replace("#", "")) {
					tab = tabs.filter("[href*=\"" + i.replace("#", "") + "\"]");
					i = Math.max(tabs.index(tab), 0);
				}
								
				if (conf.rotate) {
					var last = tabs.length -1; 
					if (i < 0) { return self.click(last, e); }
					if (i > last) { return self.click(0, e); }						
				}
				
				if (!tab.length) {
					if (current >= 0) { return self; }
					i = conf.initialIndex;
					tab = tabs.eq(i);
				}				
				
				// current tab is being clicked
				if (i === current) { return self; }
				
				// possibility to cancel click action				
				e = e || $.Event();
				e.type = "onBeforeClick";
				trigger.trigger(e, [i]);				
				if (e.isDefaultPrevented()) { return; }
				
        // if firstRender, only run effect if initialEffect is set, otherwise default
				var effect = firstRender ? conf.initialEffect && conf.effect || 'default' : conf.effect;

				// call the effect
				effects[effect].call(self, i, function() {
					current = i;
					// onClick callback
					e.type = "onClick";
					trigger.trigger(e, [i]);
				});			
				
				// default behaviour
				tabs.removeClass(conf.current);	
				tab.addClass(conf.current);				
				
				return self;
			},
			
			getConf: function() {
				return conf;	
			},

			getTabs: function() {
				return tabs;	
			},
			
			getPanes: function() {
				return panes;	
			},
			
			getCurrentPane: function() {
				return panes.eq(current);	
			},
			
			getCurrentTab: function() {
				return tabs.eq(current);	
			},
			
			getIndex: function() {
				return current;	
			}, 
			
			next: function() {
				return self.click(current + 1);
			},
			
			prev: function() {
				return self.click(current - 1);	
			},
			
			destroy: function() {
				tabs.off(conf.event).removeClass(conf.current);
				panes.find("a[href^=\"#\"]").off("click.T"); 
				return self;
			}
		
		});

		// callbacks	
		$.each("onBeforeClick,onClick".split(","), function(i, name) {
				
			// configuration
			if ($.isFunction(conf[name])) {
				$(self).on(name, conf[name]); 
			}

			// API
			self[name] = function(fn) {
				if (fn) { $(self).on(name, fn); }
				return self;	
			};
		});
	
		
		if (conf.history && $.fn.history) {
			$.tools.history.init(tabs);
			conf.event = 'history';
		}	
		
		// setup click actions for each tab
		tabs.each(function(i) { 				
			$(this).on(conf.event, function(e) {
				self.click(i, e);
				return e.preventDefault();
			});			
		});
		
		// cross tab anchor link
		panes.find("a[href^=\"#\"]").on("click.T", function(e) {
			self.click($(this).attr("href"), e);		
		}); 
		
		// open initial tab
		if (location.hash && conf.tabs == "a" && root.find("[href=\"" +location.hash+ "\"]").length) {
			self.click(location.hash);

		} else {
			if (conf.initialIndex === 0 || conf.initialIndex > 0) {
				self.click(conf.initialIndex);
			}
		}				
		
	}
	
	
	// jQuery plugin implementation
	$.fn.tabs = function(paneSelector, conf) {
		
		// return existing instance
		var el = this.data("tabs");
		if (el) { 
			el.destroy();	
			this.removeData("tabs");
		}

		if ($.isFunction(conf)) {
			conf = {onBeforeClick: conf};
		}
		
		// setup conf
		conf = $.extend({}, $.tools.tabs.conf, conf);		
		
		
		this.each(function() {				
			el = new Tabs($(this), paneSelector, conf);
			$(this).data("tabs", el); 
		});		
		
		return conf.api ? el: this;		
	};		
		
}) (jQuery); 




/**
 * @license 
 * jQuery Tools @VERSION History "Back button for AJAX apps"
 * 
 * NO COPYRIGHTS OR LICENSES. DO WHAT YOU LIKE.
 * 
 * http://flowplayer.org/tools/toolbox/history.html
 * 
 * Since: Mar 2010
 * Date: @DATE 
 */
(function($) {
		
	var hash, iframe, links, inited;		
	
	$.tools = $.tools || {version: '@VERSION'};
	
	$.tools.history = {
	
		init: function(els) {
			
			if (inited) { return; }
			
			// IE
			if ($.browser.msie && $.browser.version < '8') {
				
				// create iframe that is constantly checked for hash changes
				if (!iframe) {
					iframe = $("<iframe/>").attr("src", "javascript:false;").hide().get(0);
					$("body").append(iframe);
									
					setInterval(function() {
						var idoc = iframe.contentWindow.document, 
							 h = idoc.location.hash;
					
						if (hash !== h) {						
							$(window).trigger("hash", h);
						}
					}, 100);
					
					setIframeLocation(location.hash || '#');
				}

				
			// other browsers scans for location.hash changes directly without iframe hack
			} else { 
				setInterval(function() {
					var h = location.hash;
					if (h !== hash) {
						$(window).trigger("hash", h);
					}						
				}, 100);
			}

			links = !links ? els : links.add(els);
			
			els.click(function(e) {
				var href = $(this).attr("href");
				if (iframe) { setIframeLocation(href); }
				
				// handle non-anchor links
				if (href.slice(0, 1) != "#") {
					location.href = "#" + href;
					return e.preventDefault();		
				}
				
			}); 
			
			inited = true;
		}	
	};  
	

	function setIframeLocation(h) {
		if (h) {
			var doc = iframe.contentWindow.document;
			doc.open().close();	
			doc.location.hash = h;
		}
	} 
		 
	// global histroy change listener
	$(window).on("hash", function(e, h)  { 
		if (h) {
			links.filter(function() {
			  var href = $(this).attr("href");
			  return href == h || href == h.replace("#", ""); 
			}).trigger("history", [h]);	
		} else {
			links.eq(0).trigger("history", [h]);	
		}

		hash = h;

	});
		
	
	// jQuery plugin implementation
	$.fn.history = function(fn) {
			
		$.tools.history.init(this);

		// return jQuery
		return this.on("history", fn);		
	};	
		
})(jQuery); 



/**
 * @license 
 * jQuery Tools @VERSION / Expose - Dim the lights
 * 
 * NO COPYRIGHTS OR LICENSES. DO WHAT YOU LIKE.
 * 
 * http://flowplayer.org/tools/toolbox/expose.html
 *
 * Since: Mar 2010
 * Date: @DATE 
 */
(function($) { 	

	// static constructs
	$.tools = $.tools || {version: '@VERSION'};
	
	var tool;
	
	tool = $.tools.expose = {
		
		conf: {	
			maskId: 'exposeMask',
			loadSpeed: 'slow',
			closeSpeed: 'fast',
			closeOnClick: true,
			closeOnEsc: true,
			
			// css settings
			zIndex: 9998,
			opacity: 0.8,
			startOpacity: 0,
			color: '#fff',
			
			// callbacks
			onLoad: null,
			onClose: null
		}
	};

	/* one of the greatest headaches in the tool. finally made it */
	function viewport() {
				
		// the horror case
		if (/msie/.test(navigator.userAgent.toLowerCase())) {
			
			// if there are no scrollbars then use window.height
			var d = $(document).height(), w = $(window).height();
			
			return [
				window.innerWidth || 							// ie7+
				document.documentElement.clientWidth || 	// ie6  
				document.body.clientWidth, 					// ie6 quirks mode
				d - w < 20 ? w : d
			];
		} 
		
		// other well behaving browsers
		return [$(document).width(), $(document).height()]; 
	} 
	
	function call(fn) {
		if (fn) { return fn.call($.mask); }
	}
	
	var mask, exposed, loaded, config, overlayIndex;		
	
	
	$.mask = {
		
		load: function(conf, els) {
			
			// already loaded ?
			if (loaded) { return this; }			
			
			// configuration
			if (typeof conf == 'string') {
				conf = {color: conf};	
			}
			
			// use latest config
			conf = conf || config;
			
			config = conf = $.extend($.extend({}, tool.conf), conf);

			// get the mask
			mask = $("#" + conf.maskId);
				
			// or create it
			if (!mask.length) {
				mask = $('<div/>').attr("id", conf.maskId);
				$("body").append(mask);
			}
			
			// set position and dimensions 			
			var size = viewport();
				
			mask.css({				
				position:'absolute', 
				top: 0, 
				left: 0,
				width: size[0],
				height: size[1],
				display: 'none',
				opacity: conf.startOpacity,					 		
				zIndex: conf.zIndex 
			});
			
			if (conf.color) {
				mask.css("backgroundColor", conf.color);	
			}			
			
			// onBeforeLoad
			if (call(conf.onBeforeLoad) === false) {
				return this;
			}
			
			// esc button
			if (conf.closeOnEsc) {						
				$(document).on("keydown.mask", function(e) {							
					if (e.keyCode == 27) {
						$.mask.close(e);	
					}		
				});			
			}
			
			// mask click closes
			if (conf.closeOnClick) {
				mask.on("click.mask", function(e)  {
					$.mask.close(e);		
				});					
			}			
			
			// resize mask when window is resized
			$(window).on("resize.mask", function() {
				$.mask.fit();
			});
			
			// exposed elements
			if (els && els.length) {
				
				overlayIndex = els.eq(0).css("zIndex");

				// make sure element is positioned absolutely or relatively
				$.each(els, function() {
					var el = $(this);
					if (!/relative|absolute|fixed/i.test(el.css("position"))) {
						el.css("position", "relative");		
					}					
				});
			 
				// make elements sit on top of the mask
				exposed = els.css({ zIndex: Math.max(conf.zIndex + 1, overlayIndex == 'auto' ? 0 : overlayIndex)});			
			}	
			
			// reveal mask
			mask.css({display: 'block'}).fadeTo(conf.loadSpeed, conf.opacity, function() {
				$.mask.fit(); 
				call(conf.onLoad);
				loaded = "full";
			});
			
			loaded = true;			
			return this;				
		},
		
		close: function() {
			if (loaded) {
				
				// onBeforeClose
				if (call(config.onBeforeClose) === false) { return this; }
					
				mask.fadeOut(config.closeSpeed, function()  {										
					if (exposed) {
						exposed.css({zIndex: overlayIndex});						
					}				
					loaded = false;
					call(config.onClose);
				});				
				
				// unbind various event listeners
				$(document).off("keydown.mask");
				mask.off("click.mask");
				$(window).off("resize.mask");  
			}
			
			return this; 
		},
		
		fit: function() {
			if (loaded) {
				var size = viewport();				
				mask.css({width: size[0], height: size[1]});
			}				
		},
		
		getMask: function() {
			return mask;	
		},
		
		isLoaded: function(fully) {
			return fully ? loaded == 'full' : loaded;	
		}, 
		
		getConf: function() {
			return config;	
		},
		
		getExposed: function() {
			return exposed;	
		}		
	};
	
	$.fn.mask = function(conf) {
		$.mask.load(conf);
		return this;		
	};			
	
	$.fn.expose = function(conf) {
		$.mask.load(conf, this);
		return this;			
	};


})(jQuery);


/**
 * @license 
 * jQuery Tools @VERSION Tooltip - UI essentials
 * 
 * NO COPYRIGHTS OR LICENSES. DO WHAT YOU LIKE.
 * 
 * http://flowplayer.org/tools/tooltip/
 *
 * Since: November 2008
 * Date: @DATE 
 */
(function($) { 	
	// static constructs
	$.tools = $.tools || {version: '@VERSION'};
	
	$.tools.tooltip = {
		
		conf: { 
			
			// default effect variables
			effect: 'toggle',			
			fadeOutSpeed: "fast",
			predelay: 0,
			delay: 30,
			opacity: 1,			
			tip: 0,
            fadeIE: false, // enables fade effect in IE
			
			// 'top', 'bottom', 'right', 'left', 'center'
			position: ['top', 'center'], 
			offset: [0, 0],
			relative: false,
			cancelDefault: true,
			
			// type to event mapping 
			events: {
				def: 			"mouseenter,mouseleave",
				input: 		"focus,blur",
				widget:		"focus mouseenter,blur mouseleave",
				tooltip:		"mouseenter,mouseleave"
			},
			
			// 1.2
			layout: '<div/>',
			tipClass: 'tooltip'
		},
		
		addEffect: function(name, loadFn, hideFn) {
			effects[name] = [loadFn, hideFn];	
		} 
	};
	
	
	var effects = { 
		toggle: [ 
			function(done) { 
				var conf = this.getConf(), tip = this.getTip(), o = conf.opacity;
				if (o < 1) { tip.css({opacity: o}); }
				tip.show();
				done.call();
			},
			
			function(done) { 
				this.getTip().hide();
				done.call();
			} 
		],
		
		fade: [
			function(done) {
				var conf = this.getConf();
				if (!/msie/.test(navigator.userAgent.toLowerCase()) || conf.fadeIE) {
					this.getTip().fadeTo(conf.fadeInSpeed, conf.opacity, done);
				}
				else {
					this.getTip().show();
					done();
				}
			},
			function(done) {
				var conf = this.getConf();
				if (!/msie/.test(navigator.userAgent.toLowerCase()) || conf.fadeIE) {
					this.getTip().fadeOut(conf.fadeOutSpeed, done);
				}
				else {
					this.getTip().hide();
					done();
				}
			}
		]		
	};   

		
	/* calculate tip position relative to the trigger */  	
	function getPosition(trigger, tip, conf) {	

		
		// get origin top/left position 
		var top = conf.relative ? trigger.position().top : trigger.offset().top, 
			 left = conf.relative ? trigger.position().left : trigger.offset().left,
			 pos = conf.position[0];

		top  -= tip.outerHeight() - conf.offset[0];
		left += trigger.outerWidth() + conf.offset[1];
		
		// iPad position fix
		if (/iPad/i.test(navigator.userAgent)) {
			top -= $(window).scrollTop();
		}
		
		// adjust Y		
		var height = tip.outerHeight() + trigger.outerHeight();
		if (pos == 'center') 	{ top += height / 2; }
		if (pos == 'bottom') 	{ top += height; }
		
		
		// adjust X
		pos = conf.position[1]; 	
		var width = tip.outerWidth() + trigger.outerWidth();
		if (pos == 'center') 	{ left -= width / 2; }
		if (pos == 'left')   	{ left -= width; }	 
		
		return {top: top, left: left};
	}		

	
	
	function Tooltip(trigger, conf) {

		var self = this, 
			 fire = trigger.add(self),
			 tip,
			 timer = 0,
			 pretimer = 0, 
			 title = trigger.attr("title"),
			 tipAttr = trigger.attr("data-tooltip"),
			 effect = effects[conf.effect],
			 shown,
				 
			 // get show/hide configuration
			 isInput = trigger.is(":input"), 
			 isWidget = isInput && trigger.is(":checkbox, :radio, select, :button, :submit"),			
			 type = trigger.attr("type"),
			 evt = conf.events[type] || conf.events[isInput ? (isWidget ? 'widget' : 'input') : 'def']; 
		
		
		// check that configuration is sane
		if (!effect) { throw "Nonexistent effect \"" + conf.effect + "\""; }					
		
		evt = evt.split(/,\s*/); 
		if (evt.length != 2) { throw "Tooltip: bad events configuration for " + type; } 
		
		
		// trigger --> show  
		trigger.on(evt[0], function(e) {

			clearTimeout(timer);
			if (conf.predelay) {
				pretimer = setTimeout(function() { self.show(e); }, conf.predelay);	
				
			} else {
				self.show(e);	
			}
			
		// trigger --> hide
		}).on(evt[1], function(e)  {
			clearTimeout(pretimer);
			if (conf.delay)  {
				timer = setTimeout(function() { self.hide(e); }, conf.delay);	
				
			} else {
				self.hide(e);		
			}
			
		}); 
		
		
		// remove default title
		if (title && conf.cancelDefault) { 
			trigger.removeAttr("title");
			trigger.data("title", title);			
		}		
		
		$.extend(self, {
				
			show: function(e) {  

				// tip not initialized yet
				if (!tip) {
					
					// data-tooltip 
					if (tipAttr) {
						tip = $(tipAttr);

					// single tip element for all
					} else if (conf.tip) { 
						tip = $(conf.tip).eq(0);
						
					// autogenerated tooltip
					} else if (title) { 
						tip = $(conf.layout).addClass(conf.tipClass).appendTo(document.body)
							.hide().append(title);

					// manual tooltip
					} else {	
						tip = trigger.find('.' + conf.tipClass);
						if (!tip.length) { tip = trigger.next(); }
						if (!tip.length) { tip = trigger.parent().next(); } 	 
					}
					
					if (!tip.length) { throw "Cannot find tooltip for " + trigger;	}
				} 
			 	
			 	if (self.isShown()) { return self; }  
				
			 	// stop previous animation
			 	tip.stop(true, true); 			 	
			 	
				// get position
				var pos = getPosition(trigger, tip, conf);			
		
				// restore title for single tooltip element
				if (conf.tip) {
					tip.html(trigger.data("title"));
				}

				// onBeforeShow
				e = $.Event();
				e.type = "onBeforeShow";
				fire.trigger(e, [pos]);				
				if (e.isDefaultPrevented()) { return self; }
		
				
				// onBeforeShow may have altered the configuration
				pos = getPosition(trigger, tip, conf);
				
				// set position
				tip.css({position:'absolute', top: pos.top, left: pos.left});					
				
				shown = true;
				
				// invoke effect 
				effect[0].call(self, function() {
					e.type = "onShow";
					shown = 'full';
					fire.trigger(e);		 
				});					

	 	
				// tooltip events       
				var event = conf.events.tooltip.split(/,\s*/);

				if (!tip.data("__set")) {
					
					tip.off(event[0]).on(event[0], function() { 
						clearTimeout(timer);
						clearTimeout(pretimer);
					});
					
					if (event[1] && !trigger.is("input:not(:checkbox, :radio), textarea")) { 					
						tip.off(event[1]).on(event[1], function(e) {
	
							// being moved to the trigger element
							if (e.relatedTarget != trigger[0]) {
								trigger.trigger(evt[1].split(" ")[0]);
							}
						}); 
					} 
					
					// bind agein for if same tip element
					if (!conf.tip) tip.data("__set", true);
				}
				
				return self;
			},
			
			hide: function(e) {

				if (!tip || !self.isShown()) { return self; }
			
				// onBeforeHide
				e = $.Event();
				e.type = "onBeforeHide";
				fire.trigger(e);				
				if (e.isDefaultPrevented()) { return; }
	
				shown = false;
				
				effects[conf.effect][1].call(self, function() {
					e.type = "onHide";
					fire.trigger(e);		 
				});
				
				return self;
			},
			
			isShown: function(fully) {
				return fully ? shown == 'full' : shown;	
			},
				
			getConf: function() {
				return conf;	
			},
				
			getTip: function() {
				return tip;	
			},
			
			getTrigger: function() {
				return trigger;	
			}		

		});		

		// callbacks	
		$.each("onHide,onBeforeShow,onShow,onBeforeHide".split(","), function(i, name) {
				
			// configuration
			if ($.isFunction(conf[name])) { 
				$(self).on(name, conf[name]); 
			}

			// API
			self[name] = function(fn) {
				if (fn) { $(self).on(name, fn); }
				return self;
			};
		});
		
	}
		
	
	// jQuery plugin implementation
	$.fn.tooltip = function(conf) {
		
		// return existing instance
		var api = this.data("tooltip");
		if (api) { return api; }

		conf = $.extend(true, {}, $.tools.tooltip.conf, conf);
		
		// position can also be given as string
		if (typeof conf.position == 'string') {
			conf.position = conf.position.split(/,?\s/);	
		}
		
		// install tooltip for each entry in jQuery object
		this.each(function() {
			api = new Tooltip($(this), conf); 
			$(this).data("tooltip", api); 
		});
		
		return conf.api ? api: this;		 
	};
		
}) (jQuery);

		


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),

/***/ 37:
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : undefined
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}


/***/ }),

/***/ 370:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {/*
 * jQuery Templating Plugin
 * Copyright 2010, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 */
(function( jQuery, undefined ){
	var oldManip = jQuery.fn.domManip, tmplItmAtt = "_tmplitem", htmlExpr = /^[^<]*(<[\w\W]+>)[^>]*$|\{\{\! /,
		newTmplItems = {}, wrappedItems = {}, appendToTmplItems, topTmplItem = { key: 0, data: {} }, itemKey = 0, cloneIndex = 0, stack = [];

	function newTmplItem( options, parentItem, fn, data ) {
		// Returns a template item data structure for a new rendered instance of a template (a 'template item').
		// The content field is a hierarchical array of strings and nested items (to be
		// removed and replaced by nodes field of dom elements, once inserted in DOM).
		var newItem = {
			data: data || (parentItem ? parentItem.data : {}),
			_wrap: parentItem ? parentItem._wrap : null,
			tmpl: null,
			parent: parentItem || null,
			nodes: [],
			calls: tiCalls,
			nest: tiNest,
			wrap: tiWrap,
			html: tiHtml,
			update: tiUpdate
		};
		if ( options ) {
			jQuery.extend( newItem, options, { nodes: [], parent: parentItem } );
		}
		if ( fn ) {
			// Build the hierarchical content to be used during insertion into DOM
			newItem.tmpl = fn;
			newItem._ctnt = newItem._ctnt || newItem.tmpl( jQuery, newItem );
			newItem.key = ++itemKey;
			// Keep track of new template item, until it is stored as jQuery Data on DOM element
			(stack.length ? wrappedItems : newTmplItems)[itemKey] = newItem;
		}
		return newItem;
	}

	// Override appendTo etc., in order to provide support for targeting multiple elements. (This code would disappear if integrated in jquery core).
	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var ret = [], insert = jQuery( selector ), elems, i, l, tmplItems,
				parent = this.length === 1 && this[0].parentNode;

			appendToTmplItems = newTmplItems || {};
			if ( parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1 ) {
				insert[ original ]( this[0] );
				ret = this;
			} else {
				for ( i = 0, l = insert.length; i < l; i++ ) {
					cloneIndex = i;
					elems = (i > 0 ? this.clone(true) : this).get();
					jQuery.fn[ original ].apply( jQuery(insert[i]), elems );
					ret = ret.concat( elems );
				}
				cloneIndex = 0;
				ret = this.pushStack( ret, name, insert.selector );
			}
			tmplItems = appendToTmplItems;
			appendToTmplItems = null;
			jQuery.tmpl.complete( tmplItems );
			return ret;
		};
	});

	jQuery.fn.extend({
		// Use first wrapped element as template markup.
		// Return wrapped set of template items, obtained by rendering template against data.
		tmpl: function( data, options, parentItem ) {
			return jQuery.tmpl( this[0], data, options, parentItem );
		},

		// Find which rendered template item the first wrapped DOM element belongs to
		tmplItem: function() {
			return jQuery.tmplItem( this[0] );
		},

		// Consider the first wrapped element as a template declaration, and get the compiled template or store it as a named template.
		template: function( name ) {
			return jQuery.template( name, this[0] );
		},

		domManip: function( args, table, callback, options ) {
			// This appears to be a bug in the appendTo, etc. implementation
			// it should be doing .call() instead of .apply(). See #6227
			if ( args[0] && args[0].nodeType ) {
				var dmArgs = jQuery.makeArray( arguments ), argsLength = args.length, i = 0, tmplItem;
				while ( i < argsLength && !(tmplItem = jQuery.data( args[i++], "tmplItem" ))) {}
				if ( argsLength > 1 ) {
					dmArgs[0] = [jQuery.makeArray( args )];
				}
				if ( tmplItem && cloneIndex ) {
					dmArgs[2] = function( fragClone ) {
						// Handler called by oldManip when rendered template has been inserted into DOM.
						jQuery.tmpl.afterManip( this, fragClone, callback );
					};
				}
				oldManip.apply( this, dmArgs );
			} else {
				oldManip.apply( this, arguments );
			}
			cloneIndex = 0;
			if ( !appendToTmplItems ) {
				jQuery.tmpl.complete( newTmplItems );
			}
			return this;
		}
	});

	jQuery.extend({
		// Return wrapped set of template items, obtained by rendering template against data.
		tmpl: function( tmpl, data, options, parentItem ) {
			var ret, topLevel = !parentItem;
			if ( topLevel ) {
				// This is a top-level tmpl call (not from a nested template using {{tmpl}})
				parentItem = topTmplItem;
				tmpl = jQuery.template[tmpl] || jQuery.template( null, tmpl );
				wrappedItems = {}; // Any wrapped items will be rebuilt, since this is top level
			} else if ( !tmpl ) {
				// The template item is already associated with DOM - this is a refresh.
				// Re-evaluate rendered template for the parentItem
				tmpl = parentItem.tmpl;
				newTmplItems[parentItem.key] = parentItem;
				parentItem.nodes = [];
				if ( parentItem.wrapped ) {
					updateWrapped( parentItem, parentItem.wrapped );
				}
				// Rebuild, without creating a new template item
				return jQuery( build( parentItem, null, parentItem.tmpl( jQuery, parentItem ) ));
			}
			if ( !tmpl ) {
				return []; // Could throw...
			}
			if ( typeof data === "function" ) {
				data = data.call( parentItem || {} );
			}
			if ( options && options.wrapped ) {
				updateWrapped( options, options.wrapped );
			}
			ret = jQuery.isArray( data ) ? 
				jQuery.map( data, function( dataItem ) {
					return dataItem ? newTmplItem( options, parentItem, tmpl, dataItem ) : null;
				}) :
				[ newTmplItem( options, parentItem, tmpl, data ) ];
			return topLevel ? jQuery( build( parentItem, null, ret ) ) : ret;
		},

		// Return rendered template item for an element.
		tmplItem: function( elem ) {
			var tmplItem;
			if ( elem instanceof jQuery ) {
				elem = elem[0];
			}
			while ( elem && elem.nodeType === 1 && !(tmplItem = jQuery.data( elem, "tmplItem" )) && (elem = elem.parentNode) ) {}
			return tmplItem || topTmplItem;
		},

		// Set:
		// Use $.template( name, tmpl ) to cache a named template,
		// where tmpl is a template string, a script element or a jQuery instance wrapping a script element, etc.
		// Use $( "selector" ).template( name ) to provide access by name to a script block template declaration.

		// Get:
		// Use $.template( name ) to access a cached template.
		// Also $( selectorToScriptBlock ).template(), or $.template( null, templateString )
		// will return the compiled template, without adding a name reference.
		// If templateString includes at least one HTML tag, $.template( templateString ) is equivalent
		// to $.template( null, templateString )
		template: function( name, tmpl ) {
			if (tmpl) {
				// Compile template and associate with name
				if ( typeof tmpl === "string" ) {
					// This is an HTML string being passed directly in.
					tmpl = buildTmplFn( tmpl )
				} else if ( tmpl instanceof jQuery ) {
					tmpl = tmpl[0] || {};
				}
				if ( tmpl.nodeType ) {
					// If this is a template block, use cached copy, or generate tmpl function and cache.
					tmpl = jQuery.data( tmpl, "tmpl" ) || jQuery.data( tmpl, "tmpl", buildTmplFn( tmpl.innerHTML ));
				}
				return typeof name === "string" ? (jQuery.template[name] = tmpl) : tmpl;
			}
			// Return named compiled template
			return name ? (typeof name !== "string" ? jQuery.template( null, name ): 
				(jQuery.template[name] || 
					// If not in map, treat as a selector. (If integrated with core, use quickExpr.exec) 
					jQuery.template( null, htmlExpr.test( name ) ? name : jQuery( name )))) : null; 
		},

		encode: function( text ) {
			// Do HTML encoding replacing < > & and ' and " by corresponding entities.
			return ("" + text).split("<").join("&lt;").split(">").join("&gt;").split('"').join("&#34;").split("'").join("&#39;");
		}
	});

	jQuery.extend( jQuery.tmpl, {
		tag: {
			"tmpl": {
				_default: { $2: "null" },
				open: "if($notnull_1){_=_.concat($item.nest($1,$2));}"
				// tmpl target parameter can be of type function, so use $1, not $1a (so not auto detection of functions)
				// This means that {{tmpl foo}} treats foo as a template (which IS a function). 
				// Explicit parens can be used if foo is a function that returns a template: {{tmpl foo()}}.
			},
			"wrap": {
				_default: { $2: "null" },
				open: "$item.calls(_,$1,$2);_=[];",
				close: "call=$item.calls();_=call._.concat($item.wrap(call,_));"
			},
			"each": {
				_default: { $2: "$index, $value" },
				open: "if($notnull_1){$.each($1a,function($2){with(this){",
				close: "}});}"
			},
			"if": {
				open: "if(($notnull_1) && $1a){",
				close: "}"
			},
			"else": {
				_default: { $1: "true" },
				open: "}else if(($notnull_1) && $1a){"
			},
			"html": {
				// Unecoded expression evaluation. 
				open: "if($notnull_1){_.push($1a);}"
			},
			"=": {
				// Encoded expression evaluation. Abbreviated form is ${}.
				_default: { $1: "$data" },
				open: "if($notnull_1){_.push($.encode($1a));}"
			},
			"!": {
				// Comment tag. Skipped by parser
				open: ""
			}
		},

		// This stub can be overridden, e.g. in jquery.tmplPlus for providing rendered events
		complete: function( items ) {
			newTmplItems = {};
		},

		// Call this from code which overrides domManip, or equivalent
		// Manage cloning/storing template items etc.
		afterManip: function afterManip( elem, fragClone, callback ) {
			// Provides cloned fragment ready for fixup prior to and after insertion into DOM
			var content = fragClone.nodeType === 11 ?
				jQuery.makeArray(fragClone.childNodes) :
				fragClone.nodeType === 1 ? [fragClone] : [];

			// Return fragment to original caller (e.g. append) for DOM insertion
			callback.call( elem, fragClone );

			// Fragment has been inserted:- Add inserted nodes to tmplItem data structure. Replace inserted element annotations by jQuery.data.
			storeTmplItems( content );
			cloneIndex++;
		}
	});

	//========================== Private helper functions, used by code above ==========================

	function build( tmplItem, nested, content ) {
		// Convert hierarchical content into flat string array 
		// and finally return array of fragments ready for DOM insertion
		var frag, ret = content ? jQuery.map( content, function( item ) {
			return (typeof item === "string") ? 
				// Insert template item annotations, to be converted to jQuery.data( "tmplItem" ) when elems are inserted into DOM.
				(tmplItem.key ? item.replace( /(<\w+)(?=[\s>])(?![^>]*_tmplitem)([^>]*)/g, "$1 " + tmplItmAtt + "=\"" + tmplItem.key + "\" $2" ) : item) :
				// This is a child template item. Build nested template.
				build( item, tmplItem, item._ctnt );
		}) : 
		// If content is not defined, insert tmplItem directly. Not a template item. May be a string, or a string array, e.g. from {{html $item.html()}}. 
		tmplItem;
		if ( nested ) {
			return ret;
		}

		// top-level template
		ret = ret.join("");

		// Support templates which have initial or final text nodes, or consist only of text
		// Also support HTML entities within the HTML markup.
		ret.replace( /^\s*([^<\s][^<]*)?(<[\w\W]+>)([^>]*[^>\s])?\s*$/, function( all, before, middle, after) {
			frag = jQuery( middle ).get();

			storeTmplItems( frag );
			if ( before ) {
				frag = unencode( before ).concat(frag);
			}
			if ( after ) {
				frag = frag.concat(unencode( after ));
			}
		});
		return frag ? frag : unencode( ret );
	}

	function unencode( text ) {
		// Use createElement, since createTextNode will not render HTML entities correctly
		var el = document.createElement( "div" );
		el.innerHTML = text;
		return jQuery.makeArray(el.childNodes);
	}

	// Generate a reusable function that will serve to render a template against data
	function buildTmplFn( markup ) {
		return new Function("jQuery","$item",
			"var $=jQuery,call,_=[],$data=$item.data;" +

			// Introduce the data as local variables using with(){}
			"with($data){_.push('" +

			// Convert the template into pure JavaScript
			jQuery.trim(markup)
				.replace( /([\\'])/g, "\\$1" )
				.replace( /[\r\t\n]/g, " " )
				.replace( /\$\{([^\}]*)\}/g, "{{= $1}}" )
				.replace( /\{\{(\/?)(\w+|.)(?:\(((?:[^\}]|\}(?!\}))*?)?\))?(?:\s+(.*?)?)?(\(((?:[^\}]|\}(?!\}))*?)\))?\s*\}\}/g,
				function( all, slash, type, fnargs, target, parens, args ) {
					var tag = jQuery.tmpl.tag[ type ], def, expr, exprAutoFnDetect;
					if ( !tag ) {
						throw "Template command not found: " + type;
					}
					def = tag._default || [];
					if ( parens && !/\w$/.test(target)) {
						target += parens;
						parens = "";
					}
					if ( target ) {
						target = unescape( target ); 
						args = args ? ("," + unescape( args ) + ")") : (parens ? ")" : "");
						// Support for target being things like a.toLowerCase();
						// In that case don't call with template item as 'this' pointer. Just evaluate...
						expr = parens ? (target.indexOf(".") > -1 ? target + parens : ("(" + target + ").call($item" + args)) : target;
						exprAutoFnDetect = parens ? expr : "(typeof(" + target + ")==='function'?(" + target + ").call($item):(" + target + "))";
					} else {
						exprAutoFnDetect = expr = def.$1 || "null";
					}
					fnargs = unescape( fnargs );
					return "');" + 
						tag[ slash ? "close" : "open" ]
							.split( "$notnull_1" ).join( target ? "typeof(" + target + ")!=='undefined' && (" + target + ")!=null" : "true" )
							.split( "$1a" ).join( exprAutoFnDetect )
							.split( "$1" ).join( expr )
							.split( "$2" ).join( fnargs ?
								fnargs.replace( /\s*([^\(]+)\s*(\((.*?)\))?/g, function( all, name, parens, params ) {
									params = params ? ("," + params + ")") : (parens ? ")" : "");
									return params ? ("(" + name + ").call($item" + params) : all;
								})
								: (def.$2||"")
							) +
						"_.push('";
				}) +
			"');}return _;"
		);
	}
	function updateWrapped( options, wrapped ) {
		// Build the wrapped content. 
		options._wrap = build( options, true, 
			// Suport imperative scenario in which options.wrapped can be set to a selector or an HTML string.
			jQuery.isArray( wrapped ) ? wrapped : [htmlExpr.test( wrapped ) ? wrapped : jQuery( wrapped ).html()]
		).join("");
	}

	function unescape( args ) {
		return args ? args.replace( /\\'/g, "'").replace(/\\\\/g, "\\" ) : null;
	}
	function outerHtml( elem ) {
		var div = document.createElement("div");
		div.appendChild( elem.cloneNode(true) );
		return div.innerHTML;
	}

	// Store template items in jQuery.data(), ensuring a unique tmplItem data data structure for each rendered template instance.
	function storeTmplItems( content ) {
		var keySuffix = "_" + cloneIndex, elem, elems, newClonedItems = {}, i, l, m;
		for ( i = 0, l = content.length; i < l; i++ ) {
			if ( (elem = content[i]).nodeType !== 1 ) {
				continue;
			}
			elems = elem.getElementsByTagName("*");
			for ( m = elems.length - 1; m >= 0; m-- ) {
				processItemKey( elems[m] );
			}
			processItemKey( elem );
		}
		function processItemKey( el ) {
			var pntKey, pntNode = el, pntItem, tmplItem, key;
			// Ensure that each rendered template inserted into the DOM has its own template item,
			if ( (key = el.getAttribute( tmplItmAtt ))) {
				while ( pntNode.parentNode && (pntNode = pntNode.parentNode).nodeType === 1 && !(pntKey = pntNode.getAttribute( tmplItmAtt ))) { }
				if ( pntKey !== key ) {
					// The next ancestor with a _tmplitem expando is on a different key than this one.
					// So this is a top-level element within this template item
					// Set pntNode to the key of the parentNode, or to 0 if pntNode.parentNode is null, or pntNode is a fragment.
					pntNode = pntNode.parentNode ? (pntNode.nodeType === 11 ? 0 : (pntNode.getAttribute( tmplItmAtt ) || 0)) : 0;
					if ( !(tmplItem = newTmplItems[key]) ) {
						// The item is for wrapped content, and was copied from the temporary parent wrappedItem.
						tmplItem = wrappedItems[key];
						tmplItem = newTmplItem( tmplItem, newTmplItems[pntNode]||wrappedItems[pntNode], null, true );
						tmplItem.key = ++itemKey;
						newTmplItems[itemKey] = tmplItem;
					}
					if ( cloneIndex ) {
						cloneTmplItem( key );
					}
				}
				el.removeAttribute( tmplItmAtt );
			} else if ( cloneIndex && (tmplItem = jQuery.data( el, "tmplItem" )) ) {
				// This was a rendered element, cloned during append or appendTo etc.
				// TmplItem stored in jQuery data has already been cloned in cloneCopyEvent. We must replace it with a fresh cloned tmplItem.
				cloneTmplItem( tmplItem.key );
				newTmplItems[tmplItem.key] = tmplItem;
				pntNode = jQuery.data( el.parentNode, "tmplItem" );
				pntNode = pntNode ? pntNode.key : 0;
			}
			if ( tmplItem ) {
				pntItem = tmplItem;
				// Find the template item of the parent element. 
				// (Using !=, not !==, since pntItem.key is number, and pntNode may be a string)
				while ( pntItem && pntItem.key != pntNode ) { 
					// Add this element as a top-level node for this rendered template item, as well as for any
					// ancestor items between this item and the item of its parent element
					pntItem.nodes.push( el );
					pntItem = pntItem.parent;
				}
				// Delete content built during rendering - reduce API surface area and memory use, and avoid exposing of stale data after rendering...
				delete tmplItem._ctnt;
				delete tmplItem._wrap;
				// Store template item as jQuery data on the element
				jQuery.data( el, "tmplItem", tmplItem );
			}
			function cloneTmplItem( key ) {
				key = key + keySuffix;
				tmplItem = newClonedItems[key] = 
					(newClonedItems[key] || newTmplItem( tmplItem, newTmplItems[tmplItem.parent.key + keySuffix] || tmplItem.parent, null, true ));
			}
		}
	}

	//---- Helper functions for template item ----

	function tiCalls( content, tmpl, data, options ) {
		if ( !content ) {
			return stack.pop();
		}
		stack.push({ _: content, tmpl: tmpl, item:this, data: data, options: options });
	}

	function tiNest( tmpl, data, options ) {
		// nested template, using {{tmpl}} tag
		return jQuery.tmpl( jQuery.template( tmpl ), data, options, this );
	}

	function tiWrap( call, wrapped ) {
		// nested template, using {{wrap}} tag
		var options = call.options || {};
		options.wrapped = wrapped;
		// Apply the template, which may incorporate wrapped content, 
		return jQuery.tmpl( jQuery.template( call.tmpl ), call.data, options, call.item );
	}

	function tiHtml( filter, textOnly ) {
		var wrapped = this._wrap;
		return jQuery.map(
			jQuery( jQuery.isArray( wrapped ) ? wrapped.join("") : wrapped ).filter( filter || "*" ),
			function(e) {
				return textOnly ?
					e.innerText || e.textContent :
					e.outerHTML || outerHtml(e);
			});
	}

	function tiUpdate() {
		var coll = this.nodes;
		jQuery.tmpl( null, null, null, this).insertBefore( coll[0] );
		jQuery( coll ).remove();
	}
})( jQuery );

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),

/***/ 371:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {/*jslint regexp: false, continue: true, indent: 4 */
/*global $, alert, jQuery */


(function ($) {
    $.tools = $.tools || {version: '@VERSION'};

    var tool;
    var LABELS = {};

    tool = $.tools.recurrenceinput = {
        conf: {
            lang: 'en',
            readOnly: false,
            firstDay: 0,

            // "REMOTE" FIELD
            startField: null,
            startFieldYear: null,
            startFieldMonth: null,
            startFieldDay: null,
            ajaxURL: null,
            ajaxContentType: 'application/json; charset=utf8',
            ributtonExtraClass: '',

            // INPUT CONFIGURATION
            hasRepeatForeverButton: true,

            // FORM OVERLAY
            formOverlay: {
                speed: 'fast',
                fixed: false
            },

            // JQUERY TEMPLATE NAMES
            template: {
                form: '#jquery-recurrenceinput-form-tmpl',
                display: '#jquery-recurrenceinput-display-tmpl'
            },

            // RECURRENCE TEMPLATES
            rtemplate: {
                daily: {
                    rrule: 'FREQ=DAILY',
                    fields: [
                        'ridailyinterval',
                        'rirangeoptions'
                    ]
                },
                mondayfriday: {
                    rrule: 'FREQ=WEEKLY;BYDAY=MO,FR',
                    fields: [
                        'rirangeoptions'
                    ]
                },
                weekdays: {
                    rrule: 'FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR',
                    fields: [
                        'rirangeoptions'
                    ]
                },
                weekly: {
                    rrule: 'FREQ=WEEKLY',
                    fields: [
                        'riweeklyinterval',
                        'riweeklyweekdays',
                        'rirangeoptions'
                    ]
                },
                monthly: {
                    rrule: 'FREQ=MONTHLY',
                    fields: [
                        'rimonthlyinterval',
                        'rimonthlyoptions',
                        'rirangeoptions'
                    ]
                },
                yearly: {
                    rrule: 'FREQ=YEARLY',
                    fields: [
                        'riyearlyinterval',
                        'riyearlyoptions',
                        'rirangeoptions'
                    ]
                }
            }
        },

        localize: function (language, labels) {
            LABELS[language] = labels;
        },

        setTemplates: function (templates, titles) {
            var lang, template;
            tool.conf.rtemplate = templates;
            for (lang in titles) {
                if (titles.hasOwnProperty(lang)) {
                    for (template in titles[lang]) {
                        if (titles[lang].hasOwnProperty(template)) {
                            LABELS[lang].rtemplate[template] = titles[lang][template];
                        }
                    }
                }
            }
        }

    };

    tool.localize("en", {
        displayUnactivate: 'Does not repeat',
        displayActivate: 'Repeats every',
        add_rules: 'Add',
        edit_rules: 'Edit',
        delete_rules: 'Delete',
        add:  'Add',
        refresh: 'Refresh',

        title: 'Repeat',
        preview: 'Selected dates',
        addDate: 'Add date',

        recurrenceType: 'Repeats:',

        dailyInterval1: 'Repeat every:',
        dailyInterval2: 'days',

        weeklyInterval1: 'Repeat every:',
        weeklyInterval2: 'week(s)',
        weeklyWeekdays: 'Repeat on:',
        weeklyWeekdaysHuman: 'on:',

        monthlyInterval1: 'Repeat every:',
        monthlyInterval2: 'month(s)',
        monthlyDayOfMonth1: 'Day',
        monthlyDayOfMonth1Human: 'on day',
        monthlyDayOfMonth2: 'of the month',
        monthlyDayOfMonth3: 'month(s)',
        monthlyWeekdayOfMonth1: 'The',
        monthlyWeekdayOfMonth1Human: 'on the',
        monthlyWeekdayOfMonth2: '',
        monthlyWeekdayOfMonth3: 'of the month',
        monthlyRepeatOn: 'Repeat on:',

        yearlyInterval1: 'Repeat every:',
        yearlyInterval2: 'year(s)',
        yearlyDayOfMonth1: 'Every',
        yearlyDayOfMonth1Human: 'on',
        yearlyDayOfMonth2: '',
        yearlyDayOfMonth3: '',
        yearlyWeekdayOfMonth1: 'The',
        yearlyWeekdayOfMonth1Human: 'on the',
        yearlyWeekdayOfMonth2: '',
        yearlyWeekdayOfMonth3: 'of',
        yearlyWeekdayOfMonth4: '',
        yearlyRepeatOn: 'Repeat on:',

        range: 'End recurrence:',
        rangeNoEnd: 'Never',
        rangeByOccurrences1: 'After',
        rangeByOccurrences1Human: 'ends after',
        rangeByOccurrences2: 'occurrence(s)',
        rangeByEndDate: 'On',
        rangeByEndDateHuman: 'ends on',

        including: ', and also',
        except: ', except for',

        cancel: 'Cancel',
        save: 'Save',

        recurrenceStart: 'Start of the recurrence',
        additionalDate: 'Additional date',
        include: 'Include',
        exclude: 'Exclude',
        remove: 'Remove',

        orderIndexes: ['first', 'second', 'third', 'fourth', 'last'],
        months: [
            'January', 'February', 'March', 'April', 'May', 'June',
            'July', 'August', 'September', 'October', 'November', 'December'],
        shortMonths: [
            'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
            'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        weekdays: [
            'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday',
            'Friday', 'Saturday'],
        shortWeekdays: [
            'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],

        longDateFormat: 'mmmm dd, yyyy',
        shortDateFormat: 'mm/dd/yyyy',

        unsupportedFeatures: 'Warning: This event uses recurrence features not ' +
                              'supported by this widget. Saving the recurrence ' +
                              'may change the recurrence in unintended ways:',
        noTemplateMatch: 'No matching recurrence template',
        multipleDayOfMonth: 'This widget does not support multiple days in monthly or yearly recurrence',
        bysetpos: 'BYSETPOS is not supported',
        noRule: 'No RRULE in RRULE data',
        noRepeatEvery: 'Error: The "Repeat every"-field must be between 1 and 1000',
        noEndDate: 'Error: End date is not set. Please set a correct value',
        noRepeatOn: 'Error: "Repeat on"-value must be selected',
        pastEndDate: 'Error: End date cannot be before start date',
        noEndAfterNOccurrences: 'Error: The "After N occurrences"-field must be between 1 and 1000',
        alreadyAdded: 'This date was already added',

        rtemplate: {
            daily: 'Daily',
            mondayfriday: 'Monday and Friday',
            weekdays: 'Weekday',
            weekly: 'Weekly',
            monthly: 'Monthly',
            yearly: 'Yearly'
        }
    });


    var OCCURRENCETMPL = ['<div class="rioccurrences">',
        '{{each occurrences}}',
            '<div class="occurrence ${occurrences[$index].type}">',
                '<span>',
                    '${occurrences[$index].formattedDate}',
                    '{{if occurrences[$index].type === "start"}}',
                        '<span class="rlabel">${i18n.recurrenceStart}</span>',
                    '{{/if}}',
                    '{{if occurrences[$index].type === "rdate"}}',
                        '<span class="rlabel">${i18n.additionalDate}</span>',
                    '{{/if}}',
                '</span>',
                '{{if !readOnly}}',
                    '<span class="action">',
                        '{{if occurrences[$index].type === "rrule"}}',
                            '<a date="${occurrences[$index].date}" href="#"',
                               'class="${occurrences[$index].type}" title="${i18n.exclude}">',
                                '${i18n.exclude}',
                            '</a>',
                        '{{/if}}',
                        '{{if occurrences[$index].type === "rdate"}}',
                            '<a date="${occurrences[$index].date}" href="#"',
                               'class="${occurrences[$index].type}" title="${i18n.remove}" >',
                                '${i18n.remove}',
                            '</a>',
                        '{{/if}}',
                        '{{if occurrences[$index].type === "exdate"}}',
                            '<a date="${occurrences[$index].date}" href="#"',
                               'class="${occurrences[$index].type}" title="${i18n.include}">',
                                '${i18n.include}',
                            '</a>',
                        '{{/if}}',
                    '</span>',
                '{{/if}}',
            '</div>',
        '{{/each}}',
        '<div class="batching">',
            '{{each batch.batches}}',
                '{{if $index === batch.currentBatch}}<span class="current">{{/if}}',
                    '<a href="#" start="${batch.batches[$index][0]}">[${batch.batches[$index][0]} - ${batch.batches[$index][1]}]</a>',
                '{{if $index === batch.currentBatch}}</span>{{/if}}',
            '{{/each}}',
        '</div></div>'].join('\n');

    $.template('occurrenceTmpl', OCCURRENCETMPL);

    var DISPLAYTMPL = ['<div class="ridisplay">',
        '<div class="rimain">',
            '{{if !readOnly}}',
                '<button name="riedit">${i18n.add_rules}</button>',
                '<button name="ridelete" style="display:none">${i18n.delete_rules}</button>',
            '{{/if}}',
            '<label class="ridisplay">${i18n.displayUnactivate}</label>',
        '</div>',
        '<div class="rioccurrences" style="display:none" /></div>'].join('\n');

    $.template('displayTmpl', DISPLAYTMPL);

    var FORMTMPL = ['<div class="riform">',
            '<form>',
                '<h1>${i18n.title}</h1>',
                '<div id="messagearea" style="display: none;">',
                '</div>',
                '<div id="rirtemplate">',
                    '<label for="${name}rtemplate" class="label">',
                        '${i18n.recurrenceType}',
                    '</label>',
                    '<select id="rirtemplate" name="rirtemplate" class="field">',
                        '{{each rtemplate}}',
                            '<option value="${$index}">${i18n.rtemplate[$index]}</value>',
                        '{{/each}}',
                    '</select>',
                '<div>',
                '<div id="riformfields">',
                    '<div id="ridailyinterval" class="rifield">',
                        '<label for="${name}dailyinterval" class="label">',
                            '${i18n.dailyInterval1}',
                        '</label>',
                        '<div class="field">',
                            '<input type="text" size="2"',
                                'value="1"',
                                'name="ridailyinterval"',
                                'id="${name}dailyinterval" />',
                            '${i18n.dailyInterval2}',
                        '</div>',
                    '</div>',
                    '<div id="riweeklyinterval" class="rifield">',
                        '<label for="${name}weeklyinterval" class="label">',
                            '${i18n.weeklyInterval1}',
                        '</label>',
                        '<div class="field">',
                            '<input type="text" size="2"',
                                'value="1"',
                                'name="riweeklyinterval"',
                                'id="${name}weeklyinterval"/>',
                            '${i18n.weeklyInterval2}',
                        '</div>',
                    '</div>',
                    '<div id="riweeklyweekdays" class="rifield">',
                        '<label for="${name}weeklyinterval" class="label">${i18n.weeklyWeekdays}</label>',
                        '<div class="field">',
                            '{{each orderedWeekdays}}',
                                '<div class="riweeklyweekday">',
                                    '<input type="checkbox"',
                                        'name="riweeklyweekdays${weekdays[$value]}"',
                                        'id="${name}weeklyWeekdays${weekdays[$value]}"',
                                        'value="${weekdays[$value]}" />',
                                    '<label for="${name}weeklyWeekdays${weekdays[$value]}">${i18n.shortWeekdays[$value]}</label>',
                                '</div>',
                            '{{/each}}',
                        '</div>',
                    '</div>',
                    '<div id="rimonthlyinterval" class="rifield">',
                        '<label for="rimonthlyinterval" class="label">${i18n.monthlyInterval1}</label>',
                        '<div class="field">',
                            '<input type="text" size="2"',
                                'value="1" ',
                                'name="rimonthlyinterval"/>',
                            '${i18n.monthlyInterval2}',
                        '</div>',
                    '</div>',
                    '<div id="rimonthlyoptions" class="rifield">',
                        '<label for="rimonthlytype" class="label">${i18n.monthlyRepeatOn}</label>',
                        '<div class="field">',
                            '<div>',
                                '<input',
                                    'type="radio"',
                                    'value="DAYOFMONTH"',
                                    'name="rimonthlytype"',
                                    'id="${name}monthlytype:DAYOFMONTH" />',
                                '<label for="${name}monthlytype:DAYOFMONTH">',
                                    '${i18n.monthlyDayOfMonth1}',
                                '</label>',
                                '<select name="rimonthlydayofmonthday"',
                                    'id="${name}monthlydayofmonthday">',
                                '{{each [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,',
                                        '18,19,20,21,22,23,24,25,26,27,28,29,30,31]}}',
                                    '<option value="${$value}">${$value}</option>',
                                '{{/each}}',
                                '</select>',
                                '${i18n.monthlyDayOfMonth2}',
                            '</div>',
                            '<div>',
                                '<input',
                                    'type="radio"',
                                    'value="WEEKDAYOFMONTH"',
                                    'name="rimonthlytype"',
                                    'id="${name}monthlytype:WEEKDAYOFMONTH" />',
                                '<label for="${name}monthlytype:WEEKDAYOFMONTH">',
                                    '${i18n.monthlyWeekdayOfMonth1}',
                                '</label>',
                                '<select name="rimonthlyweekdayofmonthindex">',
                                    '{{each i18n.orderIndexes}}',
                                        '<option value="${orderIndexes[$index]}">${$value}</option>',
                                    '{{/each}}',
                                '</select>',
                                '${i18n.monthlyWeekdayOfMonth2}',
                                '<select name="rimonthlyweekdayofmonth">',
                                    '{{each orderedWeekdays}}',
                                        '<option value="${weekdays[$value]}">${i18n.weekdays[$value]}</option>',
                                    '{{/each}}',
                                '</select>',
                                '${i18n.monthlyWeekdayOfMonth3}',
                            '</div>',
                        '</div>',
                    '</div>',
                    '<div id="riyearlyinterval" class="rifield">',
                        '<label for="riyearlyinterval" class="label">${i18n.yearlyInterval1}</label>',
                        '<div class="field">',
                            '<input type="text" size="2"',
                                'value="1" ',
                                'name="riyearlyinterval"/>',
                            '${i18n.yearlyInterval2}',
                        '</div>',
                    '</div>',
                    '<div id="riyearlyoptions" class="rifield">',
                        '<label for="riyearlyType" class="label">${i18n.yearlyRepeatOn}</label>',
                        '<div class="field">',
                            '<div>',
                                '<input',
                                    'type="radio"',
                                    'value="DAYOFMONTH"',
                                    'name="riyearlyType"',
                                    'id="${name}yearlytype:DAYOFMONTH" />',
                                '<label for="${name}yearlytype:DAYOFMONTH">',
                                    '${i18n.yearlyDayOfMonth1}',
                                '</label>',
                                '<select name="riyearlydayofmonthmonth">',
                                '{{each i18n.months}}',
                                    '<option value="${$index+1}">${$value}</option>',
                                '{{/each}}',
                                '</select>',
                                '${i18n.yearlyDayOfMonth2}',
                                '<select name="riyearlydayofmonthday">',
                                '{{each [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,',
                                        '18,19,20,21,22,23,24,25,26,27,28,29,30,31]}}',
                                    '<option value="${$value}">${$value}</option>',
                                '{{/each}}',
                                '</select>',
                                '${i18n.yearlyDayOfMonth3}',
                            '</div>',
                            '<div>',
                                '<input',
                                    'type="radio"',
                                    'value="WEEKDAYOFMONTH"',
                                    'name="riyearlyType"',
                                    'id="${name}yearlytype:WEEKDAYOFMONTH"/>',
                                '<label for="${name}yearlytype:WEEKDAYOFMONTH">',
                                    '${i18n.yearlyWeekdayOfMonth1}',
                                '</label>',
                                '<select name="riyearlyweekdayofmonthindex">',
                                '{{each i18n.orderIndexes}}',
                                    '<option value="${orderIndexes[$index]}">${$value}</option>',
                                '{{/each}}',
                                '</select>',
                                '<label for="${name}yearlytype:WEEKDAYOFMONTH">',
                                    '${i18n.yearlyWeekdayOfMonth2}',
                                '</label>',
                                '<select name="riyearlyweekdayofmonthday">',
                                '{{each orderedWeekdays}}',
                                    '<option value="${weekdays[$value]}">${i18n.weekdays[$value]}</option>',
                                '{{/each}}',
                                '</select>',
                                '${i18n.yearlyWeekdayOfMonth3}',
                                '<select name="riyearlyweekdayofmonthmonth">',
                                '{{each i18n.months}}',
                                    '<option value="${$index+1}">${$value}</option>',
                                '{{/each}}',
                                '</select>',
                                '${i18n.yearlyWeekdayOfMonth4}',
                            '</div>',
                        '</div>',
                    '</div>',
                    '<div id="rirangeoptions" class="rifield">',
                        '<label class="label">${i18n.range}</label>',
                        '<div class="field">',
                          '{{if hasRepeatForeverButton}}',
                            '<div>',
                                '<input',
                                    'type="radio"',
                                    'value="NOENDDATE"',
                                    'name="rirangetype"',
                                    'id="${name}rangetype:NOENDDATE"/>',
                                '<label for="${name}rangetype:NOENDDATE">',
                                    '${i18n.rangeNoEnd}',
                                '</label>',
                            '</div>',
                          '{{/if}}',
                            '<div>',
                                '<input',
                                    'type="radio"',
                                    'checked="checked"',
                                    'value="BYOCCURRENCES"',
                                    'name="rirangetype"',
                                    'id="${name}rangetype:BYOCCURRENCES"/>',
                                '<label for="${name}rangetype:BYOCCURRENCES">',
                                    '${i18n.rangeByOccurrences1}',
                                '</label>',
                                '<input',
                                    'type="text" size="3"',
                                    'value="7"',
                                    'name="rirangebyoccurrencesvalue" />',
                                '${i18n.rangeByOccurrences2}',
                            '</div>',
                            '<div>',
                                '<input',
                                    'type="radio"',
                                    'value="BYENDDATE"',
                                    'name="rirangetype"',
                                    'id="${name}rangetype:BYENDDATE"/>',
                                '<label for="${name}rangetype:BYENDDATE">',
                                    '${i18n.rangeByEndDate}',
                                '</label>',
                                '<input',
                                    'type="date"',
                                    'name="rirangebyenddatecalendar" />',
                            '</div>',
                        '</div>',
                    '</div>',
                '</div>',
                '<div class="rioccurrencesactions">',
                    '<div class="rioccurancesheader">',
                        '<h2>${i18n.preview}</h2>',
                        '<span class="refreshbutton action">',
                            '<a class="rirefreshbutton" href="#" title="${i18n.refresh}">',
                                '${i18n.refresh}',
                            '</a>',
                        '</span>',
                    '</div>',
                '</div>',
                '<div class="rioccurrences">',
                '</div>',
                '<div class="rioccurrencesactions">',
                    '<div class="rioccurancesheader">',
                        '<h2>${i18n.addDate}</h2>',
                    '</div>',
                    '<div class="riaddoccurrence">',
                        '<div class="errorarea"></div>',
                        '<input type="date" name="adddate" id="adddate" />',
                        '<input type="button" name="addaction" id="addaction" value="${i18n.add}">',
                    '</div>',
                '</div>',

                '<div class="ributtons">',
                    '<input',
                        'type="submit"',
                        'class="ricancelbutton ${ributtonExtraClass}"',
                        'value="${i18n.cancel}" />',
                    '<input',
                        'type="submit"',
                        'class="risavebutton ${ributtonExtraClass}"',
                        'value="${i18n.save}" />',
                '</div>',
            '</form></div>'].join('\n');

    $.template('formTmpl', FORMTMPL);

    // Formatting function (mostly) from jQueryTools dateinput
    var Re = /d{1,4}|m{1,4}|yy(?:yy)?|"[^"]*"|'[^']*'/g;

    function zeropad(val, len) {
        val = val.toString();
        len = len || 2;
        while (val.length < len) { val = "0" + val; }
        return val;
    }

    function format(date, fmt, conf) {
        var d = date.getDate(),
            D = date.getDay(),
            m = date.getMonth(),
            y = date.getFullYear(),

            flags = {
                d:    d,
                dd:   zeropad(d),
                ddd:  conf.i18n.shortWeekdays[D],
                dddd: conf.i18n.weekdays[D],
                m:    m + 1,
                mm:   zeropad(m + 1),
                mmm:  conf.i18n.shortMonths[m],
                mmmm: conf.i18n.months[m],
                yy:   String(y).slice(2),
                yyyy: y
            };

        var result = fmt.replace(Re, function ($0) {
            return flags.hasOwnProperty($0) ? flags[$0] : $0.slice(1, $0.length - 1);
        });

        return result;

    }

    /**
     * Parsing RFC5545 from widget
     */
    function widgetSaveToRfc5545(form, conf, tz) {
        var value = form.find('select[name=rirtemplate]').val();
        var rtemplate = conf.rtemplate[value];
        var result = rtemplate.rrule;
        var human = conf.i18n.rtemplate[value];
        var field, input, weekdays, i18nweekdays, i, j, index, tmp;
        var day, month, year, interval, yearlyType, occurrences, date;

        for (i = 0; i < rtemplate.fields.length; i++) {
            field = form.find('#' + rtemplate.fields[i]);

            switch (field.attr('id')) {

            case 'ridailyinterval':
                interval = field.find('input[name=ridailyinterval]').val();
                if (interval !== '1') {
                    result += ';INTERVAL=' + interval;
                }
                human = interval + ' ' + conf.i18n.dailyInterval2;
                break;

            case 'riweeklyinterval':
                interval = field.find('input[name=riweeklyinterval]').val();
                if (interval !== '1') {
                    result += ';INTERVAL=' + interval;
                }
                human = interval + ' ' + conf.i18n.weeklyInterval2;
                break;

            case 'riweeklyweekdays':
                weekdays = '';
                i18nweekdays = '';
                for (j = 0; j < conf.weekdays.length; j++) {
                    input = field.find('input[name=riweeklyweekdays' + conf.weekdays[j] + ']');
                    if (input.is(':checked')) {
                        if (weekdays) {
                            weekdays += ',';
                            i18nweekdays += ', ';
                        }
                        weekdays += conf.weekdays[j];
                        i18nweekdays += conf.i18n.weekdays[j];
                    }
                }
                if (weekdays) {
                    result += ';BYDAY=' + weekdays;
                    human += ' ' + conf.i18n.weeklyWeekdaysHuman + ' ' + i18nweekdays;
                }
                break;

            case 'rimonthlyinterval':
                interval = field.find('input[name=rimonthlyinterval]').val();
                if (interval !== '1') {
                    result += ';INTERVAL=' + interval;
                }
                human = interval + ' ' + conf.i18n.monthlyInterval2;
                break;

            case 'rimonthlyoptions':
                var monthlyType = $('input[name=rimonthlytype]:checked', form).val();
                switch (monthlyType) {

                case 'DAYOFMONTH':
                    day = $('select[name=rimonthlydayofmonthday]', form).val();
                    result += ';BYMONTHDAY=' + day;
                    human += ', ' + conf.i18n.monthlyDayOfMonth1Human + ' ' + day + ' ' + conf.i18n.monthlyDayOfMonth2;
                    break;
                case 'WEEKDAYOFMONTH':
                    index = $('select[name=rimonthlyweekdayofmonthindex]', form).val();
                    day = $('select[name=rimonthlyweekdayofmonth]', form).val();
                    if ($.inArray(day, ['MO', 'TU', 'WE', 'TH', 'FR', 'SA', 'SU']) > -1) {
                        result += ';BYDAY=' + index + day;
                        human += ', ' + conf.i18n.monthlyWeekdayOfMonth1Human + ' ';
                        human += ' ' + conf.i18n.orderIndexes[$.inArray(index, conf.orderIndexes)];
                        human += ' ' + conf.i18n.monthlyWeekdayOfMonth2;
                        human += ' ' + conf.i18n.weekdays[$.inArray(day, conf.weekdays)];
                        human += ' ' + conf.i18n.monthlyDayOfMonth2;
                    }
                    break;
                }
                break;

            case 'riyearlyinterval':
                interval = field.find('input[name=riyearlyinterval]').val();
                if (interval !== '1') {
                    result += ';INTERVAL=' + interval;
                }
                human = interval + ' ' + conf.i18n.yearlyInterval2;
                break;

            case 'riyearlyoptions':
                yearlyType = $('input[name=riyearlyType]:checked', form).val();
                switch (yearlyType) {

                case 'DAYOFMONTH':
                    month = $('select[name=riyearlydayofmonthmonth]', form).val();
                    day = $('select[name=riyearlydayofmonthday]', form).val();
                    result += ';BYMONTH=' + month;
                    result += ';BYMONTHDAY=' + day;
                    human += ', ' + conf.i18n.yearlyDayOfMonth1Human + ' ' + conf.i18n.months[month - 1] + ' ' + day;
                    break;
                case 'WEEKDAYOFMONTH':
                    index = $('select[name=riyearlyweekdayofmonthindex]', form).val();
                    day = $('select[name=riyearlyweekdayofmonthday]', form).val();
                    month = $('select[name=riyearlyweekdayofmonthmonth]', form).val();
                    result += ';BYMONTH=' + month;
                    if ($.inArray(day, ['MO', 'TU', 'WE', 'TH', 'FR', 'SA', 'SU']) > -1) {
                        result += ';BYDAY=' + index + day;
                        human += ', ' + conf.i18n.yearlyWeekdayOfMonth1Human;
                        human += ' ' + conf.i18n.orderIndexes[$.inArray(index, conf.orderIndexes)];
                        human += ' ' + conf.i18n.yearlyWeekdayOfMonth2;
                        human += ' ' + conf.i18n.weekdays[$.inArray(day, conf.weekdays)];
                        human += ' ' + conf.i18n.yearlyWeekdayOfMonth3;
                        human += ' ' + conf.i18n.months[month - 1];
                        human += ' ' + conf.i18n.yearlyWeekdayOfMonth4;
                    }
                    break;
                }
                break;

            case 'rirangeoptions':
                var rangeType = form.find('input[name=rirangetype]:checked').val();
                switch (rangeType) {

                case 'BYOCCURRENCES':
                    occurrences = form.find('input[name=rirangebyoccurrencesvalue]').val();
                    result += ';COUNT=' + occurrences;
                    human += ', ' + conf.i18n.rangeByOccurrences1Human;
                    human += ' ' + occurrences;
                    human += ' ' + conf.i18n.rangeByOccurrences2;
                    break;
                case 'BYENDDATE':
                    field = form.find('input[name=rirangebyenddatecalendar]');
                    date = field.data('dateinput').getValue('yyyymmdd');
                    result += ';UNTIL=' + date + 'T000000';
                    if (tz === true) {
                        // Make it UTC:
                        result += 'Z';
                    }
                    human += ', ' + conf.i18n.rangeByEndDateHuman;
                    human += ' ' + field.data('dateinput').getValue(conf.i18n.longDateFormat);
                    break;
                }
                break;
            }
        }

        if (form.ical.RDATE !== undefined && form.ical.RDATE.length > 0) {
            form.ical.RDATE.sort();
            tmp = [];
            for (i = 0; i < form.ical.RDATE.length; i++) {
                if (form.ical.RDATE[i] !== '') {
                    year = parseInt(form.ical.RDATE[i].substring(0, 4), 10);
                    month = parseInt(form.ical.RDATE[i].substring(4, 6), 10) - 1;
                    day = parseInt(form.ical.RDATE[i].substring(6, 8), 10);
                    tmp.push(format(new Date(year, month, day), conf.i18n.longDateFormat, conf));
                }
            }
            if (tmp.length !== 0) {
                human = human + conf.i18n.including + ' ' + tmp.join('; ');
            }
        }

        if (form.ical.EXDATE !== undefined && form.ical.EXDATE.length > 0) {
            form.ical.EXDATE.sort();
            tmp = [];
            for (i = 0; i < form.ical.EXDATE.length; i++) {
                if (form.ical.EXDATE[i] !== '') {
                    year = parseInt(form.ical.EXDATE[i].substring(0, 4), 10);
                    month = parseInt(form.ical.EXDATE[i].substring(4, 6), 10) - 1;
                    day = parseInt(form.ical.EXDATE[i].substring(6, 8), 10);
                    tmp.push(format(new Date(year, month, day), conf.i18n.longDateFormat, conf));
                }
            }
            if (tmp.length !== 0) {
                human = human + conf.i18n.except + ' ' + tmp.join('; ');
            }
        }
        result = 'RRULE:' + result;
        if (form.ical.EXDATE !== undefined && form.ical.EXDATE.join() !== "") {
            tmp = $.map(form.ical.EXDATE, function (x) {
                if (x.length === 8) { // DATE format. Make it DATE-TIME
                    x += 'T000000';
                }
                if (tz === true) {
                    // Make it UTC:
                    x += 'Z';
                }
                return x;
            });
            result = result + '\nEXDATE:' + tmp;
        }
        if (form.ical.RDATE !== undefined && form.ical.RDATE.join() !== "") {
            tmp = $.map(form.ical.RDATE, function (x) {
                if (x.length === 8) { // DATE format. Make it DATE-TIME
                    x += 'T000000';
                }
                if (tz === true) {
                    // Make it UTC:
                    x += 'Z';
                }
                return x;
            });
            result = result + '\nRDATE:' + tmp;
        }
        return {result: result, description: human};
    }

    function parseLine(icalline) {
        var result = {};
        var pos = icalline.indexOf(':');
        var property = icalline.substring(0, pos);
        result.value = icalline.substring(pos + 1);

        if (property.indexOf(';') !== -1) {
            pos = property.indexOf(';');
            result.parameters = property.substring(pos + 1);
            result.property = property.substring(0, pos);
        } else {
            result.parameters = null;
            result.property = property;
        }
        return result;
    }

    function cleanDates(dates) {
        // Get rid of timezones
        // TODO: We could parse dates and range here, maybe?
        var result = [];
        var splitDates = dates.split(',');
        var date;

        for (date in splitDates) {
            if (splitDates.hasOwnProperty(date)) {
                if (splitDates[date].indexOf('Z') !== -1) {
                    result.push(splitDates[date].substring(0, 15));
                } else {
                    result.push(splitDates[date]);
                }
            }
        }
        return result;
    }

    function parseIcal(icaldata) {
        var lines = [];
        var result = {};
        var propAndValue = [];
        var line = null;
        var nextline;

        lines = icaldata.split('\n');
        lines.reverse();
        while (true) {
            if (lines.length > 0) {
                nextline = lines.pop();
                if (nextline.charAt(0) === ' ' || nextline.charAt(0) === '\t') {
                    // Line continuation:
                    line = line + nextline;
                    continue;
                }
            } else {
                nextline = '';
            }

            // New line; the current one is finished, add it to the result.
            if (line !== null) {
                line = parseLine(line);
                 // We ignore properties for now
                if (line.property === 'RDATE' || line.property === 'EXDATE') {
                    result[line.property] = cleanDates(line.value);
                } else {
                    result[line.property] = line.value;
                }
            }

            line = nextline;
            if (line === '') {
                break;
            }
        }
        return result;
    }

    function widgetLoadFromRfc5545(form, conf, icaldata, force) {
        var unsupportedFeatures = [];
        var i, matches, match, matchIndex, rtemplate, d, input, index;
        var selector, selectors, field, radiobutton, start, end;
        var interval, byday, bymonth, bymonthday, count, until;
        var day, month, year, weekday, ical;

        form.ical = parseIcal(icaldata);
        if (form.ical.RRULE === undefined) {
            unsupportedFeatures.push(conf.i18n.noRule);
            if (!force) {
                return -1; // Fail!
            }
        } else {


            matches = /INTERVAL=([0-9]+);?/.exec(form.ical.RRULE);
            if (matches) {
                interval = matches[1];
            } else {
                interval = '1';
            }

            matches = /BYDAY=([^;]+);?/.exec(form.ical.RRULE);
            if (matches) {
                byday = matches[1];
            } else {
                byday = '';
            }

            matches = /BYMONTHDAY=([^;]+);?/.exec(form.ical.RRULE);
            if (matches) {
                bymonthday = matches[1].split(",");
            } else {
                bymonthday = null;
            }

            matches = /BYMONTH=([^;]+);?/.exec(form.ical.RRULE);
            if (matches) {
                bymonth = matches[1].split(",");
            } else {
                bymonth = null;
            }

            matches = /COUNT=([0-9]+);?/.exec(form.ical.RRULE);
            if (matches) {
                count = matches[1];
            } else {
                count = null;
            }

            matches = /UNTIL=([0-9T]+);?/.exec(form.ical.RRULE);
            if (matches) {
                until = matches[1];
            } else {
                until = null;
            }

            matches = /BYSETPOS=([^;]+);?/.exec(form.ical.RRULE);
            if (matches) {
                unsupportedFeatures.push(conf.i18n.bysetpos);
            }

            // Find the best rule:
            match = '';
            matchIndex = null;
            for (i in conf.rtemplate) {
                if (conf.rtemplate.hasOwnProperty(i)) {
                    rtemplate = conf.rtemplate[i];
                    if (form.ical.RRULE.indexOf(rtemplate.rrule) === 0) {
                        if (form.ical.RRULE.length > match.length) {
                            // This is the best match so far
                            match = form.ical.RRULE;
                            matchIndex = i;
                        }
                    }
                }
            }

            if (match) {
                rtemplate = conf.rtemplate[matchIndex];
                // Set the selector:
                selector = form.find('select[name=rirtemplate]').val(matchIndex);
            } else {
                for (rtemplate in conf.rtemplate) {
                    if (conf.rtemplate.hasOwnProperty(rtemplate)) {
                        rtemplate = conf.rtemplate[rtemplate];
                        break;
                    }
                }
                unsupportedFeatures.push(conf.i18n.noTemplateMatch);
            }

            for (i = 0; i < rtemplate.fields.length; i++) {
                field = form.find('#' + rtemplate.fields[i]);
                switch (field.attr('id')) {

                case 'ridailyinterval':
                    field.find('input[name=ridailyinterval]').val(interval);
                    break;

                case 'riweeklyinterval':
                    field.find('input[name=riweeklyinterval]').val(interval);
                    break;

                case 'riweeklyweekdays':
                    byday = byday.split(",");
                    for (d = 0; d < conf.weekdays.length; d++) {
                        day = conf.weekdays[d];
                        input = field.find('input[name=riweeklyweekdays' + day + ']');
                        input.attr('checked', $.inArray(day, byday) !== -1);
                    }
                    break;

                case 'rimonthlyinterval':
                    field.find('input[name=rimonthlyinterval]').val(interval);
                    break;

                case 'rimonthlyoptions':
                    var monthlyType = 'DAYOFMONTH'; // Default to using BYMONTHDAY

                    if (bymonthday) {
                        monthlyType = 'DAYOFMONTH';
                        if (bymonthday.length > 1) {
                            // No support for multiple days in one month
                            unsupportedFeatures.push(conf.i18n.multipleDayOfMonth);
                            // Just keep the first
                            bymonthday = bymonthday[0];
                        }
                        field.find('select[name=rimonthlydayofmonthday]').val(bymonthday);
                    }

                    if (byday) {
                        monthlyType = 'WEEKDAYOFMONTH';

                        if (byday.indexOf(',') !== -1) {
                            // No support for multiple days in one month
                            unsupportedFeatures.push(conf.i18n.multipleDayOfMonth);
                            byday = byday.split(",")[0];
                        }
                        index = byday.slice(0, -2);
                        if (index.charAt(0) !== '+' && index.charAt(0) !== '-') {
                            index = '+' + index;
                        }
                        weekday = byday.slice(-2);
                        field.find('select[name=rimonthlyweekdayofmonthindex]').val(index);
                        field.find('select[name=rimonthlyweekdayofmonth]').val(weekday);
                    }

                    selectors = field.find('input[name=rimonthlytype]');
                    for (index = 0; index < selectors.length; index++) {
                        radiobutton = selectors[index];
                        $(radiobutton).attr('checked', radiobutton.value === monthlyType);
                    }
                    break;

                case 'riyearlyinterval':
                    field.find('input[name=riyearlyinterval]').val(interval);
                    break;

                case 'riyearlyoptions':
                    var yearlyType = 'DAYOFMONTH'; // Default to using BYMONTHDAY

                    if (bymonthday) {
                        yearlyType = 'DAYOFMONTH';
                        if (bymonthday.length > 1) {
                            // No support for multiple days in one month
                            unsupportedFeatures.push(conf.i18n.multipleDayOfMonth);
                            bymonthday = bymonthday[0];
                        }
                        field.find('select[name=riyearlydayofmonthmonth]').val(bymonth);
                        field.find('select[name=riyearlydayofmonthday]').val(bymonthday);
                    }

                    if (byday) {
                        yearlyType = 'WEEKDAYOFMONTH';

                        if (byday.indexOf(',') !== -1) {
                            // No support for multiple days in one month
                            unsupportedFeatures.push(conf.i18n.multipleDayOfMonth);
                            byday = byday.split(",")[0];
                        }
                        index = byday.slice(0, -2);
                        if (index.charAt(0) !== '+' && index.charAt(0) !== '-') {
                            index = '+' + index;
                        }
                        weekday = byday.slice(-2);
                        field.find('select[name=riyearlyweekdayofmonthindex]').val(index);
                        field.find('select[name=riyearlyweekdayofmonthday]').val(weekday);
                        field.find('select[name=riyearlyweekdayofmonthmonth]').val(bymonth);
                    }

                    selectors = field.find('input[name=riyearlyType]');
                    for (index = 0; index < selectors.length; index++) {
                        radiobutton = selectors[index];
                        $(radiobutton).attr('checked', radiobutton.value === yearlyType);
                    }
                    break;

                case 'rirangeoptions':
                    var rangeType = 'NOENDDATE';

                    if (count) {
                        rangeType = 'BYOCCURRENCES';
                        field.find('input[name=rirangebyoccurrencesvalue]').val(count);
                    }

                    if (until) {
                        rangeType = 'BYENDDATE';
                        input = field.find('input[name=rirangebyenddatecalendar]');
                        year = until.slice(0, 4);
                        month = until.slice(4, 6);
                        month = parseInt(month, 10) - 1;
                        day = until.slice(6, 8);
                        input.data('dateinput').setValue(new Date(year, month, day));
                    }

                    selectors = field.find('input[name=rirangetype]');
                    for (index = 0; index <  selectors.length; index++) {
                        radiobutton = selectors[index];
                        $(radiobutton).attr('checked', radiobutton.value === rangeType);
                    }
                    break;
                }
            }
        }

        var messagearea = form.find('#messagearea');
        if (unsupportedFeatures.length !== 0) {
            messagearea.text(conf.i18n.unsupportedFeatures + ' ' + unsupportedFeatures.join('; '));
            messagearea.show();
            return 1;
        } else {
            messagearea.text('');
            messagearea.hide();
            return 0;
        }

    }

    /**
     * RecurrenceInput - form, display and tools for recurrenceinput widget
     */
    function RecurrenceInput(conf, textarea) {

        var self = this;
        var form, display;

        // Extend conf with non-configurable data used by templates.
        var orderedWeekdays = [];
        var index, i;
        for (i = 0; i < 7; i++) {
            index = i + conf.firstDay;
            if (index > 6) {
                index = index - 7;
            }
            orderedWeekdays.push(index);
        }

        $.extend(conf, {
            orderIndexes: ['+1', '+2', '+3', '+4', '-1'],
            weekdays: ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'],
            orderedWeekdays: orderedWeekdays
        });

        // The recurrence type dropdown should show certain fields depending
        // on selection:
        function displayFields(selector) {
            var i;
            // First hide all the fields
            form.find('.rifield').hide();
            // Then show the ones that should be shown.
            var value = selector.val();
            if (value) {
                var rtemplate = conf.rtemplate[value];
                for (i = 0; i < rtemplate.fields.length; i++) {
                    form.find('#' + rtemplate.fields[i]).show();
                }
            }
        }

        function occurrenceExclude(event) {
            event.preventDefault();
            if (form.ical.EXDATE === undefined) {
                form.ical.EXDATE = [];
            }
            form.ical.EXDATE.push(this.attributes.date.value);
            var $this = $(this);
            $this.attr('class', 'exdate');
            $this.parent().parent().addClass('exdate');
            $this.unbind(event);
            $this.click(occurrenceInclude); // Jslint warns here, but that's OK.
        }

        function occurrenceInclude(event) {
            event.preventDefault();
            form.ical.EXDATE.splice($.inArray(this.attributes.date.value, form.ical.EXDATE), 1);
            var $this = $(this);
            $this.attr('class', 'rrule');
            $this.parent().parent().removeClass('exdate');
            $this.unbind(event);
            $this.click(occurrenceExclude);
        }

        function occurrenceDelete(event) {
            event.preventDefault();
            form.ical.RDATE.splice($.inArray(this.attributes.date.value, form.ical.RDATE), 1);
            $(this).parent().parent().hide('slow', function () {
                $(this).remove();
            });
        }

        function occurrenceAdd(event) {
            event.preventDefault();
            var dateinput = form
                .find('.riaddoccurrence input#adddate')
                .data('dateinput');
            var datevalue = dateinput.getValue('yyyymmddT000000');
            if (form.ical.RDATE === undefined) {
                form.ical.RDATE = [];
            }
            var errorarea = form.find('.riaddoccurrence div.errorarea');
            errorarea.text('');
            errorarea.hide();

            // Add date only if it is not already in RDATE
            if ($.inArray(datevalue, form.ical.RDATE) === -1) {
                form.ical.RDATE.push(datevalue);
                var html = ['<div class="occurrence rdate" style="display: none;">',
                        '<span class="rdate">',
                            dateinput.getValue(conf.i18n.longDateFormat),
                            '<span class="rlabel">' + conf.i18n.additionalDate + '</span>',
                        '</span>',
                        '<span class="action">',
                            '<a date="' + datevalue + '" href="#" class="rdate" >',
                                'Include',
                            '</a>',
                        '</span>',
                        '</div>'].join('\n');
                form.find('div.rioccurrences').prepend(html);
                $(form.find('div.rioccurrences div')[0]).slideDown();
                $(form.find('div.rioccurrences .action a.rdate')[0]).click(occurrenceDelete);
            } else {
                errorarea.text(conf.i18n.alreadyAdded).show();
            }
        }

        // element is where to find the tag in question. Can be the form
        // or the display widget. Defaults to the form.
        function loadOccurrences(startdate, rfc5545, start, readonly) {
            var element, occurrenceDiv;

            if (!readonly) {
                element = form;
            } else {
                element = display;
            }

            occurrenceDiv = element.find('.rioccurrences');
            occurrenceDiv.hide();

            var year, month, day;
            year = startdate.getFullYear();
            month = startdate.getMonth() + 1;
            day = startdate.getDate();

            var data = {year: year,
                       month: month, // Sending January as 0? I think not.
                       day: day,
                       rrule: rfc5545,
                       format: conf.i18n.longDateFormat,
                       start: start};

            var dict = {
                url: conf.ajaxURL,
                async: false, // Can't be tested if it's asynchronous, annoyingly.
                type: 'post',
                dataType: 'json',
                contentType: conf.ajaxContentType,
                cache: false,
                data: data,
                success: function (data, status, jqXHR) {
                    var result, element;

                    if (!readonly) {
                        element = form;
                    } else {
                        element = display;
                    }
                    data.readOnly = readonly;
                    data.i18n = conf.i18n;

                    // Format dates:
                    var occurrence, date, y, m, d, each;
                    for (each in data.occurrences) {
                        if (data.occurrences.hasOwnProperty(each)) {
                            occurrence = data.occurrences[each];
                            date = occurrence.date;
                            y = parseInt(date.substring(0, 4), 10);
                            m = parseInt(date.substring(4, 6), 10) - 1; // jan=0
                            d = parseInt(date.substring(6, 8), 10);
                            occurrence.formattedDate = format(new Date(y, m, d), conf.i18n.longDateFormat, conf);
                        }
                    }

                    result = $.tmpl('occurrenceTmpl', data);
                    occurrenceDiv = element.find('.rioccurrences');
                    occurrenceDiv.replaceWith(result);

                    // Add the batch actions:
                    element.find('.rioccurrences .batching a').click(
                        function (event) {
                            event.preventDefault();
                            loadOccurrences(startdate, rfc5545, this.attributes.start.value, readonly);
                        }
                    );

                    // Add the delete/undelete actions:
                    if (!readonly) {
                        element.find('.rioccurrences .action a.rrule').click(occurrenceExclude);
                        element.find('.rioccurrences .action a.exdate').click(occurrenceInclude);
                        element.find('.rioccurrences .action a.rdate').click(occurrenceDelete);
                    }
                    // Show the new div
                    element.find('.rioccurrences').show();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert(textStatus);
                }
            };

            $.ajax(dict);
        }

        function getField(field) {
            // See if it is a field already
            var realField = $(field);
            if (!realField.length) {
                // Otherwise, we assume it's an id:
                realField = $('#' + field);
            }
            if (!realField.length) {
                // Still not? Then it's a name.
                realField = $("input[name='" + field + "']");
            }
            return realField;
        }
        function findStartDate() {
            var startdate = null;
            var startField, startFieldYear, startFieldMonth, startFieldDay;

            // Find the default byday and bymonthday from the start date, if any:
            if (conf.startField) {
                startField = getField(conf.startField);
                if (!startField.length) {
                    // Field not found
                    return null;
                }
                // Now we have a field, see if it is a dateinput field:
                startdate = startField.data('dateinput');
                if (!startdate) {
                    //No, it wasn't, just try to interpret it with Date()
                    startdate = startField.val();
                    if (startdate === "") {
                        // Probably not an input at all. Try to see if it contains a date
                        startdate = startField.text();
                    }
                } else {
                    // Yes it was, get the date:
                    startdate = startdate.getValue();
                }

                if (typeof startdate === 'string') {
                    // convert human readable, non ISO8601 dates, like
                    // '2014-04-24 19:00', where the 'T' separator is missing.
                    startdate = startdate.replace(' ', 'T');
                }

                startdate = new Date(startdate);
            } else if (conf.startFieldYear &&
                       conf.startFieldMonth &&
                       conf.startFieldDay) {
                startFieldYear = getField(conf.startFieldYear);
                startFieldMonth = getField(conf.startFieldMonth);
                startFieldDay = getField(conf.startFieldDay);
                if (!startFieldYear.length &&
                    !startFieldMonth.length &&
                    !startFieldDay.length) {
                    // Field not found
                    return null;
                }
                startdate = new Date(startFieldYear.val(),
                                     startFieldMonth.val() - 1,
                                     startFieldDay.val());
            }
            if (startdate === null) {
                return null;
            }
            // We have some sort of startdate:
            if (isNaN(startdate)) {
                return null;
            }
            return startdate;
        }
        function findEndDate(form) {
            var endField, enddate;

            endField = form.find('input[name=rirangebyenddatecalendar]');

            // Now we have a field, see if it is a dateinput field:
            enddate = endField.data('dateinput');
            if (!enddate) {
                //No, it wasn't, just try to interpret it with Date()
                enddate = endField.val();
            } else {
                // Yes it was, get the date:
                enddate = enddate.getValue();
            }
            enddate = new Date(enddate);

            // if the end date is incorrect or the field is left empty
            if (isNaN(enddate) || endField.val() === "") {
                return null;
            }
            return enddate;
        }
        function findIntField(fieldName, form) {
            var field, num, isInt;

            field = form.find('input[name=' + fieldName + ']');

            num = field.val();

            // if it's not a number or the field is left empty
            if (isNaN(num) || (num.toString().indexOf('.') !== -1) || field.val() === "") {
                return null;
            }
            return num;
        }

        // Loading (populating) display and form widget with
        // passed RFC5545 string (data)
        function loadData(rfc5545) {
            var selector, format, startdate, dayindex, day;

            if (rfc5545) {
                widgetLoadFromRfc5545(form, conf, rfc5545, true);
            }

            startdate = findStartDate();

            if (startdate !== null) {
                // If the date is a real date, set the defaults in the form
                form.find('select[name=rimonthlydayofmonthday]').val(startdate.getDate());
                dayindex = conf.orderIndexes[Math.floor((startdate.getDate() - 1) / 7)];
                day = conf.weekdays[startdate.getDay()];
                form.find('select[name=rimonthlyweekdayofmonthindex]').val(dayindex);
                form.find('select[name=rimonthlyweekdayofmonth]').val(day);

                form.find('select[name=riyearlydayofmonthmonth]').val(startdate.getMonth() + 1);
                form.find('select[name=riyearlydayofmonthday]').val(startdate.getDate());
                form.find('select[name=riyearlyweekdayofmonthindex]').val(dayindex);
                form.find('select[name=riyearlyweekdayofmonthday]').val(day);
                form.find('select[name=riyearlyweekdayofmonthmonth]').val(startdate.getMonth() + 1);

                // Now when we have a start date, we can also do an ajax call to calculate occurrences:
                loadOccurrences(startdate, widgetSaveToRfc5545(form, conf, false).result, 0, false);

                // Show the add and refresh buttons:
                form.find('div.rioccurrencesactions').show();

            } else {
                // No EXDATE/RDATE support
                form.find('div.rioccurrencesactions').hide();
            }


            selector = form.find('select[name=rirtemplate]');
            displayFields(selector);
        }

        function recurrenceOn() {
            var RFC5545 = widgetSaveToRfc5545(form, conf, false);
            var label = display.find('label[class=ridisplay]');
            label.text(conf.i18n.displayActivate + ' ' + RFC5545.description);
            textarea.val(RFC5545.result).change();
            var startdate = findStartDate();
            if (startdate !== null) {
                loadOccurrences(startdate, widgetSaveToRfc5545(form, conf, false).result, 0, true);
            }
            display.find('button[name="riedit"]').text(conf.i18n.edit_rules);
            display.find('button[name="ridelete"]').show();
        }

        function recurrenceOff() {
            var label = display.find('label[class=ridisplay]');
            label.text(conf.i18n.displayUnactivate);
            textarea.val('').change();  // Clear the textarea.
            display.find('.rioccurrences').hide();
            display.find('button[name="riedit"]').text(conf.i18n.add_rules);
            display.find('button[name="ridelete"]').hide();
        }

        function checkFields(form) {
            var startDate, endDate, num, messagearea;
            startDate = findStartDate();

            // Hide any error message from before
            messagearea = form.find('#messagearea');
            messagearea.text('');
            messagearea.hide();

            // Hide add field errors
            form.find('.riaddoccurrence div.errorarea').text('').hide();

            // Repeats Daily
            if (form.find('#ridailyinterval').css('display') === 'block') {
                // Check repeat every field
                num = findIntField('ridailyinterval', form);
                if (!num || num < 1 || num > 1000) {
                    messagearea.text(conf.i18n.noRepeatEvery).show();
                    return false;
                }
            }

            // Repeats Weekly
            if (form.find('#riweeklyinterval').css('display') === 'block') {
                // Check repeat every field
                num = findIntField('riweeklyinterval', form);
                if (!num || num < 1 || num > 1000) {
                    messagearea.text(conf.i18n.noRepeatEvery).show();
                    return false;
                }
            }

            // Repeats Monthly
            if (form.find('#rimonthlyinterval').css('display') === 'block') {
                // Check repeat every field
                num = findIntField('rimonthlyinterval', form);
                if (!num || num < 1 || num > 1000) {
                    messagearea.text(conf.i18n.noRepeatEvery).show();
                    return false;
                }

                // Check repeat on
                if (form.find('#rimonthlyoptions input:checked').length === 0) {
                    messagearea.text(conf.i18n.noRepeatOn).show();
                    return false;
                }
            }

            // Repeats Yearly
            if (form.find('#riyearlyinterval').css('display') === 'block') {
                // Check repeat every field
                num = findIntField('riyearlyinterval', form);
                if (!num || num < 1 || num > 1000) {
                    messagearea.text(conf.i18n.noRepeatEvery).show();
                    return false;
                }

                // Check repeat on
                if (form.find('#riyearlyoptions input:checked').length === 0) {
                    messagearea.text(conf.i18n.noRepeatOn).show();
                    return false;
                }
            }

            // End recurrence fields

            // If after N occurences is selected, check its value
            if (form.find('input[value="BYOCCURRENCES"]:visible:checked').length > 0) {
                num = findIntField('rirangebyoccurrencesvalue', form);
                if (!num || num < 1 || num > 1000) {
                    messagearea.text(conf.i18n.noEndAfterNOccurrences).show();
                    return false;
                }
            }

            // If end date is selected, check its value
            if (form.find('input[value="BYENDDATE"]:visible:checked').length > 0) {
                endDate = findEndDate(form);
                if (!endDate) {
                    // if endDate is null that means the field is empty
                    messagearea.text(conf.i18n.noEndDate).show();
                    return false;
                } else if (endDate < startDate) {
                    // the end date cannot be before start date
                    messagearea.text(conf.i18n.pastEndDate).show();
                    return false;
                }
            }

            return true;
        }

        function save(event) {
            event.preventDefault();
            // if no field errors, process the request
            if (checkFields(form)) {
                // close overlay
                form.overlay().close();
                recurrenceOn();
            }
        }

        function cancel(event) {
            event.preventDefault();
            // close overlay
            form.overlay().close();
        }

        function updateOccurances() {
            var startDate;
            startDate = findStartDate();

            // if no field errors, process the request
            if (checkFields(form)) {
                loadOccurrences(startDate,
                    widgetSaveToRfc5545(form, conf, false).result,
                    0,
                    false);
            }
        }

        /*
          Load the templates
        */

        display = $.tmpl('displayTmpl', conf);
        form = $.tmpl('formTmpl', conf);

        // Make an overlay and hide it
        form.overlay(conf.formOverlay).hide();
        form.ical = {RDATE: [], EXDATE: []};

        $.tools.dateinput.localize(conf.lang,  {
            months:      LABELS[conf.lang].months.join(),
            shortMonths: LABELS[conf.lang].shortMonths.join(),
            days:        LABELS[conf.lang].weekdays.join(),
            shortDays:   LABELS[conf.lang].shortWeekdays.join()
        });

        // Make the date input into a calendar dateinput()
        form.find('input[name=rirangebyenddatecalendar]').dateinput({
            selectors: true,
            lang: conf.lang,
            format: conf.i18n.shortDateFormat,
            firstDay: conf.firstDay,
            yearRange: [-5, 10]
        }).data('dateinput').setValue(new Date());

        if (textarea.val()) {
            var result = widgetLoadFromRfc5545(form, conf, textarea.val(), false);
            if (result === -1) {
                var label = display.find('label[class=ridisplay]');
                label.text(conf.i18n.noRule);
            } else {
                recurrenceOn();
            }
        }

        /*
          Do all the GUI stuff:
        */

        // When you click "Delete...", the recurrence rules should be cleared.
        display.find('button[name=ridelete]').click(function (e) {
            e.preventDefault();
            recurrenceOff();
        });

        // Show form overlay when you click on the "Edit..." link
        display.find('button[name=riedit]').click(
            function (e) {
                // Load the form to set up the right fields to show, etc.
                loadData(textarea.val());
                e.preventDefault();
                form.overlay().load();
            }
        );

        // Pop up the little add form when clicking "Add"
        form.find('div.riaddoccurrence input#adddate').dateinput({
            selectors: true,
            lang: conf.lang,
            format: conf.i18n.shortDateFormat,
            firstDay: conf.firstDay,
            yearRange: [-5, 10]
        }).data('dateinput').setValue(new Date());
        form.find('input#addaction').click(occurrenceAdd);

        // When the reload button is clicked, reload
        form.find('a.rirefreshbutton').click(
            function (event) {
                event.preventDefault();
                updateOccurances();
            }
        );

        // When selecting template, update what fieldsets are visible.
        form.find('select[name=rirtemplate]').change(
            function (e) {
                displayFields($(this));
            }
        );

        // When focus goes to a drop-down, select the relevant radiobutton.
        form.find('select').change(
            function (e) {
                $(this).parent().find('> input').click().change();
            }
        );
        form.find('input[name=rirangebyoccurrencesvalue]').change(
            function (e) {
                $(this).parent().find('input[name=rirangetype]').click().change();
            }
        );
        form.find('input[name=rirangebyenddatecalendar]').change(function () {
            // Update only if the occurances are shown
            $(this).parent().find('input[name=rirangetype]').click();
            if (form.find('.rioccurrencesactions:visible').length !== 0) {
                updateOccurances();
            }
        });
        // Update the selected dates section
        form.find('input:radio, .riweeklyweekday > input, input[name=ridailyinterval], input[name=riweeklyinterval], input[name=rimonthlyinterval], input[name=riyearlyinterval]').change(
            function (e) {
                // Update only if the occurances are shown
                if (form.find('.rioccurrencesactions:visible').length !== 0) {
                    updateOccurances();
                }
            }
        );

        /*
          Save and cancel methods:
        */
        form.find('.ricancelbutton').click(cancel);
        form.find('.risavebutton').click(save);

        /*
         * Public API of RecurrenceInput
         */

        $.extend(self, {
            display: display,
            form: form,
            loadData: loadData, //Used by tests.
            save: save //Used by tests.
        });

    }


    /*
     * jQuery plugin implementation
     */
    $.fn.recurrenceinput = function (conf) {
        if (this.data('recurrenceinput')) {
            // plugin already installed
            return this.data('recurrenceinput');
        }

        // "compile" configuration for widget
        var config = $.extend({}, tool.conf);
        $.extend(config, conf);
        $.extend(config, {i18n: LABELS[config.lang], name: this.attr('name')});

        // our recurrenceinput widget instance
        var recurrenceinput = new RecurrenceInput(config, this);
        // hide textarea and place display widget after textarea
        recurrenceinput.form.appendTo('body');
        this.after(recurrenceinput.display);

        // hide the textarea
        this.hide();

        // save the data for next call
        this.data('recurrenceinput', recurrenceinput);
        return recurrenceinput;
    };

}(jQuery));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),

/***/ 372:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Backbone, _, jQuery) {/*globals Backbone:true, _:true, jQuery:true*/
Backbone.Paginator = (function ( Backbone, _, $ ) {
  "use strict";


  var bbVer = _.map(Backbone.VERSION.split('.'), function(digit) {
    return parseInt(digit, 10);
  });

  var Paginator = {};
  Paginator.version = "<%= pkg.version %>";

  // @name: clientPager
  //
  // @tagline: Paginator for client-side data
  //
  // @description:
  // This paginator is responsible for providing pagination
  // and sort capabilities for a single payload of data
  // we wish to paginate by the UI for easier browsering.
  //
  Paginator.clientPager = Backbone.Collection.extend({

    // DEFAULTS FOR SORTING & FILTERING
    useDiacriticsPlugin: true, // use diacritics plugin if available
    useLevenshteinPlugin: true, // use levenshtein plugin if available
    sortColumn: "",
    sortDirection: "desc",
    lastSortColumn: "",
    fieldFilterRules: [],
    lastFieldFilterRules: [],
    filterFields: "",
    filterExpression: "",
    lastFilterExpression: "",

    //DEFAULT PAGINATOR UI VALUES
    defaults_ui: {
      firstPage: 0,
      currentPage: 1,
      perPage: 5,
      totalPages: 10,
      pagesInRange: 4
    },

    // Default values used when sorting and/or filtering.
    initialize: function(){
      //LISTEN FOR ADD & REMOVE EVENTS THEN REMOVE MODELS FROM ORGINAL MODELS
      this.on('add', this.addModel, this);
      this.on('remove', this.removeModel, this);

      // SET DEFAULT VALUES (ALLOWS YOU TO POPULATE PAGINATOR MAUNALLY)
      this.setDefaults();
    },


    setDefaults: function() {
      // SET DEFAULT UI SETTINGS
      var options = _.defaults(this.paginator_ui, this.defaults_ui);

      //UPDATE GLOBAL UI SETTINGS
      _.defaults(this, options);
    },

    addModel: function(model) {
      this.origModels.push(model);
    },

    removeModel: function(model) {
      var index = _.indexOf(this.origModels, model);

      this.origModels.splice(index, 1);
    },

    sync: function ( method, model, options ) {
      var self = this;

      // SET DEFAULT VALUES
      this.setDefaults();

      // Some values could be functions, let's make sure
      // to change their scope too and run them
      var queryAttributes = {};
      _.each(_.result(self, "server_api"), function(value, key){
        if( _.isFunction(value) ) {
          value = _.bind(value, self);
          value = value();
        }
        queryAttributes[key] = value;
      });

      var queryOptions = _.clone(self.paginator_core);
      _.each(queryOptions, function(value, key){
        if( _.isFunction(value) ) {
          value = _.bind(value, self);
          value = value();
        }
        queryOptions[key] = value;
      });

      // Create default values if no others are specified
      queryOptions = _.defaults(queryOptions, {
        timeout: 25000,
        cache: false,
        type: 'GET',
        dataType: 'jsonp'
      });

      queryOptions = _.extend(queryOptions, {
        data: decodeURIComponent($.param(queryAttributes)),
        processData: false,
        url: _.result(queryOptions, 'url')
      }, options);

      var promiseSuccessFormat = !(bbVer[0] === 0 &&
                                   bbVer[1] === 9 &&
                                   bbVer[2] === 10);

      var isBeforeBackbone_1_0 = bbVer[0] === 0;

      var success = queryOptions.success;
      queryOptions.success = function ( resp, status, xhr ) {
        if ( success ) {
          // This is to keep compatibility with Backbone 0.9.10
          if (promiseSuccessFormat) {
            success( resp, status, xhr );
          } else {
            success( model, resp, queryOptions );
          }
        }
        if ( isBeforeBackbone_1_0 && model && model.trigger ) {
          model.trigger( 'sync', model, resp, queryOptions );
        }
      };

      var error = queryOptions.error;
      queryOptions.error = function ( xhr ) {
        if ( error ) {
          error( xhr );
        }
        if ( isBeforeBackbone_1_0 && model && model.trigger ) {
          model.trigger( 'error', model, xhr, queryOptions );
        }
      };

      var xhr = queryOptions.xhr = Backbone.ajax( queryOptions );
      if ( model && model.trigger ) {
        model.trigger('request', model, xhr, queryOptions);
      }
      return xhr;
    },

    nextPage: function (options) {
      if(this.currentPage < this.information.totalPages) {
        this.currentPage = ++this.currentPage;
        this.pager(options);
      }
    },

    previousPage: function (options) {
      if(this.currentPage > 1) {
        this.currentPage = --this.currentPage;
        this.pager(options);
      }
    },

    goTo: function ( page, options ) {
      if(page !== undefined){
        this.currentPage = parseInt(page, 10);
        this.pager(options);
      }
    },

    howManyPer: function ( perPage ) {
      if(perPage !== undefined){
        var lastPerPage = this.perPage;
        this.perPage = parseInt(perPage, 10);
        this.currentPage = Math.ceil( ( lastPerPage * ( this.currentPage - 1 ) + 1 ) / perPage);
        this.pager();
      }
    },


    // setSort is used to sort the current model. After
    // passing 'column', which is the model's field you want
    // to filter and 'direction', which is the direction
    // desired for the ordering ('asc' or 'desc'), pager()
    // and info() will be called automatically.
    setSort: function ( column, direction ) {
      if(column !== undefined && direction !== undefined){
        this.lastSortColumn = this.sortColumn;
        this.sortColumn = column;
        this.sortDirection = direction;
        this.pager();
        this.info();
      }
    },

    // setFieldFilter is used to filter each value of each model
    // according to `rules` that you pass as argument.
    // Example: You have a collection of books with 'release year' and 'author'.
    // You can filter only the books that were released between 1999 and 2003
    // And then you can add another `rule` that will filter those books only to
    // authors who's name start with 'A'.
    setFieldFilter: function ( fieldFilterRules ) {
      if( !_.isEmpty( fieldFilterRules ) ) {
        this.lastFieldFilterRules = this.fieldFilterRules;
        this.fieldFilterRules = fieldFilterRules;
        this.pager();
        this.info();
        // if all the filters are removed, we should save the last filter
        // and then let the list reset to it's original state.
      } else {
        this.lastFieldFilterRules = this.fieldFilterRules;
        this.fieldFilterRules = '';
        this.pager();
        this.info();
      }
    },

    // doFakeFieldFilter can be used to get the number of models that will remain
    // after calling setFieldFilter with a filter rule(s)
    doFakeFieldFilter: function ( rules ) {
      if( !_.isEmpty( rules ) ) {
        var testModels = this.origModels;
        if (testModels === undefined) {
          testModels = this.models;
        }

        testModels = this._fieldFilter(testModels, rules);

        // To comply with current behavior, also filter by any previously defined setFilter rules.
        if ( this.filterExpression !== "" ) {
          testModels = this._filter(testModels, this.filterFields, this.filterExpression);
        }

        // Return size
        return testModels.length;
      }

    },

    // setFilter is used to filter the current model. After
    // passing 'fields', which can be a string referring to
    // the model's field, an array of strings representing
    // each of the model's fields or an object with the name
    // of the model's field(s) and comparing options (see docs)
    // you wish to filter by and
    // 'filter', which is the word or words you wish to
    // filter by, pager() and info() will be called automatically.
    setFilter: function ( fields, filter ) {
      if( fields !== undefined && filter !== undefined ){
        this.filterFields = fields;
        this.lastFilterExpression = this.filterExpression;
        this.filterExpression = filter;
        this.pager();
        this.info();
      }
    },

    // doFakeFilter can be used to get the number of models that will
    // remain after calling setFilter with a `fields` and `filter` args.
    doFakeFilter: function ( fields, filter ) {
      if( fields !== undefined && filter !== undefined ){
        var testModels = this.origModels;
        if (testModels === undefined) {
          testModels = this.models;
        }

        // To comply with current behavior, first filter by any previously defined setFieldFilter rules.
        if ( !_.isEmpty( this.fieldFilterRules ) ) {
          testModels = this._fieldFilter(testModels, this.fieldFilterRules);
        }

        testModels = this._filter(testModels, fields, filter);

        // Return size
        return testModels.length;
      }
    },


    // pager is used to sort, filter and show the data
    // you expect the library to display.
    pager: function (options) {
      var self = this,
      disp = this.perPage,
      start = (self.currentPage - 1) * disp,
      stop = start + disp;
      // Saving the original models collection is important
      // as we could need to sort or filter, and we don't want
      // to loose the data we fetched from the server.
      if (self.origModels === undefined) {
        self.origModels = self.models;
      }

      self.models = self.origModels.slice();

      // Check if sorting was set using setSort.
      if ( this.sortColumn !== "" ) {
        self.models = self._sort(self.models, this.sortColumn, this.sortDirection);
      }

      // Check if field-filtering was set using setFieldFilter
      if ( !_.isEmpty( this.fieldFilterRules ) ) {
        self.models = self._fieldFilter(self.models, this.fieldFilterRules);
      }

      // Check if filtering was set using setFilter.
      if ( this.filterExpression !== "" ) {
        self.models = self._filter(self.models, this.filterFields, this.filterExpression);
      }

      // If the sorting or the filtering was changed go to the first page
      if ( this.lastSortColumn !== this.sortColumn || this.lastFilterExpression !== this.filterExpression || !_.isEqual(this.fieldFilterRules, this.lastFieldFilterRules) ) {
        start = 0;
        stop = start + disp;
        self.currentPage = 1;

        this.lastSortColumn = this.sortColumn;
        this.lastFieldFilterRules = this.fieldFilterRules;
        this.lastFilterExpression = this.filterExpression;
      }

      // We need to save the sorted and filtered models collection
      // because we'll use that sorted and filtered collection in info().
      self.sortedAndFilteredModels = self.models.slice();
      self.info();
      self.reset(self.models.slice(start, stop));

      // This is somewhat of a hack to get all the nextPage, prevPage, and goTo methods
      // to work with a success callback (as in the requestPager). Realistically there is no failure case here,
      // but maybe we could catch exception and trigger a failure callback?
      _.result(options, 'success');
    },

    // The actual place where the collection is sorted.
    // Check setSort for arguments explicacion.
    _sort: function ( models, sort, direction ) {
      models = models.sort(function (a, b) {
        var ac = a.get(sort),
        bc = b.get(sort);

        if ( _.isUndefined(ac) || _.isUndefined(bc) || ac === null || bc === null ) {
          return 0;
        } else {
          /* Make sure that both ac and bc are lowercase strings.
           * .toString() first so we don't have to worry if ac or bc
           * have other String-only methods.
           */
          ac = ac.toString().toLowerCase();
          bc = bc.toString().toLowerCase();
        }

        if (direction === 'desc') {

          // We need to know if there aren't any non-number characters
          // and that there are numbers-only characters and maybe a dot
          // if we have a float.
          // Oh, also a '-' for negative numbers!
          if((!ac.match(/[^\-\d\.]/) && ac.match(/-?[\d\.]+/)) &&
               (!bc.match(/[^\-\d\.]/) && bc.match(/-?[\d\.]+/))){

            if( (ac - 0) < (bc - 0) ) {
              return 1;
            }
            if( (ac - 0) > (bc - 0) ) {
              return -1;
            }
          } else {
            if (ac < bc) {
              return 1;
            }
            if (ac > bc) {
              return -1;
            }
          }

        } else {

          //Same as the regexp check in the 'if' part.
          if((!ac.match(/[^\-\d\.]/) && ac.match(/-?[\d\.]+/)) &&
             (!bc.match(/[^\-\d\.]/) && bc.match(/-?[\d\.]+/))){
            if( (ac - 0) < (bc - 0) ) {
              return -1;
            }
            if( (ac - 0) > (bc - 0) ) {
              return 1;
            }
          } else {
            if (ac < bc) {
              return -1;
            }
            if (ac > bc) {
              return 1;
            }
          }

        }

        if (a.cid && b.cid){
          var aId = a.cid,
          bId = b.cid;

          if (aId < bId) {
            return -1;
          }
          if (aId > bId) {
            return 1;
          }
        }

        return 0;
      });

      return models;
    },

    // The actual place where the collection is field-filtered.
    // Check setFieldFilter for arguments explicacion.
    _fieldFilter: function( models, rules ) {

      // Check if there are any rules
      if ( _.isEmpty(rules) ) {
        return models;
      }

      var filteredModels = [];

      // Iterate over each rule
      _.each(models, function(model){

        var should_push = true;

        // Apply each rule to each model in the collection
        _.each(rules, function(rule){

          // Don't go inside the switch if we're already sure that the model won't be included in the results
          if( !should_push ){
            return false;
          }

          should_push = false;

          // The field's value will be passed to a custom function, which should
          // return true (if model should be included) or false (model should be ignored)
          if(rule.type === "function"){
            var f = _.wrap(rule.value, function(func){
              return func( model.get(rule.field) );
            });
            if( f() ){
              should_push = true;
            }

            // The field's value is required to be non-empty
          }else if(rule.type === "required"){
            if( !_.isEmpty( model.get(rule.field).toString() ) ) {
              should_push = true;
            }

            // The field's value is required to be greater than N (numbers only)
          }else if(rule.type === "min"){
            if( !_.isNaN( Number( model.get(rule.field) ) ) &&
               !_.isNaN( Number( rule.value ) ) &&
                 Number( model.get(rule.field) ) >= Number( rule.value ) ) {
              should_push = true;
            }

            // The field's value is required to be smaller than N (numbers only)
          }else if(rule.type === "max"){
            if( !_.isNaN( Number( model.get(rule.field) ) ) &&
               !_.isNaN( Number( rule.value ) ) &&
                 Number( model.get(rule.field) ) <= Number( rule.value ) ) {
              should_push = true;
            }

            // The field's value is required to be between N and M (numbers only)
          }else if(rule.type === "range"){
            if( !_.isNaN( Number( model.get(rule.field) ) ) &&
               _.isObject( rule.value ) &&
                 !_.isNaN( Number( rule.value.min ) ) &&
                   !_.isNaN( Number( rule.value.max ) ) &&
                     Number( model.get(rule.field) ) >= Number( rule.value.min ) &&
                       Number( model.get(rule.field) ) <= Number( rule.value.max ) ) {
              should_push = true;
            }

            // The field's value is required to be more than N chars long
          }else if(rule.type === "minLength"){
            if( model.get(rule.field).toString().length >= rule.value ) {
              should_push = true;
            }

            // The field's value is required to be no more than N chars long
          }else if(rule.type === "maxLength"){
            if( model.get(rule.field).toString().length <= rule.value ) {
              should_push = true;
            }

            // The field's value is required to be more than N chars long and no more than M chars long
          }else if(rule.type === "rangeLength"){
            if( _.isObject( rule.value ) &&
               !_.isNaN( Number( rule.value.min ) ) &&
                 !_.isNaN( Number( rule.value.max ) ) &&
                   model.get(rule.field).toString().length >= rule.value.min &&
                     model.get(rule.field).toString().length <= rule.value.max ) {
              should_push = true;
            }

            // The field's value is required to be equal to one of the values in rules.value
          }else if(rule.type === "oneOf"){
            if( _.isArray( rule.value ) &&
               _.include( rule.value, model.get(rule.field) ) ) {
              should_push = true;
            }

            // The field's value is required to be equal to the value in rules.value
          }else if(rule.type === "equalTo"){
            if( rule.value === model.get(rule.field) ) {
              should_push = true;
            }

          }else if(rule.type === "containsAllOf"){
            if( _.isArray( rule.value ) &&
                _.isArray(model.get(rule.field)) &&
                _.intersection( rule.value, model.get(rule.field)).length === rule.value.length) {
              should_push = true;
            }

              // The field's value is required to match the regular expression
          }else if(rule.type === "pattern"){
            if( model.get(rule.field).toString().match(rule.value) ) {
              should_push = true;
            }

            // The field's value will be applied to the model, which should
            // return true (if model should be included) or false (model should be ignored)
          }else if(rule.type === "custom"){
            var attr = model.toJSON();
            var cf = _.wrap(rule.value, function(func){
              return func( attr );
            });
            if( cf() ){
              should_push = true;
            }

            //Unknown type
          }else{
            should_push = false;
          }

        });

        if( should_push ){
          filteredModels.push(model);
        }

      });

      return filteredModels;
    },

    // The actual place where the collection is filtered.
    // Check setFilter for arguments explicacion.
    _filter: function ( models, fields, filter ) {

      //  For example, if you had a data model containing cars like { color: '', description: '', hp: '' },
      //  your fields was set to ['color', 'description', 'hp'] and your filter was set
      //  to "Black Mustang 300", the word "Black" will match all the cars that have black color, then
      //  "Mustang" in the description and then the HP in the 'hp' field.
      //  NOTE: "Black Musta 300" will return the same as "Black Mustang 300"

      // We accept fields to be a string, an array or an object
      // but if string or array is passed we need to convert it
      // to an object.

      var self = this;

      var obj_fields = {};

      if( _.isString( fields ) ) {
        obj_fields[fields] = {cmp_method: 'regexp'};
      }else if( _.isArray( fields ) ) {
        _.each(fields, function(field){
          obj_fields[field] = {cmp_method: 'regexp'};
        });
      }else{
        _.each(fields, function( cmp_opts, field ) {
          obj_fields[field] = _.defaults(cmp_opts, { cmp_method: 'regexp' });
        });
      }

      fields = obj_fields;

      //Remove diacritic characters if diacritic plugin is loaded
      if( _.has(Backbone.Paginator, 'removeDiacritics') && self.useDiacriticsPlugin ){
        filter = Backbone.Paginator.removeDiacritics(filter);
      }

      // 'filter' can be only a string.
      // If 'filter' is string we need to convert it to
      // a regular expression.
      // For example, if 'filter' is 'black dog' we need
      // to find every single word, remove duplicated ones (if any)
      // and transform the result to '(black|dog)'
      if( filter === '' || !_.isString(filter) ) {
        return models;
      } else {
        var words = _.map(filter.match(/\w+/ig), function(element) { return element.toLowerCase(); });
        var pattern = "(" + _.uniq(words).join("|") + ")";
        var regexp = new RegExp(pattern, "igm");
      }

      var filteredModels = [];

      // We need to iterate over each model
      _.each( models, function( model ) {

        var matchesPerModel = [];

        // and over each field of each model
        _.each( fields, function( cmp_opts, field ) {

          var value = model.get( field );

          if( value ) {

            // The regular expression we created earlier let's us detect if a
            // given string contains each and all of the words in the regular expression
            // or not, but in both cases match() will return an array containing all
            // the words it matched.
            var matchesPerField = [];

            if( _.has(Backbone.Paginator, 'removeDiacritics') && self.useDiacriticsPlugin ){
              value = Backbone.Paginator.removeDiacritics(value.toString());
            }else{
              value = value.toString();
            }

            // Levenshtein cmp
            if( cmp_opts.cmp_method === 'levenshtein' && _.has(Backbone.Paginator, 'levenshtein') && self.useLevenshteinPlugin ) {
              var distance = Backbone.Paginator.levenshtein(value, filter);

              _.defaults(cmp_opts, { max_distance: 0 });

              if( distance <= cmp_opts.max_distance ) {
                matchesPerField = _.uniq(words);
              }

              // Default (RegExp) cmp
            }else{
              matchesPerField = value.match( regexp );
            }

            matchesPerField = _.map(matchesPerField, function(match) {
              return match.toString().toLowerCase();
            });

            _.each(matchesPerField, function(match){
              matchesPerModel.push(match);
            });

          }

        });

        // We just need to check if the returned array contains all the words in our
        // regex, and if it does, it means that we have a match, so we should save it.
        matchesPerModel = _.uniq( _.without(matchesPerModel, "") );

        if(  _.isEmpty( _.difference(words, matchesPerModel) ) ) {
          filteredModels.push(model);
        }

      });

      return filteredModels;
    },

    // You shouldn't need to call info() as this method is used to
    // calculate internal data as first/prev/next/last page...
    info: function () {
      var self = this,
      info = {},
      totalRecords = (self.sortedAndFilteredModels) ? self.sortedAndFilteredModels.length : self.length,
      totalPages = Math.ceil(totalRecords / self.perPage);

      info = {
        totalUnfilteredRecords: self.origModels.length,
        totalRecords: totalRecords,
        currentPage: self.currentPage,
        perPage: this.perPage,
        totalPages: totalPages,
        lastPage: totalPages,
        previous: false,
        next: false,
        startRecord: totalRecords === 0 ? 0 : (self.currentPage - 1) * this.perPage + 1,
        endRecord: Math.min(totalRecords, self.currentPage * this.perPage)
      };

      if (self.currentPage > 1) {
        info.previous = self.currentPage - 1;
      }

      if (self.currentPage < info.totalPages) {
        info.next = self.currentPage + 1;
      }

      info.pageSet = self.setPagination(info);

      self.information = info;
      return info;
    },


    // setPagination also is an internal function that shouldn't be called directly.
    // It will create an array containing the pages right before and right after the
    // actual page.
    setPagination: function ( info ) {

      var pages = [], i = 0, l = 0;

      // How many adjacent pages should be shown on each side?
      var ADJACENTx2 = this.pagesInRange * 2,
      LASTPAGE = Math.ceil(info.totalRecords / info.perPage);

      if (LASTPAGE > 1) {

        // not enough pages to bother breaking it up
        if (LASTPAGE <= (1 + ADJACENTx2)) {
          for (i = 1, l = LASTPAGE; i <= l; i++) {
            pages.push(i);
          }
        }

        // enough pages to hide some
        else {

          //close to beginning; only hide later pages
          if (info.currentPage <=  (this.pagesInRange + 1)) {
            for (i = 1, l = 2 + ADJACENTx2; i < l; i++) {
              pages.push(i);
            }
          }

          // in middle; hide some front and some back
          else if (LASTPAGE - this.pagesInRange > info.currentPage && info.currentPage > this.pagesInRange) {
            for (i = info.currentPage - this.pagesInRange; i <= info.currentPage + this.pagesInRange; i++) {
              pages.push(i);
            }
          }

          // close to end; only hide early pages
          else {
            for (i = LASTPAGE - ADJACENTx2; i <= LASTPAGE; i++) {
              pages.push(i);
            }
          }
        }

      }

      return pages;

    },

    bootstrap: function(options) {
      _.extend(this, options);
      this.goTo(1);
      this.info();
      return this;
    }

  });

  // function aliasing
  Paginator.clientPager.prototype.prevPage = Paginator.clientPager.prototype.previousPage;

  // Helper function to generate rejected Deferred
  var reject = function () {
    var response = new $.Deferred();
    response.reject();
    return response.promise();
  };

  // @name: requestPager
  //
  // Paginator for server-side data being requested from a backend/API
  //
  // @description:
  // This paginator is responsible for providing pagination
  // and sort capabilities for requests to a server-side
  // data service (e.g an API)
  //
  Paginator.requestPager = Backbone.Collection.extend({

    sync: function ( method, model, options ) {

      var self = this;

      self.setDefaults();

      // Some values could be functions, let's make sure
      // to change their scope too and run them
      var queryAttributes = {};
      _.each(_.result(self, "server_api"), function(value, key){
        if( _.isFunction(value) ) {
          value = _.bind(value, self);
          value = value();
        }
        queryAttributes[key] = value;
      });

      var queryOptions = _.clone(self.paginator_core);
      _.each(queryOptions, function(value, key){
        if( _.isFunction(value) ) {
          value = _.bind(value, self);
          value = value();
        }
        queryOptions[key] = value;
      });

      // Create default values if no others are specified
      queryOptions = _.defaults(queryOptions, {
        timeout: 25000,
        cache: false,
        type: 'GET',
        dataType: 'jsonp',
        url: self.url
      });

      // Allows the passing in of {data: {foo: 'bar'}} at request time to overwrite server_api defaults
      if( options.data ){
        options.data = decodeURIComponent($.param(_.extend(queryAttributes,options.data)));
      }else{
        options.data = decodeURIComponent($.param(queryAttributes));
      }

      queryOptions = _.extend(queryOptions, {
        data: decodeURIComponent($.param(queryAttributes)),
        processData: false,
        url: _.result(queryOptions, 'url')
      }, options);

      var promiseSuccessFormat = !(bbVer[0] === 0 &&
                                   bbVer[1] === 9 &&
                                   bbVer[2] === 10);

      var isBeforeBackbone_1_0 = bbVer[0] === 0;

      var success = queryOptions.success;
      queryOptions.success = function ( resp, status, xhr ) {

        if ( success ) {
          // This is to keep compatibility with Backbone 0.9.10
          if (promiseSuccessFormat) {
            success( resp, status, xhr );
          } else {
            success( model, resp, queryOptions );
          }
        }
        if (isBeforeBackbone_1_0 && model && model.trigger ) {
          model.trigger( 'sync', model, resp, queryOptions );
        }
      };

      var error = queryOptions.error;
      queryOptions.error = function ( xhr ) {
        if ( error ) {
          error( xhr );
        }
        if ( isBeforeBackbone_1_0 && model && model.trigger ) {
          model.trigger( 'error', model, xhr, queryOptions );
        }
      };

      var xhr = queryOptions.xhr = Backbone.ajax( queryOptions );
      if ( model && model.trigger ) {
        model.trigger('request', model, xhr, queryOptions);
      }
      return xhr;
    },

    setDefaults: function() {
      var self = this;

      // Create default values if no others are specified
      _.defaults(self.paginator_ui, {
        firstPage: 0,
        currentPage: 1,
        perPage: 5,
        totalPages: 10,
        pagesInRange: 4
      });

      // Change scope of 'paginator_ui' object values
      _.each(self.paginator_ui, function(value, key) {
        if (_.isUndefined(self[key])) {
          self[key] = self.paginator_ui[key];
        }
      });
    },

    requestNextPage: function ( options ) {
      if ( this.currentPage !== undefined ) {
        this.currentPage += 1;
        return this.pager( options );
      } else {
        return reject();
      }
    },

    requestPreviousPage: function ( options ) {
      if ( this.currentPage !== undefined ) {
        this.currentPage -= 1;
        return this.pager( options );
      } else {
        return reject();
      }
    },

    updateOrder: function ( column, options ) {
      if (column !== undefined) {
        this.sortField = column;
        return this.pager( options );
      } else {
        return reject();
      }
    },

    goTo: function ( page, options ) {
      if ( page !== undefined ) {
        this.currentPage = parseInt(page, 10);
        return this.pager( options );
      } else {
        return reject();
      }
    },

    howManyPer: function ( count, options ) {
      if ( count !== undefined ) {
        this.currentPage = this.firstPage;
        this.perPage = count;
        return this.pager( options );
      } else {
        return reject();
      }
    },

    info: function () {

      var info = {
        // If parse() method is implemented and totalRecords is set to the length
        // of the records returned, make it available. Else, default it to 0
        totalRecords: this.totalRecords || 0,

        currentPage: this.currentPage,
        firstPage: this.firstPage,
        totalPages: Math.ceil(this.totalRecords / this.perPage),
        lastPage: this.totalPages, // should use totalPages in template
        perPage: this.perPage,
        previous:false,
        next:false
      };

      if (this.currentPage > 1) {
        info.previous = this.currentPage - 1;
      }

      if (this.currentPage < info.totalPages) {
        info.next = this.currentPage + 1;
      }

      // left around for backwards compatibility
      info.hasNext = info.next;
      info.hasPrevious = info.next;

      info.pageSet = this.setPagination(info);

      this.information = info;
      return info;
    },

    setPagination: function ( info ) {

      var pages = [], i = 0, l = 0;

      // How many adjacent pages should be shown on each side?
      var ADJACENTx2 = this.pagesInRange * 2,
      LASTPAGE = Math.ceil(info.totalRecords / info.perPage);

      if (LASTPAGE > 1) {

        // not enough pages to bother breaking it up
        if (LASTPAGE <= (1 + ADJACENTx2)) {
          for (i = 1, l = LASTPAGE; i <= l; i++) {
            pages.push(i);
          }
        }

        // enough pages to hide some
        else {

          //close to beginning; only hide later pages
          if (info.currentPage <=  (this.pagesInRange + 1)) {
            for (i = 1, l = 2 + ADJACENTx2; i < l; i++) {
              pages.push(i);
            }
          }

          // in middle; hide some front and some back
          else if (LASTPAGE - this.pagesInRange > info.currentPage && info.currentPage > this.pagesInRange) {
            for (i = info.currentPage - this.pagesInRange; i <= info.currentPage + this.pagesInRange; i++) {
              pages.push(i);
            }
          }

          // close to end; only hide early pages
          else {
            for (i = LASTPAGE - ADJACENTx2; i <= LASTPAGE; i++) {
              pages.push(i);
            }
          }
        }

      }

      return pages;

    },

    // fetches the latest results from the server
    pager: function ( options ) {
      if ( !_.isObject(options) ) {
        options = {};
      }
      return this.fetch( options );
    },

    url: function(){
      // Expose url parameter enclosed in this.paginator_core.url to properly
      // extend Collection and allow Collection CRUD
      if(this.paginator_core !== undefined && this.paginator_core.url !== undefined){
        return this.paginator_core.url;
      } else {
        return null;
      }
    },

    bootstrap: function(options) {
      _.extend(this, options);
      this.setDefaults();
      this.info();
      return this;
    }
  });

  // function aliasing
  Paginator.requestPager.prototype.nextPage = Paginator.requestPager.prototype.requestNextPage;
  Paginator.requestPager.prototype.prevPage = Paginator.requestPager.prototype.requestPreviousPage;

  return Paginator;

}( Backbone, _, jQuery ));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(20), __webpack_require__(1), __webpack_require__(0)))

/***/ }),

/***/ 373:
/***/ (function(module, exports, __webpack_require__) {

var api = __webpack_require__(267);
            var content = __webpack_require__(374);

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.i, content, '']];
            }

var options = {};

options.insert = function top_head_insert(el) {
    // Insert element at the top of <head>
    // Used for injecting CSS via webpack before any other CSS
    // Note:
    // Keep code compatible with IE11 as long as we support it.
    var first_child = document.head.querySelectorAll("*")[0];
    if (first_child) {
        document.head.insertBefore(el, first_child);
    } else {
        document.head.append(el);
    }
};
options.singleton = false;

var update = api(content, options);



module.exports = content.locals || {};

/***/ }),

/***/ 374:
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(268);
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "#edit-zone{font-family:\"Roboto Condensed\",sans-serif;font-weight:400;position:fixed;z-index:20;top:0;left:0;width:60px;height:100%;color:rgba(255,255,255,.9);background:rgba(0,0,0,.9);word-wrap:break-word;hyphens:auto}#edit-zone a{display:block;text-decoration:none;color:#007bb3;outline:0}#edit-zone a:focus{background:#007bb3}#edit-zone a:hover{background:#007bb3}#edit-zone .plone-toolbar-logo{display:table-cell;width:60px;height:50px;padding-right:18px;padding-left:18px;cursor:pointer;vertical-align:middle;background:#005880}#edit-zone .plone-toolbar-logo:after{position:absolute;top:50px;left:25px;content:\"\";border-top:4px solid #005880;border-right:4px solid transparent;border-left:4px solid transparent}#edit-zone .plone-toolbar-logo:hover{-webkit-transition:background .25s;transition:background .35s;background:#007bb3}#edit-zone .plone-toolbar-logo:hover:after{-webkit-transition:border-top .25s;transition:border-top .35s;border-top:4px solid #007bb3}#edit-zone nav>ul{font-family:\"Roboto Condensed\",sans-serif;font-size:12px;margin:0;padding:0;list-style:none}#edit-zone nav>ul [class^=icon]{font-size:20px}#edit-zone nav>ul a{position:relative;overflow:hidden;height:50px;color:rgba(255,255,255,.9)}#edit-zone nav>ul a:hover>span{margin-top:-50px;-webkit-transition:margin-top .35s;transition:margin-top .35s}#edit-zone nav>ul a:hover>span.plone-toolbar-caret{opacity:1}#edit-zone nav>ul a>span{display:block;width:60px;height:50px;text-align:center}#edit-zone nav>ul a>span:before{line-height:50px}#edit-zone nav>ul a>span+span{line-height:1em;display:table-cell;width:60px;height:50px;padding:0 8px;text-align:center;vertical-align:middle;background:#007bb3}#edit-zone nav>ul .scroll-btn{position:fixed;z-index:10;background-color:#000}#edit-zone nav>ul .scroll-btn.up{top:50px}#edit-zone nav>ul .scroll-btn.down{bottom:50px}#edit-zone nav>ul .scroll-btn a{height:20px}#edit-zone nav>ul .scroll-btn a [class^=icon]{font-size:12px}#edit-zone nav>ul .scroll-btn a>span{height:20px}#edit-zone nav>ul .scroll-btn a span:before{line-height:26px}#edit-zone nav>ul .scroll-btn a span.icon-down:before{line-height:20px}#edit-zone nav>ul .scroll-btn a:hover{background:#007bb3}#edit-zone nav>ul .scroll-btn a:hover>span{margin-top:0;-webkit-transition:none;transition:none}#edit-zone nav>ul a.label-state-published>span:before,#edit-zone nav>ul a.label-state-external>span:before{color:#007bb3}#edit-zone nav>ul a.label-state-published>span+span,#edit-zone nav>ul a.label-state-external>span:before{background:#007bb3}#edit-zone nav>ul a.label-state-internally_published>span:before{color:#883dfa}#edit-zone nav>ul a.label-state-internally_published>span+span{background:#883dfa}#edit-zone nav>ul a.label-state-pending>span:before{color:#e2e721}#edit-zone nav>ul a.label-state-pending>span+span{background:#e2e721}#edit-zone nav>ul li.active a.label-state-pending>span,#edit-zone nav>ul a.label-state-pending>span:hover{color:rgba(255,255,255,.9) !important}#edit-zone nav>ul a.label-state-draft>span:before,#edit-zone nav>ul a.label-state-internal>span:before{color:#fab82a}#edit-zone nav>ul a.label-state-draft>span+span,#edit-zone nav>ul a.label-state-internal>span+span{background:#fab82a}#edit-zone nav>ul a.label-state-private>span:before{color:#c4183c}#edit-zone nav>ul a.label-state-private>span+span{background:#c4183c}#edit-zone nav>ul ul{font-family:\"Roboto\",sans-serif;font-size:14px;line-height:30px;position:absolute;top:0;left:60px;overflow-y:auto;margin:0;padding:0;list-style:none;background:rgba(20,20,20,.95)}#edit-zone nav>ul ul [class^=icon]{line-height:0;display:inline !important}#edit-zone nav>ul ul [class^=icon]:before{font-size:10px;line-height:18px;position:absolute;top:0;right:10px;margin-top:7px;color:#c4183c}#edit-zone nav>ul ul .state-published:after,#edit-zone nav>ul ul .state-external:after,#edit-zone nav>ul ul #workflow-transition-publish:after{font-size:20px;position:absolute;right:15px;content:\"•\";color:#007bb3}#edit-zone nav>ul ul .state-internally_published:after,#edit-zone nav>ul ul #workflow-transition-show_internally:after{font-size:20px;position:absolute;right:15px;content:\"•\";color:#883dfa}#edit-zone nav>ul ul .state-pending:after,#edit-zone nav>ul ul #workflow-transition-submit:after{font-size:20px;position:absolute;right:15px;content:\"•\";color:#e2e721}#edit-zone nav>ul ul .state-draft:after,#edit-zone nav>ul ul .state-internal:after,#edit-zone nav>ul ul #workflow-transition-hide:after{font-size:20px;position:absolute;right:15px;content:\"•\";color:#fab82a}#edit-zone nav>ul ul .state-private:after,#edit-zone nav>ul ul #workflow-transition-reject:after{font-size:20px;position:absolute;right:15px;content:\"•\";color:#c4183c}#edit-zone nav>ul ul a{color:#fff}#edit-zone nav>ul ul a:hover{background:#007bb3}#edit-zone nav>ul ul li{min-width:180px;width:auto;white-space:nowrap}#edit-zone nav>ul ul li:last-child{padding-bottom:5px}#edit-zone nav>ul ul li>span{line-height:20px;display:block;height:auto;padding:5px 15px}#edit-zone nav>ul ul li>a{line-height:20px;height:auto;padding:5px 15px}#edit-zone nav>ul ul li.plone-toolbar-submenu-header,#edit-zone nav>ul ul li.plonetoolbar-display-view.actionSeparator{margin:5px 0 0;padding:5px 0 0;border-top:1px solid rgba(255,255,255,.17)}#edit-zone nav>ul ul li.plone-toolbar-submenu-header:first-child,#edit-zone nav>ul ul li.plonetoolbar-display-view.actionSeparator:first-child{margin:0;border-top:0}#edit-zone nav>ul ul li.plone-toolbar-submenu-header:after,#edit-zone nav>ul ul li.plonetoolbar-display-view.actionSeparator:after{font-size:30px;right:13px}#edit-zone nav>ul ul li.plone-toolbar-submenu-header>a,#edit-zone nav>ul ul li.plonetoolbar-display-view.actionSeparator>a{font-weight:400;color:#007bb3}#edit-zone nav>ul ul li.plone-toolbar-submenu-header>a:hover,#edit-zone nav>ul ul li.plonetoolbar-display-view.actionSeparator>a:hover{color:#004667}#edit-zone nav>ul ul li.plone-toolbar-submenu-header>span,#edit-zone nav>ul ul li.plonetoolbar-display-view.actionSeparator>span{font-weight:400;color:#ccc}#edit-zone nav>ul ul li.plonetoolbar-display-view.actionSeparator{margin:0}#edit-zone nav>ul ul li.plonetoolbar-display-view.actionSeparator>:before{content:\"\"}#edit-zone nav>ul ul li.plonetoolbar-display-view.actionSeparator>span{padding:5px 15px}#edit-zone nav>ul ul li.plonetoolbar-workfow-transition>:before,#edit-zone nav>ul ul li.plonetoolbar-content-action>:before,#edit-zone nav>ul ul li.plonetoolbar-display-view>:before,#edit-zone nav>ul ul li.plonetoolbar-portlet-manager>:before,#edit-zone nav>ul ul li.user-action>:before{position:absolute;left:15px;content:\"•\";color:#007bb3}#edit-zone nav>ul ul li.plonetoolbar-workfow-transition>span,#edit-zone nav>ul ul li.plonetoolbar-content-action>span,#edit-zone nav>ul ul li.plonetoolbar-display-view>span,#edit-zone nav>ul ul li.plonetoolbar-portlet-manager>span,#edit-zone nav>ul ul li.user-action>span{height:auto;padding:5px 15px 5px 30px;color:rgba(255,255,255,.9)}#edit-zone nav>ul ul li.plonetoolbar-workfow-transition>a,#edit-zone nav>ul ul li.plonetoolbar-content-action>a,#edit-zone nav>ul ul li.plonetoolbar-display-view>a,#edit-zone nav>ul ul li.plonetoolbar-portlet-manager>a,#edit-zone nav>ul ul li.user-action>a{height:auto;padding:5px 15px 5px 30px}#edit-zone nav>ul ul li.plonetoolbar-workfow-transition>a:hover:before,#edit-zone nav>ul ul li.plonetoolbar-content-action>a:hover:before,#edit-zone nav>ul ul li.plonetoolbar-display-view>a:hover:before,#edit-zone nav>ul ul li.plonetoolbar-portlet-manager>a:hover:before,#edit-zone nav>ul ul li.user-action>a:hover:before{color:#34bfff}#edit-zone nav>ul ul li.plonetoolbar-workfow-transition>a.actionMenuSelected:hover,#edit-zone nav>ul ul li.plonetoolbar-content-action>a.actionMenuSelected:hover,#edit-zone nav>ul ul li.plonetoolbar-display-view>a.actionMenuSelected:hover,#edit-zone nav>ul ul li.plonetoolbar-portlet-manager>a.actionMenuSelected:hover,#edit-zone nav>ul ul li.user-action>a.actionMenuSelected:hover{cursor:default;color:rgba(255,255,255,.9);background:none}#edit-zone nav>ul ul li.plonetoolbar-workfow-transition>a.actionMenuSelected:before,#edit-zone nav>ul ul li.plonetoolbar-content-action>a.actionMenuSelected:before,#edit-zone nav>ul ul li.plonetoolbar-display-view>a.actionMenuSelected:before,#edit-zone nav>ul ul li.plonetoolbar-portlet-manager>a.actionMenuSelected:before,#edit-zone nav>ul ul li.user-action>a.actionMenuSelected:before{color:rgba(255,255,255,.9)}#edit-zone nav>ul ul li.plonetoolbar-workfow-transition>.actionMenuSelected,#edit-zone nav>ul ul li.plonetoolbar-content-action>.actionMenuSelected,#edit-zone nav>ul ul li.plonetoolbar-display-view>.actionMenuSelected,#edit-zone nav>ul ul li.plonetoolbar-portlet-manager>.actionMenuSelected,#edit-zone nav>ul ul li.user-action>.actionMenuSelected{font-weight:500;color:rgba(255,255,255,.9)}#edit-zone nav>ul ul li.plonetoolbar-workfow-transition>.actionMenuSelected:before,#edit-zone nav>ul ul li.plonetoolbar-content-action>.actionMenuSelected:before,#edit-zone nav>ul ul li.plonetoolbar-display-view>.actionMenuSelected:before,#edit-zone nav>ul ul li.plonetoolbar-portlet-manager>.actionMenuSelected:before,#edit-zone nav>ul ul li.user-action>.actionMenuSelected:before{color:rgba(217,217,217,.9)}#edit-zone nav>ul ul li.plonetoolbar-workfow-transition>.actionMenuSelected:before,#edit-zone nav>ul ul li.plonetoolbar-content-action>.actionMenuSelected:before,#edit-zone nav>ul ul li.plonetoolbar-display-view>.actionMenuSelected:before,#edit-zone nav>ul ul li.plonetoolbar-portlet-manager>.actionMenuSelected:before,#edit-zone nav>ul ul li.user-action>.actionMenuSelected:before{margin-left:-3px;content:\"✓\" !important}#edit-zone nav>ul .plone-toolbar-separator{border-bottom:1px solid rgba(255,255,255,.17)}#edit-zone nav>ul .plone-toolbar-caret{position:absolute;top:21px;right:0;right:2px;display:inline-block;width:0;height:0;margin-top:0 !important;padding:0;vertical-align:middle;opacity:.67;border-top:4px solid transparent;border-bottom:4px solid transparent;border-left:4px solid;background:transparent !important}.plone-toolbar-left.plone-toolbar-expanded ul.plone-toolbar-main>li{width:120px}.plone-toolbar-left.plone-toolbar-default ul.plone-toolbar-main>li{width:60px}.plone-toolbar-left #edit-zone ul.plone-toolbar-main>li>a>.icon-up,.plone-toolbar-left #edit-zone ul.plone-toolbar-main>li>a>.icon-down{width:100%;display:block;padding-left:0}.plone-toolbar-left #edit-zone{z-index:20}.plone-toolbar-left #edit-zone nav>ul ul{display:none;height:100%}.plone-toolbar-left #edit-zone .plone-toolbar-container{height:100%}.plone-toolbar-top #edit-zone nav>ul ul{width:180px;height:0;max-height:0}.plone-toolbar-default #edit-zone .plone-toolbar-title,.plone-toolbar-default #edit-zone .plone-toolbar-state-title{display:none}.plone-toolbar-expanded #edit-zone{width:120px}.plone-toolbar-expanded #edit-zone nav>ul ul{left:120px}.plone-toolbar-expanded #edit-zone nav>ul a>[class^=icon]{display:table-cell;width:40px;padding-left:10px}.plone-toolbar-expanded #edit-zone nav>ul a>.icon-logout{margin:0;padding:0}.plone-toolbar-expanded #edit-zone nav>ul a>span+span{width:80px;max-width:80px;text-align:left;background:none}.plone-toolbar-expanded #edit-zone .plone-toolbar-caret{width:0}.plone-toolbar-expanded #edit-zone li:not(.active) a:hover>span{background:#007bb3}.plone-toolbar-expanded #edit-zone .plone-toolbar-short-title{display:none}.plone-toolbar-expanded #edit-zone li a.label-state-published:hover>span,.plone-toolbar-expanded #edit-zone li li a.label-state-external:hover>span{background:#007bb3}.plone-toolbar-expanded #edit-zone li a.label-state-published:hover>span:first-child:before,.plone-toolbar-expanded #edit-zone li li a.label-state-external:hover>span:first-child:before{color:rgba(255,255,255,.9)}.plone-toolbar-expanded #edit-zone li a.label-state-internally_published:hover>span{background:#883dfa}.plone-toolbar-expanded #edit-zone li a.label-state-internally_published:hover>span:first-child:before{color:rgba(255,255,255,.9)}.plone-toolbar-expanded #edit-zone li a.label-state-pending:hover>span{background:#e2e721}.plone-toolbar-expanded #edit-zone li a.label-state-pending:hover>span:first-child:before{color:rgba(255,255,255,.9)}.plone-toolbar-expanded #edit-zone li a.label-state-draft:hover>span,.plone-toolbar-expanded #edit-zone li li a.label-state-internal:hover>span{background:#fab82a}.plone-toolbar-expanded #edit-zone li a.label-state-draft:hover>span:first-child:before,.plone-toolbar-expanded #edit-zone li li a.label-state-internal:hover>span:first-child:before{color:rgba(255,255,255,.9)}.plone-toolbar-expanded #edit-zone li a.label-state-private:hover>span{background:#c4183c}.plone-toolbar-expanded #edit-zone li a.label-state-private:hover>span:first-child:before{color:rgba(255,255,255,.9)}.plone-toolbar-expanded #edit-zone .plone-toolbar-logo{width:120px}.plone-toolbar-expanded #edit-zone .plone-toolbar-logo span{display:inline}#edit-zone nav>ul>li.active ul{display:block;min-width:180px;width:auto}#edit-zone nav>ul>li.active a>span{margin-top:-50px}#edit-zone nav>ul>li.active>a{background:#007bb3}#edit-zone nav>ul>li.active>a:after{position:absolute;right:0;margin-top:-35px;content:\"\";border-top:10px solid transparent;border-right:10px solid #2a2a2a;border-bottom:10px solid transparent}#edit-zone nav>ul>li.active>a span:before{color:rgba(255,255,255,.9) !important}#edit-zone nav>ul>li.active>a.label-state-published,#edit-zone nav>ul>li.active>a.label-state-external{background:#007bb3}#edit-zone nav>ul>li.active>a.label-state-internally_published{background:#883dfa}#edit-zone nav>ul>li.active>a.label-state-pending{background:#e2e721}#edit-zone nav>ul>li.active>a.label-state-draft,#edit-zone nav>ul>li.active>a.label-state-internal{background:#fab82a}#edit-zone nav>ul>li.active>a.label-state-private{background:#c4183c}.plone-toolbar-top #edit-zone{position:fixed;width:100%;height:50px}.plone-toolbar-top #edit-zone .plone-toolbar-container{margin-right:auto;margin-left:auto}@media(min-width: 768px){.plone-toolbar-top #edit-zone .plone-toolbar-container{width:750px}}@media(min-width: 992px){.plone-toolbar-top #edit-zone .plone-toolbar-container{width:970px}}@media(min-width: 1200px){.plone-toolbar-top #edit-zone .plone-toolbar-container{width:1170px}}.plone-toolbar-top #edit-zone .plone-toolbar-logo:after{top:20px;left:60px;border-top:4px solid transparent;border-bottom:4px solid transparent;border-left:4px solid #005880}.plone-toolbar-top #edit-zone .plone-toolbar-logo:hover:after{-webkit-transition:border-top .25s;transition:border-top .35s;border-left:4px solid #007bb3}.plone-toolbar-top #edit-zone .plone-toolbar-logo,.plone-toolbar-top #edit-zone nav,.plone-toolbar-top #edit-zone nav>ul{display:inline-block}.plone-toolbar-top #edit-zone nav>ul>li{display:inline-block;float:left;width:60px}.plone-toolbar-top #edit-zone .plone-toolbar-logo{position:absolute;top:0}.plone-toolbar-top #edit-zone .plone-toolbar-logo img{margin-top:13px}.plone-toolbar-top #edit-zone nav{width:100%;padding-left:60px}.plone-toolbar-top #edit-zone .plone-toolbar-caret{top:43px;right:inherit;left:26px;padding:0 !important;border-top:4px solid;border-right:4px solid transparent;border-left:4px solid transparent}.plone-toolbar-top #edit-zone nav>ul ul{top:50px;left:auto;overflow-y:auto;height:0}.plone-toolbar-top #edit-zone nav>ul li.active ul{top:auto;height:inherit;max-height:1000px}.plone-toolbar-top #edit-zone li.active>a:after{right:inherit;margin-top:-20px;margin-left:20px;border-right:10px solid transparent;border-bottom:10px solid #2a2a2a;border-left:10px solid transparent}.plone-toolbar-top #edit-zone #personal-bar-container{float:right}.plone-toolbar-top #edit-zone #plone-toolbar-more-subset{float:right;background:rgba(0,0,0,.9)}.plone-toolbar-top.plone-toolbar-expanded #edit-zone .plone-toolbar-logo{width:60px}.plone-toolbar-top.plone-toolbar-expanded #edit-zone nav>ul>li{width:inherit;border-right:1px solid #353535}.plone-toolbar-top.plone-toolbar-expanded #edit-zone nav>ul a>span+span{width:inherit;padding:0 8px 0 0}.plone-toolbar-top.plone-toolbar-expanded #edit-zone nav>ul a>[class^=icon]{padding-left:0}.plone-toolbar-top.plone-toolbar-expanded #edit-zone .plone-toolbar-caret{left:16px}.plone-toolbar-top.plone-toolbar-expanded #edit-zone li.active>a:after{margin-left:10px}.plone-toolbar-top.plone-toolbar-expanded #edit-zone #contentview-history{max-width:135px}#edit-zone .plone-toolbar-switcher{position:absolute;top:0;width:10px;height:10px;cursor:pointer;border-radius:0 0 100% 0;background:rgba(0,0,0,.2)}#edit-zone .plone-toolbar-switcher span{font-size:0}.plone-toolbar-left-default{padding-left:60px}.plone-toolbar-left-expanded{padding-left:120px}.plone-toolbar-top-default{margin-top:60px}.plone-toolbar-top-expanded{margin-top:60px}@media(min-width: 769px){.plone-toolbar-main{overflow-y:auto}.plone-toolbar-left #edit-zone{z-index:20}.plone-toolbar-left #edit-zone nav{overflow-x:hidden}.plone-toolbar-left #edit-zone nav>ul ul{width:0;height:100%;background-color:transparent}.plone-toolbar-left #edit-zone nav>ul ul>*{background-color:rgba(20,20,20,.95)}.plone-toolbar-left #edit-zone nav>ul ul .plone-toolbar-submenu-header{margin:0}.plone-toolbar-left #edit-zone .plone-toolbar-container{position:relative;height:100%}.plone-toolbar-left #edit-zone #personal-bar-container{position:absolute;bottom:0;border-top:1px solid #ddd;background-color:#000;box-shadow:-6px 2px 6px 2px #ddd}.plone-toolbar-left #edit-zone #personal-bar-container ul{position:fixed;top:0;height:100%}.plone-toolbar-left #edit-zone .plone-toolbar-main{width:138px;padding-right:18px}.plone-toolbar-left-default #edit-zone .plone-toolbar-main{width:78px}}@media(max-width: 769px){#edit-zone .plone-toolbar-logo,.plone-toolbar-expanded #edit-zone .plone-toolbar-logo{position:absolute;left:-60px;width:60px}#edit-zone .plone-toolbar-logo:after,.plone-toolbar-expanded #edit-zone .plone-toolbar-logo:after{content:none}#edit-zone .plone-toolbar-logo img,.plone-toolbar-expanded #edit-zone .plone-toolbar-logo img{margin-top:12px}#edit-zone{right:0;left:inherit}#edit-zone nav ul ul{width:200px}#edit-zone nav{overflow-y:auto}body.userrole-authenticated{right:0;left:inherit;width:100%;height:100%}#edit-zone nav ul li ul{width:0}#edit-zone nav ul li.active ul{min-width:180px;width:auto}.plone-toolbar-left-default{padding-left:0}.plone-toolbar-left-expanded{padding-left:0}.plone-toolbar-top-default{margin-top:0}.plone-toolbar-top-expanded{margin-top:0}.plone-toolbar-container nav{overflow-y:scroll;height:100%}}#edit-zone nav>ul li.active ul{display:block}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ 4:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "u", function() { return top; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return bottom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return right; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return left; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return auto; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return basePlacements; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return start; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return end; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return clippingParents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "w", function() { return viewport; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return popper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return reference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "v", function() { return variationPlacements; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return placements; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return beforeRead; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return read; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return afterRead; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return beforeMain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return main; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return afterMain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return beforeWrite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "x", function() { return write; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return afterWrite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return modifierPhases; });
var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [top, bottom, right, left];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []); // modifiers that need to read the DOM

var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers

var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

/***/ }),

/***/ 41:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ detectOverflow; });

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
var getBoundingClientRect = __webpack_require__(64);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/enums.js
var enums = __webpack_require__(4);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindow.js
var getWindow = __webpack_require__(26);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
var getDocumentElement = __webpack_require__(27);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
var getWindowScrollBarX = __webpack_require__(91);

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js



function getViewportRect(element) {
  var win = Object(getWindow["a" /* default */])(element);
  var html = Object(getDocumentElement["a" /* default */])(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
  // can be obscured underneath it.
  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
  // if it isn't open, so if this isn't available, the popper will be detected
  // to overflow the bottom of the screen too early.

  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
    // errors due to floating point numbers, so we need to check precision.
    // Safari returns a number <= 0, usually < -1 when pinch-zoomed
    // Feature detection fails in mobile emulation mode in Chrome.
    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
    // 0.001
    // Fallback here: "Not Safari" userAgent

    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }

  return {
    width: width,
    height: height,
    x: x + Object(getWindowScrollBarX["a" /* default */])(element),
    y: y
  };
}
// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
var getComputedStyle = __webpack_require__(36);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
var getWindowScroll = __webpack_require__(92);

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js



 // Gets the entire size of the scrollable document area, even extending outside
// of the `<html>` and `<body>` rect bounds if horizontally scrollable

function getDocumentRect(element) {
  var html = Object(getDocumentElement["a" /* default */])(element);
  var winScroll = Object(getWindowScroll["a" /* default */])(element);
  var body = element.ownerDocument.body;
  var width = Math.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = Math.max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + Object(getWindowScrollBarX["a" /* default */])(element);
  var y = -winScroll.scrollTop;

  if (Object(getComputedStyle["a" /* default */])(body || html).direction === 'rtl') {
    x += Math.max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }

  return {
    width: width,
    height: height,
    x: x,
    y: y
  };
}
// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js + 1 modules
var listScrollParents = __webpack_require__(95);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js + 1 modules
var getOffsetParent = __webpack_require__(58);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
var instanceOf = __webpack_require__(18);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
var getParentNode = __webpack_require__(72);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/contains.js
var contains = __webpack_require__(139);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
var getNodeName = __webpack_require__(31);

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign(Object.assign({}, rect), {}, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}
// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js














function getInnerBoundingClientRect(element) {
  var rect = Object(getBoundingClientRect["a" /* default */])(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}

function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === enums["w" /* viewport */] ? rectToClientRect(getViewportRect(element)) : Object(instanceOf["b" /* isHTMLElement */])(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(Object(getDocumentElement["a" /* default */])(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`


function getClippingParents(element) {
  var clippingParents = Object(listScrollParents["a" /* default */])(Object(getParentNode["a" /* default */])(element));
  var canEscapeClipping = ['absolute', 'fixed'].indexOf(Object(getComputedStyle["a" /* default */])(element).position) >= 0;
  var clipperElement = canEscapeClipping && Object(instanceOf["b" /* isHTMLElement */])(element) ? Object(getOffsetParent["a" /* default */])(element) : element;

  if (!Object(instanceOf["a" /* isElement */])(clipperElement)) {
    return [];
  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


  return clippingParents.filter(function (clippingParent) {
    return Object(instanceOf["a" /* isElement */])(clippingParent) && Object(contains["a" /* default */])(clippingParent, clipperElement) && Object(getNodeName["a" /* default */])(clippingParent) !== 'body';
  });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents


function getClippingRect(element, boundary, rootBoundary) {
  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents[0];
  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = Math.max(rect.top, accRect.top);
    accRect.right = Math.min(rect.right, accRect.right);
    accRect.bottom = Math.min(rect.bottom, accRect.bottom);
    accRect.left = Math.max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}
// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/utils/computeOffsets.js
var computeOffsets = __webpack_require__(143);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
var mergePaddingObject = __webpack_require__(140);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/utils/expandToHashMap.js
var expandToHashMap = __webpack_require__(142);

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/detectOverflow.js








 // eslint-disable-next-line import/no-unused-modules

function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$placement = _options.placement,
      placement = _options$placement === void 0 ? state.placement : _options$placement,
      _options$boundary = _options.boundary,
      boundary = _options$boundary === void 0 ? enums["j" /* clippingParents */] : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary = _options$rootBoundary === void 0 ? enums["w" /* viewport */] : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext = _options$elementConte === void 0 ? enums["p" /* popper */] : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = Object(mergePaddingObject["a" /* default */])(typeof padding !== 'number' ? padding : Object(expandToHashMap["a" /* default */])(padding, enums["e" /* basePlacements */]));
  var altContext = elementContext === enums["p" /* popper */] ? enums["r" /* reference */] : enums["p" /* popper */];
  var referenceElement = state.elements.reference;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(Object(instanceOf["a" /* isElement */])(element) ? element : element.contextElement || Object(getDocumentElement["a" /* default */])(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = Object(getBoundingClientRect["a" /* default */])(referenceElement);
  var popperOffsets = Object(computeOffsets["a" /* default */])({
    reference: referenceClientRect,
    element: popperRect,
    strategy: 'absolute',
    placement: placement
  });
  var popperClientRect = rectToClientRect(Object.assign(Object.assign({}, popperRect), popperOffsets));
  var elementClientRect = elementContext === enums["p" /* popper */] ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
  // 0 or negative = within the clipping rect

  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

  if (elementContext === enums["p" /* popper */] && offsetData) {
    var offset = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function (key) {
      var multiply = [enums["s" /* right */], enums["i" /* bottom */]].indexOf(key) >= 0 ? 1 : -1;
      var axis = [enums["u" /* top */], enums["i" /* bottom */]].indexOf(key) >= 0 ? 'y' : 'x';
      overflowOffsets[key] += offset[axis] * multiply;
    });
  }

  return overflowOffsets;
}

/***/ }),

/***/ 47:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery, module) {
/*
 *
 * More info at [www.dropzonejs.com](http://www.dropzonejs.com)
 *
 * Copyright (c) 2012, Matias Meno
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

(function() {
  var Dropzone, Emitter, camelize, contentLoaded, detectVerticalSquash, drawImageIOSFix, noop, without,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  noop = function() {};

  Emitter = (function() {
    function Emitter() {}

    Emitter.prototype.addEventListener = Emitter.prototype.on;

    Emitter.prototype.on = function(event, fn) {
      this._callbacks = this._callbacks || {};
      if (!this._callbacks[event]) {
        this._callbacks[event] = [];
      }
      this._callbacks[event].push(fn);
      return this;
    };

    Emitter.prototype.emit = function() {
      var args, callback, callbacks, event, _i, _len;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this._callbacks = this._callbacks || {};
      callbacks = this._callbacks[event];
      if (callbacks) {
        for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
          callback = callbacks[_i];
          callback.apply(this, args);
        }
      }
      return this;
    };

    Emitter.prototype.removeListener = Emitter.prototype.off;

    Emitter.prototype.removeAllListeners = Emitter.prototype.off;

    Emitter.prototype.removeEventListener = Emitter.prototype.off;

    Emitter.prototype.off = function(event, fn) {
      var callback, callbacks, i, _i, _len;
      if (!this._callbacks || arguments.length === 0) {
        this._callbacks = {};
        return this;
      }
      callbacks = this._callbacks[event];
      if (!callbacks) {
        return this;
      }
      if (arguments.length === 1) {
        delete this._callbacks[event];
        return this;
      }
      for (i = _i = 0, _len = callbacks.length; _i < _len; i = ++_i) {
        callback = callbacks[i];
        if (callback === fn) {
          callbacks.splice(i, 1);
          break;
        }
      }
      return this;
    };

    return Emitter;

  })();

  Dropzone = (function(_super) {
    var extend, resolveOption;

    __extends(Dropzone, _super);

    Dropzone.prototype.Emitter = Emitter;


    /*
    This is a list of all available events you can register on a dropzone object.
    
    You can register an event handler like this:
    
        dropzone.on("dragEnter", function() { });
     */

    Dropzone.prototype.events = ["drop", "dragstart", "dragend", "dragenter", "dragover", "dragleave", "addedfile", "addedfiles", "removedfile", "thumbnail", "error", "errormultiple", "processing", "processingmultiple", "uploadprogress", "totaluploadprogress", "sending", "sendingmultiple", "success", "successmultiple", "canceled", "canceledmultiple", "complete", "completemultiple", "reset", "maxfilesexceeded", "maxfilesreached", "queuecomplete"];

    Dropzone.prototype.defaultOptions = {
      url: null,
      method: "post",
      withCredentials: false,
      parallelUploads: 2,
      uploadMultiple: false,
      maxFilesize: 256,
      paramName: "file",
      createImageThumbnails: true,
      maxThumbnailFilesize: 10,
      thumbnailWidth: 120,
      thumbnailHeight: 120,
      filesizeBase: 1000,
      maxFiles: null,
      params: {},
      clickable: true,
      ignoreHiddenFiles: true,
      acceptedFiles: null,
      acceptedMimeTypes: null,
      autoProcessQueue: true,
      autoQueue: true,
      addRemoveLinks: false,
      previewsContainer: null,
      hiddenInputContainer: "body",
      capture: null,
      renameFilename: null,
      dictDefaultMessage: "Drop files here to upload",
      dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.",
      dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.",
      dictFileTooBig: "File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.",
      dictInvalidFileType: "You can't upload files of this type.",
      dictResponseError: "Server responded with {{statusCode}} code.",
      dictCancelUpload: "Cancel upload",
      dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?",
      dictRemoveFile: "Remove file",
      dictRemoveFileConfirmation: null,
      dictMaxFilesExceeded: "You can not upload any more files.",
      accept: function(file, done) {
        return done();
      },
      init: function() {
        return noop;
      },
      forceFallback: false,
      fallback: function() {
        var child, messageElement, span, _i, _len, _ref;
        this.element.className = "" + this.element.className + " dz-browser-not-supported";
        _ref = this.element.getElementsByTagName("div");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (/(^| )dz-message($| )/.test(child.className)) {
            messageElement = child;
            child.className = "dz-message";
            continue;
          }
        }
        if (!messageElement) {
          messageElement = Dropzone.createElement("<div class=\"dz-message\"><span></span></div>");
          this.element.appendChild(messageElement);
        }
        span = messageElement.getElementsByTagName("span")[0];
        if (span) {
          if (span.textContent != null) {
            span.textContent = this.options.dictFallbackMessage;
          } else if (span.innerText != null) {
            span.innerText = this.options.dictFallbackMessage;
          }
        }
        return this.element.appendChild(this.getFallbackForm());
      },
      resize: function(file) {
        var info, srcRatio, trgRatio;
        info = {
          srcX: 0,
          srcY: 0,
          srcWidth: file.width,
          srcHeight: file.height
        };
        srcRatio = file.width / file.height;
        info.optWidth = this.options.thumbnailWidth;
        info.optHeight = this.options.thumbnailHeight;
        if ((info.optWidth == null) && (info.optHeight == null)) {
          info.optWidth = info.srcWidth;
          info.optHeight = info.srcHeight;
        } else if (info.optWidth == null) {
          info.optWidth = srcRatio * info.optHeight;
        } else if (info.optHeight == null) {
          info.optHeight = (1 / srcRatio) * info.optWidth;
        }
        trgRatio = info.optWidth / info.optHeight;
        if (file.height < info.optHeight || file.width < info.optWidth) {
          info.trgHeight = info.srcHeight;
          info.trgWidth = info.srcWidth;
        } else {
          if (srcRatio > trgRatio) {
            info.srcHeight = file.height;
            info.srcWidth = info.srcHeight * trgRatio;
          } else {
            info.srcWidth = file.width;
            info.srcHeight = info.srcWidth / trgRatio;
          }
        }
        info.srcX = (file.width - info.srcWidth) / 2;
        info.srcY = (file.height - info.srcHeight) / 2;
        return info;
      },

      /*
      Those functions register themselves to the events on init and handle all
      the user interface specific stuff. Overwriting them won't break the upload
      but can break the way it's displayed.
      You can overwrite them if you don't like the default behavior. If you just
      want to add an additional event handler, register it on the dropzone object
      and don't overwrite those options.
       */
      drop: function(e) {
        return this.element.classList.remove("dz-drag-hover");
      },
      dragstart: noop,
      dragend: function(e) {
        return this.element.classList.remove("dz-drag-hover");
      },
      dragenter: function(e) {
        return this.element.classList.add("dz-drag-hover");
      },
      dragover: function(e) {
        return this.element.classList.add("dz-drag-hover");
      },
      dragleave: function(e) {
        return this.element.classList.remove("dz-drag-hover");
      },
      paste: noop,
      reset: function() {
        return this.element.classList.remove("dz-started");
      },
      addedfile: function(file) {
        var node, removeFileEvent, removeLink, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
        if (this.element === this.previewsContainer) {
          this.element.classList.add("dz-started");
        }
        if (this.previewsContainer) {
          file.previewElement = Dropzone.createElement(this.options.previewTemplate.trim());
          file.previewTemplate = file.previewElement;
          this.previewsContainer.appendChild(file.previewElement);
          _ref = file.previewElement.querySelectorAll("[data-dz-name]");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            node = _ref[_i];
            node.textContent = this._renameFilename(file.name);
          }
          _ref1 = file.previewElement.querySelectorAll("[data-dz-size]");
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            node = _ref1[_j];
            node.innerHTML = this.filesize(file.size);
          }
          if (this.options.addRemoveLinks) {
            file._removeLink = Dropzone.createElement("<a class=\"dz-remove\" href=\"javascript:undefined;\" data-dz-remove>" + this.options.dictRemoveFile + "</a>");
            file.previewElement.appendChild(file._removeLink);
          }
          removeFileEvent = (function(_this) {
            return function(e) {
              e.preventDefault();
              e.stopPropagation();
              if (file.status === Dropzone.UPLOADING) {
                return Dropzone.confirm(_this.options.dictCancelUploadConfirmation, function() {
                  return _this.removeFile(file);
                });
              } else {
                if (_this.options.dictRemoveFileConfirmation) {
                  return Dropzone.confirm(_this.options.dictRemoveFileConfirmation, function() {
                    return _this.removeFile(file);
                  });
                } else {
                  return _this.removeFile(file);
                }
              }
            };
          })(this);
          _ref2 = file.previewElement.querySelectorAll("[data-dz-remove]");
          _results = [];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            removeLink = _ref2[_k];
            _results.push(removeLink.addEventListener("click", removeFileEvent));
          }
          return _results;
        }
      },
      removedfile: function(file) {
        var _ref;
        if (file.previewElement) {
          if ((_ref = file.previewElement) != null) {
            _ref.parentNode.removeChild(file.previewElement);
          }
        }
        return this._updateMaxFilesReachedClass();
      },
      thumbnail: function(file, dataUrl) {
        var thumbnailElement, _i, _len, _ref;
        if (file.previewElement) {
          file.previewElement.classList.remove("dz-file-preview");
          _ref = file.previewElement.querySelectorAll("[data-dz-thumbnail]");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            thumbnailElement = _ref[_i];
            thumbnailElement.alt = file.name;
            thumbnailElement.src = dataUrl;
          }
          return setTimeout(((function(_this) {
            return function() {
              return file.previewElement.classList.add("dz-image-preview");
            };
          })(this)), 1);
        }
      },
      error: function(file, message) {
        var node, _i, _len, _ref, _results;
        if (file.previewElement) {
          file.previewElement.classList.add("dz-error");
          if (typeof message !== "String" && message.error) {
            message = message.error;
          }
          _ref = file.previewElement.querySelectorAll("[data-dz-errormessage]");
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            node = _ref[_i];
            _results.push(node.textContent = message);
          }
          return _results;
        }
      },
      errormultiple: noop,
      processing: function(file) {
        if (file.previewElement) {
          file.previewElement.classList.add("dz-processing");
          if (file._removeLink) {
            return file._removeLink.textContent = this.options.dictCancelUpload;
          }
        }
      },
      processingmultiple: noop,
      uploadprogress: function(file, progress, bytesSent) {
        var node, _i, _len, _ref, _results;
        if (file.previewElement) {
          _ref = file.previewElement.querySelectorAll("[data-dz-uploadprogress]");
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            node = _ref[_i];
            if (node.nodeName === 'PROGRESS') {
              _results.push(node.value = progress);
            } else {
              _results.push(node.style.width = "" + progress + "%");
            }
          }
          return _results;
        }
      },
      totaluploadprogress: noop,
      sending: noop,
      sendingmultiple: noop,
      success: function(file) {
        if (file.previewElement) {
          return file.previewElement.classList.add("dz-success");
        }
      },
      successmultiple: noop,
      canceled: function(file) {
        return this.emit("error", file, "Upload canceled.");
      },
      canceledmultiple: noop,
      complete: function(file) {
        if (file._removeLink) {
          file._removeLink.textContent = this.options.dictRemoveFile;
        }
        if (file.previewElement) {
          return file.previewElement.classList.add("dz-complete");
        }
      },
      completemultiple: noop,
      maxfilesexceeded: noop,
      maxfilesreached: noop,
      queuecomplete: noop,
      addedfiles: noop,
      previewTemplate: "<div class=\"dz-preview dz-file-preview\">\n  <div class=\"dz-image\"><img data-dz-thumbnail /></div>\n  <div class=\"dz-details\">\n    <div class=\"dz-size\"><span data-dz-size></span></div>\n    <div class=\"dz-filename\"><span data-dz-name></span></div>\n  </div>\n  <div class=\"dz-progress\"><span class=\"dz-upload\" data-dz-uploadprogress></span></div>\n  <div class=\"dz-error-message\"><span data-dz-errormessage></span></div>\n  <div class=\"dz-success-mark\">\n    <svg width=\"54px\" height=\"54px\" viewBox=\"0 0 54 54\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n      <title>Check</title>\n      <defs></defs>\n      <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n        <path d=\"M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\" id=\"Oval-2\" stroke-opacity=\"0.198794158\" stroke=\"#747474\" fill-opacity=\"0.816519475\" fill=\"#FFFFFF\" sketch:type=\"MSShapeGroup\"></path>\n      </g>\n    </svg>\n  </div>\n  <div class=\"dz-error-mark\">\n    <svg width=\"54px\" height=\"54px\" viewBox=\"0 0 54 54\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n      <title>Error</title>\n      <defs></defs>\n      <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n        <g id=\"Check-+-Oval-2\" sketch:type=\"MSLayerGroup\" stroke=\"#747474\" stroke-opacity=\"0.198794158\" fill=\"#FFFFFF\" fill-opacity=\"0.816519475\">\n          <path d=\"M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\" id=\"Oval-2\" sketch:type=\"MSShapeGroup\"></path>\n        </g>\n      </g>\n    </svg>\n  </div>\n</div>"
    };

    extend = function() {
      var key, object, objects, target, val, _i, _len;
      target = arguments[0], objects = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      for (_i = 0, _len = objects.length; _i < _len; _i++) {
        object = objects[_i];
        for (key in object) {
          val = object[key];
          target[key] = val;
        }
      }
      return target;
    };

    function Dropzone(element, options) {
      var elementOptions, fallback, _ref;
      this.element = element;
      this.version = Dropzone.version;
      this.defaultOptions.previewTemplate = this.defaultOptions.previewTemplate.replace(/\n*/g, "");
      this.clickableElements = [];
      this.listeners = [];
      this.files = [];
      if (typeof this.element === "string") {
        this.element = document.querySelector(this.element);
      }
      if (!(this.element && (this.element.nodeType != null))) {
        throw new Error("Invalid dropzone element.");
      }
      if (this.element.dropzone) {
        throw new Error("Dropzone already attached.");
      }
      Dropzone.instances.push(this);
      this.element.dropzone = this;
      elementOptions = (_ref = Dropzone.optionsForElement(this.element)) != null ? _ref : {};
      this.options = extend({}, this.defaultOptions, elementOptions, options != null ? options : {});
      if (this.options.forceFallback || !Dropzone.isBrowserSupported()) {
        return this.options.fallback.call(this);
      }
      if (this.options.url == null) {
        this.options.url = this.element.getAttribute("action");
      }
      if (!this.options.url) {
        throw new Error("No URL provided.");
      }
      if (this.options.acceptedFiles && this.options.acceptedMimeTypes) {
        throw new Error("You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.");
      }
      if (this.options.acceptedMimeTypes) {
        this.options.acceptedFiles = this.options.acceptedMimeTypes;
        delete this.options.acceptedMimeTypes;
      }
      this.options.method = this.options.method.toUpperCase();
      if ((fallback = this.getExistingFallback()) && fallback.parentNode) {
        fallback.parentNode.removeChild(fallback);
      }
      if (this.options.previewsContainer !== false) {
        if (this.options.previewsContainer) {
          this.previewsContainer = Dropzone.getElement(this.options.previewsContainer, "previewsContainer");
        } else {
          this.previewsContainer = this.element;
        }
      }
      if (this.options.clickable) {
        if (this.options.clickable === true) {
          this.clickableElements = [this.element];
        } else {
          this.clickableElements = Dropzone.getElements(this.options.clickable, "clickable");
        }
      }
      this.init();
    }

    Dropzone.prototype.getAcceptedFiles = function() {
      var file, _i, _len, _ref, _results;
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.accepted) {
          _results.push(file);
        }
      }
      return _results;
    };

    Dropzone.prototype.getRejectedFiles = function() {
      var file, _i, _len, _ref, _results;
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (!file.accepted) {
          _results.push(file);
        }
      }
      return _results;
    };

    Dropzone.prototype.getFilesWithStatus = function(status) {
      var file, _i, _len, _ref, _results;
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.status === status) {
          _results.push(file);
        }
      }
      return _results;
    };

    Dropzone.prototype.getQueuedFiles = function() {
      return this.getFilesWithStatus(Dropzone.QUEUED);
    };

    Dropzone.prototype.getUploadingFiles = function() {
      return this.getFilesWithStatus(Dropzone.UPLOADING);
    };

    Dropzone.prototype.getAddedFiles = function() {
      return this.getFilesWithStatus(Dropzone.ADDED);
    };

    Dropzone.prototype.getActiveFiles = function() {
      var file, _i, _len, _ref, _results;
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.status === Dropzone.UPLOADING || file.status === Dropzone.QUEUED) {
          _results.push(file);
        }
      }
      return _results;
    };

    Dropzone.prototype.init = function() {
      var eventName, noPropagation, setupHiddenFileInput, _i, _len, _ref, _ref1;
      if (this.element.tagName === "form") {
        this.element.setAttribute("enctype", "multipart/form-data");
      }
      if (this.element.classList.contains("dropzone") && !this.element.querySelector(".dz-message")) {
        this.element.appendChild(Dropzone.createElement("<div class=\"dz-default dz-message\"><span>" + this.options.dictDefaultMessage + "</span></div>"));
      }
      if (this.clickableElements.length) {
        setupHiddenFileInput = (function(_this) {
          return function() {
            if (_this.hiddenFileInput) {
              _this.hiddenFileInput.parentNode.removeChild(_this.hiddenFileInput);
            }
            _this.hiddenFileInput = document.createElement("input");
            _this.hiddenFileInput.setAttribute("type", "file");
            if ((_this.options.maxFiles == null) || _this.options.maxFiles > 1) {
              _this.hiddenFileInput.setAttribute("multiple", "multiple");
            }
            _this.hiddenFileInput.className = "dz-hidden-input";
            if (_this.options.acceptedFiles != null) {
              _this.hiddenFileInput.setAttribute("accept", _this.options.acceptedFiles);
            }
            if (_this.options.capture != null) {
              _this.hiddenFileInput.setAttribute("capture", _this.options.capture);
            }
            _this.hiddenFileInput.style.visibility = "hidden";
            _this.hiddenFileInput.style.position = "absolute";
            _this.hiddenFileInput.style.top = "0";
            _this.hiddenFileInput.style.left = "0";
            _this.hiddenFileInput.style.height = "0";
            _this.hiddenFileInput.style.width = "0";
            document.querySelector(_this.options.hiddenInputContainer).appendChild(_this.hiddenFileInput);
            return _this.hiddenFileInput.addEventListener("change", function() {
              var file, files, _i, _len;
              files = _this.hiddenFileInput.files;
              if (files.length) {
                for (_i = 0, _len = files.length; _i < _len; _i++) {
                  file = files[_i];
                  _this.addFile(file);
                }
              }
              _this.emit("addedfiles", files);
              return setupHiddenFileInput();
            });
          };
        })(this);
        setupHiddenFileInput();
      }
      this.URL = (_ref = window.URL) != null ? _ref : window.webkitURL;
      _ref1 = this.events;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        eventName = _ref1[_i];
        this.on(eventName, this.options[eventName]);
      }
      this.on("uploadprogress", (function(_this) {
        return function() {
          return _this.updateTotalUploadProgress();
        };
      })(this));
      this.on("removedfile", (function(_this) {
        return function() {
          return _this.updateTotalUploadProgress();
        };
      })(this));
      this.on("canceled", (function(_this) {
        return function(file) {
          return _this.emit("complete", file);
        };
      })(this));
      this.on("complete", (function(_this) {
        return function(file) {
          if (_this.getAddedFiles().length === 0 && _this.getUploadingFiles().length === 0 && _this.getQueuedFiles().length === 0) {
            return setTimeout((function() {
              return _this.emit("queuecomplete");
            }), 0);
          }
        };
      })(this));
      noPropagation = function(e) {
        e.stopPropagation();
        if (e.preventDefault) {
          return e.preventDefault();
        } else {
          return e.returnValue = false;
        }
      };
      this.listeners = [
        {
          element: this.element,
          events: {
            "dragstart": (function(_this) {
              return function(e) {
                return _this.emit("dragstart", e);
              };
            })(this),
            "dragenter": (function(_this) {
              return function(e) {
                noPropagation(e);
                return _this.emit("dragenter", e);
              };
            })(this),
            "dragover": (function(_this) {
              return function(e) {
                var efct;
                try {
                  efct = e.dataTransfer.effectAllowed;
                } catch (_error) {}
                e.dataTransfer.dropEffect = 'move' === efct || 'linkMove' === efct ? 'move' : 'copy';
                noPropagation(e);
                return _this.emit("dragover", e);
              };
            })(this),
            "dragleave": (function(_this) {
              return function(e) {
                return _this.emit("dragleave", e);
              };
            })(this),
            "drop": (function(_this) {
              return function(e) {
                noPropagation(e);
                return _this.drop(e);
              };
            })(this),
            "dragend": (function(_this) {
              return function(e) {
                return _this.emit("dragend", e);
              };
            })(this)
          }
        }
      ];
      this.clickableElements.forEach((function(_this) {
        return function(clickableElement) {
          return _this.listeners.push({
            element: clickableElement,
            events: {
              "click": function(evt) {
                if ((clickableElement !== _this.element) || (evt.target === _this.element || Dropzone.elementInside(evt.target, _this.element.querySelector(".dz-message")))) {
                  _this.hiddenFileInput.click();
                }
                return true;
              }
            }
          });
        };
      })(this));
      this.enable();
      return this.options.init.call(this);
    };

    Dropzone.prototype.destroy = function() {
      var _ref;
      this.disable();
      this.removeAllFiles(true);
      if ((_ref = this.hiddenFileInput) != null ? _ref.parentNode : void 0) {
        this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);
        this.hiddenFileInput = null;
      }
      delete this.element.dropzone;
      return Dropzone.instances.splice(Dropzone.instances.indexOf(this), 1);
    };

    Dropzone.prototype.updateTotalUploadProgress = function() {
      var activeFiles, file, totalBytes, totalBytesSent, totalUploadProgress, _i, _len, _ref;
      totalBytesSent = 0;
      totalBytes = 0;
      activeFiles = this.getActiveFiles();
      if (activeFiles.length) {
        _ref = this.getActiveFiles();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          file = _ref[_i];
          totalBytesSent += file.upload.bytesSent;
          totalBytes += file.upload.total;
        }
        totalUploadProgress = 100 * totalBytesSent / totalBytes;
      } else {
        totalUploadProgress = 100;
      }
      return this.emit("totaluploadprogress", totalUploadProgress, totalBytes, totalBytesSent);
    };

    Dropzone.prototype._getParamName = function(n) {
      if (typeof this.options.paramName === "function") {
        return this.options.paramName(n);
      } else {
        return "" + this.options.paramName + (this.options.uploadMultiple ? "[" + n + "]" : "");
      }
    };

    Dropzone.prototype._renameFilename = function(name) {
      if (typeof this.options.renameFilename !== "function") {
        return name;
      }
      return this.options.renameFilename(name);
    };

    Dropzone.prototype.getFallbackForm = function() {
      var existingFallback, fields, fieldsString, form;
      if (existingFallback = this.getExistingFallback()) {
        return existingFallback;
      }
      fieldsString = "<div class=\"dz-fallback\">";
      if (this.options.dictFallbackText) {
        fieldsString += "<p>" + this.options.dictFallbackText + "</p>";
      }
      fieldsString += "<input type=\"file\" name=\"" + (this._getParamName(0)) + "\" " + (this.options.uploadMultiple ? 'multiple="multiple"' : void 0) + " /><input type=\"submit\" value=\"Upload!\"></div>";
      fields = Dropzone.createElement(fieldsString);
      if (this.element.tagName !== "FORM") {
        form = Dropzone.createElement("<form action=\"" + this.options.url + "\" enctype=\"multipart/form-data\" method=\"" + this.options.method + "\"></form>");
        form.appendChild(fields);
      } else {
        this.element.setAttribute("enctype", "multipart/form-data");
        this.element.setAttribute("method", this.options.method);
      }
      return form != null ? form : fields;
    };

    Dropzone.prototype.getExistingFallback = function() {
      var fallback, getFallback, tagName, _i, _len, _ref;
      getFallback = function(elements) {
        var el, _i, _len;
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          el = elements[_i];
          if (/(^| )fallback($| )/.test(el.className)) {
            return el;
          }
        }
      };
      _ref = ["div", "form"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tagName = _ref[_i];
        if (fallback = getFallback(this.element.getElementsByTagName(tagName))) {
          return fallback;
        }
      }
    };

    Dropzone.prototype.setupEventListeners = function() {
      var elementListeners, event, listener, _i, _len, _ref, _results;
      _ref = this.listeners;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elementListeners = _ref[_i];
        _results.push((function() {
          var _ref1, _results1;
          _ref1 = elementListeners.events;
          _results1 = [];
          for (event in _ref1) {
            listener = _ref1[event];
            _results1.push(elementListeners.element.addEventListener(event, listener, false));
          }
          return _results1;
        })());
      }
      return _results;
    };

    Dropzone.prototype.removeEventListeners = function() {
      var elementListeners, event, listener, _i, _len, _ref, _results;
      _ref = this.listeners;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elementListeners = _ref[_i];
        _results.push((function() {
          var _ref1, _results1;
          _ref1 = elementListeners.events;
          _results1 = [];
          for (event in _ref1) {
            listener = _ref1[event];
            _results1.push(elementListeners.element.removeEventListener(event, listener, false));
          }
          return _results1;
        })());
      }
      return _results;
    };

    Dropzone.prototype.disable = function() {
      var file, _i, _len, _ref, _results;
      this.clickableElements.forEach(function(element) {
        return element.classList.remove("dz-clickable");
      });
      this.removeEventListeners();
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        _results.push(this.cancelUpload(file));
      }
      return _results;
    };

    Dropzone.prototype.enable = function() {
      this.clickableElements.forEach(function(element) {
        return element.classList.add("dz-clickable");
      });
      return this.setupEventListeners();
    };

    Dropzone.prototype.filesize = function(size) {
      var cutoff, i, selectedSize, selectedUnit, unit, units, _i, _len;
      selectedSize = 0;
      selectedUnit = "b";
      if (size > 0) {
        units = ['TB', 'GB', 'MB', 'KB', 'b'];
        for (i = _i = 0, _len = units.length; _i < _len; i = ++_i) {
          unit = units[i];
          cutoff = Math.pow(this.options.filesizeBase, 4 - i) / 10;
          if (size >= cutoff) {
            selectedSize = size / Math.pow(this.options.filesizeBase, 4 - i);
            selectedUnit = unit;
            break;
          }
        }
        selectedSize = Math.round(10 * selectedSize) / 10;
      }
      return "<strong>" + selectedSize + "</strong> " + selectedUnit;
    };

    Dropzone.prototype._updateMaxFilesReachedClass = function() {
      if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {
        if (this.getAcceptedFiles().length === this.options.maxFiles) {
          this.emit('maxfilesreached', this.files);
        }
        return this.element.classList.add("dz-max-files-reached");
      } else {
        return this.element.classList.remove("dz-max-files-reached");
      }
    };

    Dropzone.prototype.drop = function(e) {
      var files, items;
      if (!e.dataTransfer) {
        return;
      }
      this.emit("drop", e);
      files = e.dataTransfer.files;
      this.emit("addedfiles", files);
      if (files.length) {
        items = e.dataTransfer.items;
        if (items && items.length && (items[0].webkitGetAsEntry != null)) {
          this._addFilesFromItems(items);
        } else {
          this.handleFiles(files);
        }
      }
    };

    Dropzone.prototype.paste = function(e) {
      var items, _ref;
      if ((e != null ? (_ref = e.clipboardData) != null ? _ref.items : void 0 : void 0) == null) {
        return;
      }
      this.emit("paste", e);
      items = e.clipboardData.items;
      if (items.length) {
        return this._addFilesFromItems(items);
      }
    };

    Dropzone.prototype.handleFiles = function(files) {
      var file, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        _results.push(this.addFile(file));
      }
      return _results;
    };

    Dropzone.prototype._addFilesFromItems = function(items) {
      var entry, item, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        if ((item.webkitGetAsEntry != null) && (entry = item.webkitGetAsEntry())) {
          if (entry.isFile) {
            _results.push(this.addFile(item.getAsFile()));
          } else if (entry.isDirectory) {
            _results.push(this._addFilesFromDirectory(entry, entry.name));
          } else {
            _results.push(void 0);
          }
        } else if (item.getAsFile != null) {
          if ((item.kind == null) || item.kind === "file") {
            _results.push(this.addFile(item.getAsFile()));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Dropzone.prototype._addFilesFromDirectory = function(directory, path) {
      var dirReader, errorHandler, readEntries;
      dirReader = directory.createReader();
      errorHandler = function(error) {
        return typeof console !== "undefined" && console !== null ? typeof console.log === "function" ? console.log(error) : void 0 : void 0;
      };
      readEntries = (function(_this) {
        return function() {
          return dirReader.readEntries(function(entries) {
            var entry, _i, _len;
            if (entries.length > 0) {
              for (_i = 0, _len = entries.length; _i < _len; _i++) {
                entry = entries[_i];
                if (entry.isFile) {
                  entry.file(function(file) {
                    if (_this.options.ignoreHiddenFiles && file.name.substring(0, 1) === '.') {
                      return;
                    }
                    file.fullPath = "" + path + "/" + file.name;
                    return _this.addFile(file);
                  });
                } else if (entry.isDirectory) {
                  _this._addFilesFromDirectory(entry, "" + path + "/" + entry.name);
                }
              }
              readEntries();
            }
            return null;
          }, errorHandler);
        };
      })(this);
      return readEntries();
    };

    Dropzone.prototype.accept = function(file, done) {
      if (file.size > this.options.maxFilesize * 1024 * 1024) {
        return done(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(file.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize));
      } else if (!Dropzone.isValidFile(file, this.options.acceptedFiles)) {
        return done(this.options.dictInvalidFileType);
      } else if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {
        done(this.options.dictMaxFilesExceeded.replace("{{maxFiles}}", this.options.maxFiles));
        return this.emit("maxfilesexceeded", file);
      } else {
        return this.options.accept.call(this, file, done);
      }
    };

    Dropzone.prototype.addFile = function(file) {
      file.upload = {
        progress: 0,
        total: file.size,
        bytesSent: 0
      };
      this.files.push(file);
      file.status = Dropzone.ADDED;
      this.emit("addedfile", file);
      this._enqueueThumbnail(file);
      return this.accept(file, (function(_this) {
        return function(error) {
          if (error) {
            file.accepted = false;
            _this._errorProcessing([file], error);
          } else {
            file.accepted = true;
            if (_this.options.autoQueue) {
              _this.enqueueFile(file);
            }
          }
          return _this._updateMaxFilesReachedClass();
        };
      })(this));
    };

    Dropzone.prototype.enqueueFiles = function(files) {
      var file, _i, _len;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        this.enqueueFile(file);
      }
      return null;
    };

    Dropzone.prototype.enqueueFile = function(file) {
      if (file.status === Dropzone.ADDED && file.accepted === true) {
        file.status = Dropzone.QUEUED;
        if (this.options.autoProcessQueue) {
          return setTimeout(((function(_this) {
            return function() {
              return _this.processQueue();
            };
          })(this)), 0);
        }
      } else {
        throw new Error("This file can't be queued because it has already been processed or was rejected.");
      }
    };

    Dropzone.prototype._thumbnailQueue = [];

    Dropzone.prototype._processingThumbnail = false;

    Dropzone.prototype._enqueueThumbnail = function(file) {
      if (this.options.createImageThumbnails && file.type.match(/image.*/) && file.size <= this.options.maxThumbnailFilesize * 1024 * 1024) {
        this._thumbnailQueue.push(file);
        return setTimeout(((function(_this) {
          return function() {
            return _this._processThumbnailQueue();
          };
        })(this)), 0);
      }
    };

    Dropzone.prototype._processThumbnailQueue = function() {
      if (this._processingThumbnail || this._thumbnailQueue.length === 0) {
        return;
      }
      this._processingThumbnail = true;
      return this.createThumbnail(this._thumbnailQueue.shift(), (function(_this) {
        return function() {
          _this._processingThumbnail = false;
          return _this._processThumbnailQueue();
        };
      })(this));
    };

    Dropzone.prototype.removeFile = function(file) {
      if (file.status === Dropzone.UPLOADING) {
        this.cancelUpload(file);
      }
      this.files = without(this.files, file);
      this.emit("removedfile", file);
      if (this.files.length === 0) {
        return this.emit("reset");
      }
    };

    Dropzone.prototype.removeAllFiles = function(cancelIfNecessary) {
      var file, _i, _len, _ref;
      if (cancelIfNecessary == null) {
        cancelIfNecessary = false;
      }
      _ref = this.files.slice();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.status !== Dropzone.UPLOADING || cancelIfNecessary) {
          this.removeFile(file);
        }
      }
      return null;
    };

    Dropzone.prototype.createThumbnail = function(file, callback) {
      var fileReader;
      fileReader = new FileReader;
      fileReader.onload = (function(_this) {
        return function() {
          if (file.type === "image/svg+xml") {
            _this.emit("thumbnail", file, fileReader.result);
            if (callback != null) {
              callback();
            }
            return;
          }
          return _this.createThumbnailFromUrl(file, fileReader.result, callback);
        };
      })(this);
      return fileReader.readAsDataURL(file);
    };

    Dropzone.prototype.createThumbnailFromUrl = function(file, imageUrl, callback, crossOrigin) {
      var img;
      img = document.createElement("img");
      if (crossOrigin) {
        img.crossOrigin = crossOrigin;
      }
      img.onload = (function(_this) {
        return function() {
          var canvas, ctx, resizeInfo, thumbnail, _ref, _ref1, _ref2, _ref3;
          file.width = img.width;
          file.height = img.height;
          resizeInfo = _this.options.resize.call(_this, file);
          if (resizeInfo.trgWidth == null) {
            resizeInfo.trgWidth = resizeInfo.optWidth;
          }
          if (resizeInfo.trgHeight == null) {
            resizeInfo.trgHeight = resizeInfo.optHeight;
          }
          canvas = document.createElement("canvas");
          ctx = canvas.getContext("2d");
          canvas.width = resizeInfo.trgWidth;
          canvas.height = resizeInfo.trgHeight;
          drawImageIOSFix(ctx, img, (_ref = resizeInfo.srcX) != null ? _ref : 0, (_ref1 = resizeInfo.srcY) != null ? _ref1 : 0, resizeInfo.srcWidth, resizeInfo.srcHeight, (_ref2 = resizeInfo.trgX) != null ? _ref2 : 0, (_ref3 = resizeInfo.trgY) != null ? _ref3 : 0, resizeInfo.trgWidth, resizeInfo.trgHeight);
          thumbnail = canvas.toDataURL("image/png");
          _this.emit("thumbnail", file, thumbnail);
          if (callback != null) {
            return callback();
          }
        };
      })(this);
      if (callback != null) {
        img.onerror = callback;
      }
      return img.src = imageUrl;
    };

    Dropzone.prototype.processQueue = function() {
      var i, parallelUploads, processingLength, queuedFiles;
      parallelUploads = this.options.parallelUploads;
      processingLength = this.getUploadingFiles().length;
      i = processingLength;
      if (processingLength >= parallelUploads) {
        return;
      }
      queuedFiles = this.getQueuedFiles();
      if (!(queuedFiles.length > 0)) {
        return;
      }
      if (this.options.uploadMultiple) {
        return this.processFiles(queuedFiles.slice(0, parallelUploads - processingLength));
      } else {
        while (i < parallelUploads) {
          if (!queuedFiles.length) {
            return;
          }
          this.processFile(queuedFiles.shift());
          i++;
        }
      }
    };

    Dropzone.prototype.processFile = function(file) {
      return this.processFiles([file]);
    };

    Dropzone.prototype.processFiles = function(files) {
      var file, _i, _len;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        file.processing = true;
        file.status = Dropzone.UPLOADING;
        this.emit("processing", file);
      }
      if (this.options.uploadMultiple) {
        this.emit("processingmultiple", files);
      }
      return this.uploadFiles(files);
    };

    Dropzone.prototype._getFilesWithXhr = function(xhr) {
      var file, files;
      return files = (function() {
        var _i, _len, _ref, _results;
        _ref = this.files;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          file = _ref[_i];
          if (file.xhr === xhr) {
            _results.push(file);
          }
        }
        return _results;
      }).call(this);
    };

    Dropzone.prototype.cancelUpload = function(file) {
      var groupedFile, groupedFiles, _i, _j, _len, _len1, _ref;
      if (file.status === Dropzone.UPLOADING) {
        groupedFiles = this._getFilesWithXhr(file.xhr);
        for (_i = 0, _len = groupedFiles.length; _i < _len; _i++) {
          groupedFile = groupedFiles[_i];
          groupedFile.status = Dropzone.CANCELED;
        }
        file.xhr.abort();
        for (_j = 0, _len1 = groupedFiles.length; _j < _len1; _j++) {
          groupedFile = groupedFiles[_j];
          this.emit("canceled", groupedFile);
        }
        if (this.options.uploadMultiple) {
          this.emit("canceledmultiple", groupedFiles);
        }
      } else if ((_ref = file.status) === Dropzone.ADDED || _ref === Dropzone.QUEUED) {
        file.status = Dropzone.CANCELED;
        this.emit("canceled", file);
        if (this.options.uploadMultiple) {
          this.emit("canceledmultiple", [file]);
        }
      }
      if (this.options.autoProcessQueue) {
        return this.processQueue();
      }
    };

    resolveOption = function() {
      var args, option;
      option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (typeof option === 'function') {
        return option.apply(this, args);
      }
      return option;
    };

    Dropzone.prototype.uploadFile = function(file) {
      return this.uploadFiles([file]);
    };

    Dropzone.prototype.uploadFiles = function(files) {
      var file, formData, handleError, headerName, headerValue, headers, i, input, inputName, inputType, key, method, option, progressObj, response, updateProgress, url, value, xhr, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      xhr = new XMLHttpRequest();
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        file.xhr = xhr;
      }
      method = resolveOption(this.options.method, files);
      url = resolveOption(this.options.url, files);
      xhr.open(method, url, true);
      xhr.withCredentials = !!this.options.withCredentials;
      response = null;
      handleError = (function(_this) {
        return function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
            file = files[_j];
            _results.push(_this._errorProcessing(files, response || _this.options.dictResponseError.replace("{{statusCode}}", xhr.status), xhr));
          }
          return _results;
        };
      })(this);
      updateProgress = (function(_this) {
        return function(e) {
          var allFilesFinished, progress, _j, _k, _l, _len1, _len2, _len3, _results;
          if (e != null) {
            progress = 100 * e.loaded / e.total;
            for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
              file = files[_j];
              file.upload = {
                progress: progress,
                total: e.total,
                bytesSent: e.loaded
              };
            }
          } else {
            allFilesFinished = true;
            progress = 100;
            for (_k = 0, _len2 = files.length; _k < _len2; _k++) {
              file = files[_k];
              if (!(file.upload.progress === 100 && file.upload.bytesSent === file.upload.total)) {
                allFilesFinished = false;
              }
              file.upload.progress = progress;
              file.upload.bytesSent = file.upload.total;
            }
            if (allFilesFinished) {
              return;
            }
          }
          _results = [];
          for (_l = 0, _len3 = files.length; _l < _len3; _l++) {
            file = files[_l];
            _results.push(_this.emit("uploadprogress", file, progress, file.upload.bytesSent));
          }
          return _results;
        };
      })(this);
      xhr.onload = (function(_this) {
        return function(e) {
          var _ref;
          if (files[0].status === Dropzone.CANCELED) {
            return;
          }
          if (xhr.readyState !== 4) {
            return;
          }
          response = xhr.responseText;
          if (xhr.getResponseHeader("content-type") && ~xhr.getResponseHeader("content-type").indexOf("application/json")) {
            try {
              response = JSON.parse(response);
            } catch (_error) {
              e = _error;
              response = "Invalid JSON response from server.";
            }
          }
          updateProgress();
          if (!((200 <= (_ref = xhr.status) && _ref < 300))) {
            return handleError();
          } else {
            return _this._finished(files, response, e);
          }
        };
      })(this);
      xhr.onerror = (function(_this) {
        return function() {
          if (files[0].status === Dropzone.CANCELED) {
            return;
          }
          return handleError();
        };
      })(this);
      progressObj = (_ref = xhr.upload) != null ? _ref : xhr;
      progressObj.onprogress = updateProgress;
      headers = {
        "Accept": "application/json",
        "Cache-Control": "no-cache",
        "X-Requested-With": "XMLHttpRequest"
      };
      if (this.options.headers) {
        extend(headers, this.options.headers);
      }
      for (headerName in headers) {
        headerValue = headers[headerName];
        if (headerValue) {
          xhr.setRequestHeader(headerName, headerValue);
        }
      }
      formData = new FormData();
      if (this.options.params) {
        _ref1 = this.options.params;
        for (key in _ref1) {
          value = _ref1[key];
          formData.append(key, value);
        }
      }
      for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
        file = files[_j];
        this.emit("sending", file, xhr, formData);
      }
      if (this.options.uploadMultiple) {
        this.emit("sendingmultiple", files, xhr, formData);
      }
      if (this.element.tagName === "FORM") {
        _ref2 = this.element.querySelectorAll("input, textarea, select, button");
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          input = _ref2[_k];
          inputName = input.getAttribute("name");
          inputType = input.getAttribute("type");
          if (input.tagName === "SELECT" && input.hasAttribute("multiple")) {
            _ref3 = input.options;
            for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
              option = _ref3[_l];
              if (option.selected) {
                formData.append(inputName, option.value);
              }
            }
          } else if (!inputType || ((_ref4 = inputType.toLowerCase()) !== "checkbox" && _ref4 !== "radio") || input.checked) {
            formData.append(inputName, input.value);
          }
        }
      }
      for (i = _m = 0, _ref5 = files.length - 1; 0 <= _ref5 ? _m <= _ref5 : _m >= _ref5; i = 0 <= _ref5 ? ++_m : --_m) {
        formData.append(this._getParamName(i), files[i], this._renameFilename(files[i].name));
      }
      return this.submitRequest(xhr, formData, files);
    };

    Dropzone.prototype.submitRequest = function(xhr, formData, files) {
      return xhr.send(formData);
    };

    Dropzone.prototype._finished = function(files, responseText, e) {
      var file, _i, _len;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        file.status = Dropzone.SUCCESS;
        this.emit("success", file, responseText, e);
        this.emit("complete", file);
      }
      if (this.options.uploadMultiple) {
        this.emit("successmultiple", files, responseText, e);
        this.emit("completemultiple", files);
      }
      if (this.options.autoProcessQueue) {
        return this.processQueue();
      }
    };

    Dropzone.prototype._errorProcessing = function(files, message, xhr) {
      var file, _i, _len;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        file.status = Dropzone.ERROR;
        this.emit("error", file, message, xhr);
        this.emit("complete", file);
      }
      if (this.options.uploadMultiple) {
        this.emit("errormultiple", files, message, xhr);
        this.emit("completemultiple", files);
      }
      if (this.options.autoProcessQueue) {
        return this.processQueue();
      }
    };

    return Dropzone;

  })(Emitter);

  Dropzone.version = "4.3.0";

  Dropzone.options = {};

  Dropzone.optionsForElement = function(element) {
    if (element.getAttribute("id")) {
      return Dropzone.options[camelize(element.getAttribute("id"))];
    } else {
      return void 0;
    }
  };

  Dropzone.instances = [];

  Dropzone.forElement = function(element) {
    if (typeof element === "string") {
      element = document.querySelector(element);
    }
    if ((element != null ? element.dropzone : void 0) == null) {
      throw new Error("No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.");
    }
    return element.dropzone;
  };

  Dropzone.autoDiscover = true;

  Dropzone.discover = function() {
    var checkElements, dropzone, dropzones, _i, _len, _results;
    if (document.querySelectorAll) {
      dropzones = document.querySelectorAll(".dropzone");
    } else {
      dropzones = [];
      checkElements = function(elements) {
        var el, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          el = elements[_i];
          if (/(^| )dropzone($| )/.test(el.className)) {
            _results.push(dropzones.push(el));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      checkElements(document.getElementsByTagName("div"));
      checkElements(document.getElementsByTagName("form"));
    }
    _results = [];
    for (_i = 0, _len = dropzones.length; _i < _len; _i++) {
      dropzone = dropzones[_i];
      if (Dropzone.optionsForElement(dropzone) !== false) {
        _results.push(new Dropzone(dropzone));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Dropzone.blacklistedBrowsers = [/opera.*Macintosh.*version\/12/i];

  Dropzone.isBrowserSupported = function() {
    var capableBrowser, regex, _i, _len, _ref;
    capableBrowser = true;
    if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) {
      if (!("classList" in document.createElement("a"))) {
        capableBrowser = false;
      } else {
        _ref = Dropzone.blacklistedBrowsers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          regex = _ref[_i];
          if (regex.test(navigator.userAgent)) {
            capableBrowser = false;
            continue;
          }
        }
      }
    } else {
      capableBrowser = false;
    }
    return capableBrowser;
  };

  without = function(list, rejectedItem) {
    var item, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      item = list[_i];
      if (item !== rejectedItem) {
        _results.push(item);
      }
    }
    return _results;
  };

  camelize = function(str) {
    return str.replace(/[\-_](\w)/g, function(match) {
      return match.charAt(1).toUpperCase();
    });
  };

  Dropzone.createElement = function(string) {
    var div;
    div = document.createElement("div");
    div.innerHTML = string;
    return div.childNodes[0];
  };

  Dropzone.elementInside = function(element, container) {
    if (element === container) {
      return true;
    }
    while (element = element.parentNode) {
      if (element === container) {
        return true;
      }
    }
    return false;
  };

  Dropzone.getElement = function(el, name) {
    var element;
    if (typeof el === "string") {
      element = document.querySelector(el);
    } else if (el.nodeType != null) {
      element = el;
    }
    if (element == null) {
      throw new Error("Invalid `" + name + "` option provided. Please provide a CSS selector or a plain HTML element.");
    }
    return element;
  };

  Dropzone.getElements = function(els, name) {
    var e, el, elements, _i, _j, _len, _len1, _ref;
    if (els instanceof Array) {
      elements = [];
      try {
        for (_i = 0, _len = els.length; _i < _len; _i++) {
          el = els[_i];
          elements.push(this.getElement(el, name));
        }
      } catch (_error) {
        e = _error;
        elements = null;
      }
    } else if (typeof els === "string") {
      elements = [];
      _ref = document.querySelectorAll(els);
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        el = _ref[_j];
        elements.push(el);
      }
    } else if (els.nodeType != null) {
      elements = [els];
    }
    if (!((elements != null) && elements.length)) {
      throw new Error("Invalid `" + name + "` option provided. Please provide a CSS selector, a plain HTML element or a list of those.");
    }
    return elements;
  };

  Dropzone.confirm = function(question, accepted, rejected) {
    if (window.confirm(question)) {
      return accepted();
    } else if (rejected != null) {
      return rejected();
    }
  };

  Dropzone.isValidFile = function(file, acceptedFiles) {
    var baseMimeType, mimeType, validType, _i, _len;
    if (!acceptedFiles) {
      return true;
    }
    acceptedFiles = acceptedFiles.split(",");
    mimeType = file.type;
    baseMimeType = mimeType.replace(/\/.*$/, "");
    for (_i = 0, _len = acceptedFiles.length; _i < _len; _i++) {
      validType = acceptedFiles[_i];
      validType = validType.trim();
      if (validType.charAt(0) === ".") {
        if (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.length - validType.length) !== -1) {
          return true;
        }
      } else if (/\/\*$/.test(validType)) {
        if (baseMimeType === validType.replace(/\/.*$/, "")) {
          return true;
        }
      } else {
        if (mimeType === validType) {
          return true;
        }
      }
    }
    return false;
  };

  if (typeof jQuery !== "undefined" && jQuery !== null) {
    jQuery.fn.dropzone = function(options) {
      return this.each(function() {
        return new Dropzone(this, options);
      });
    };
  }

  if ( true && module !== null) {
    module.exports = Dropzone;
  } else {
    window.Dropzone = Dropzone;
  }

  Dropzone.ADDED = "added";

  Dropzone.QUEUED = "queued";

  Dropzone.ACCEPTED = Dropzone.QUEUED;

  Dropzone.UPLOADING = "uploading";

  Dropzone.PROCESSING = Dropzone.UPLOADING;

  Dropzone.CANCELED = "canceled";

  Dropzone.ERROR = "error";

  Dropzone.SUCCESS = "success";


  /*
  
  Bugfix for iOS 6 and 7
  Source: http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios
  based on the work of https://github.com/stomita/ios-imagefile-megapixel
   */

  detectVerticalSquash = function(img) {
    var alpha, canvas, ctx, data, ey, ih, iw, py, ratio, sy;
    iw = img.naturalWidth;
    ih = img.naturalHeight;
    canvas = document.createElement("canvas");
    canvas.width = 1;
    canvas.height = ih;
    ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0);
    data = ctx.getImageData(0, 0, 1, ih).data;
    sy = 0;
    ey = ih;
    py = ih;
    while (py > sy) {
      alpha = data[(py - 1) * 4 + 3];
      if (alpha === 0) {
        ey = py;
      } else {
        sy = py;
      }
      py = (ey + sy) >> 1;
    }
    ratio = py / ih;
    if (ratio === 0) {
      return 1;
    } else {
      return ratio;
    }
  };

  drawImageIOSFix = function(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {
    var vertSquashRatio;
    vertSquashRatio = detectVerticalSquash(img);
    return ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);
  };


  /*
   * contentloaded.js
   *
   * Author: Diego Perini (diego.perini at gmail.com)
   * Summary: cross-browser wrapper for DOMContentLoaded
   * Updated: 20101020
   * License: MIT
   * Version: 1.2
   *
   * URL:
   * http://javascript.nwbox.com/ContentLoaded/
   * http://javascript.nwbox.com/ContentLoaded/MIT-LICENSE
   */

  contentLoaded = function(win, fn) {
    var add, doc, done, init, poll, pre, rem, root, top;
    done = false;
    top = true;
    doc = win.document;
    root = doc.documentElement;
    add = (doc.addEventListener ? "addEventListener" : "attachEvent");
    rem = (doc.addEventListener ? "removeEventListener" : "detachEvent");
    pre = (doc.addEventListener ? "" : "on");
    init = function(e) {
      if (e.type === "readystatechange" && doc.readyState !== "complete") {
        return;
      }
      (e.type === "load" ? win : doc)[rem](pre + e.type, init, false);
      if (!done && (done = true)) {
        return fn.call(win, e.type || e);
      }
    };
    poll = function() {
      var e;
      try {
        root.doScroll("left");
      } catch (_error) {
        e = _error;
        setTimeout(poll, 50);
        return;
      }
      return init("poll");
    };
    if (doc.readyState !== "complete") {
      if (doc.createEventObject && root.doScroll) {
        try {
          top = !win.frameElement;
        } catch (_error) {}
        if (top) {
          poll();
        }
      }
      doc[add](pre + "DOMContentLoaded", init, false);
      doc[add](pre + "readystatechange", init, false);
      return win[add](pre + "load", init, false);
    }
  };

  Dropzone._autoDiscoverFunction = function() {
    if (Dropzone.autoDiscover) {
      return Dropzone.discover();
    }
  };

  contentLoaded(window, Dropzone._autoDiscoverFunction);

}).call(this);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0), __webpack_require__(215)(module)))

/***/ }),

/***/ 5:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/jquery/dist/jquery.js-exposed
var jquery_js_exposed = __webpack_require__(0);
var jquery_js_exposed_default = /*#__PURE__*/__webpack_require__.n(jquery_js_exposed);

// EXTERNAL MODULE: ./node_modules/patternslib/src/core/registry.js
var registry = __webpack_require__(12);

// EXTERNAL MODULE: ./node_modules/patternslib/src/core/logging.js
var logging = __webpack_require__(28);

// CONCATENATED MODULE: ./node_modules/patternslib/src/core/mockup-parser.js

var parser = {
  getOptions: function getOptions($el, patternName, options) {
    /* This is the Mockup parser. An alternative parser for Patternslib
     * patterns.
     *
     * NOTE: Use of the Mockup parser is discouraged and is added here for
     * legacy support for the Plone Mockup project.
     *
     * It parses a DOM element for pattern configuration options.
     */
    options = options || {}; // get options from parent element first, stop if element tag name is 'body'

    if ($el.length !== 0 && !jquery_js_exposed_default.a.nodeName($el[0], "body")) {
      options = this.getOptions($el.parent(), patternName, options);
    } // collect all options from element


    var elOptions = {};

    if ($el.length !== 0) {
      elOptions = $el.data("pat-" + patternName);

      if (elOptions) {
        // parse options if string
        if (typeof elOptions === "string") {
          var tmpOptions = {};
          jquery_js_exposed_default.a.each(elOptions.split(";"), function (i, item) {
            item = item.split(":");
            item.reverse();
            var key = item.pop();
            key = key.replace(/^\s+|\s+$/g, ""); // trim

            item.reverse();
            var value = item.join(":");
            value = value.replace(/^\s+|\s+$/g, ""); // trim

            tmpOptions[key] = value;
          });
          elOptions = tmpOptions;
        }
      }
    }

    return jquery_js_exposed_default.a.extend(true, {}, options, elOptions);
  }
};
/* harmony default export */ var mockup_parser = (parser);
// CONCATENATED MODULE: ./node_modules/patternslib/src/core/base.js
/**
 * A Base pattern for creating scoped patterns. It's similar to Backbone's
 * Model class. The advantage of this approach is that each instance of a
 * pattern has its own local scope (closure).
 *
 * A new instance is created for each DOM element on which a pattern applies.
 *
 * You can assign values, such as $el, to `this` for an instance and they
 * will remain unique to that instance.
 *
 * Older Patternslib patterns on the other hand have a single global scope for
 * all DOM elements.
 */




var log = logging["a" /* default */].getLogger("Patternslib Base");

var base_initBasePattern = function initBasePattern($el, options, trigger) {
  if (!$el.jquery) {
    $el = jquery_js_exposed_default()($el);
  }

  var name = this.prototype.name;
  var plog = logging["a" /* default */].getLogger("pat.".concat(name));
  var pattern = $el.data("pattern-".concat(name));

  if (pattern === undefined && registry["a" /* default */].patterns[name]) {
    try {
      options = this.prototype.parser === "mockup" ? mockup_parser.getOptions($el, name, options) : options;
      pattern = new registry["a" /* default */].patterns[name]($el, options, trigger);
    } catch (e) {
      plog.error("Failed while initializing ".concat(name, " pattern."), e);
    }

    $el.data("pattern-".concat(name), pattern);
  }

  return pattern;
};

var base_Base = function Base($el, options, trigger) {
  if (!$el.jquery) {
    $el = jquery_js_exposed_default()($el);
  }

  this.$el = $el;
  this.el = $el[0];
  this.options = jquery_js_exposed_default.a.extend(true, {}, this.defaults || {}, options || {});
  this.init($el, options, trigger);
  this.emit("init");
};

base_Base.prototype = {
  constructor: base_Base,
  on: function on(eventName, eventCallback) {
    this.$el.on("".concat(eventName, ".").concat(this.name, ".patterns"), eventCallback);
  },
  emit: function emit(eventName, args) {
    // args should be a list
    if (args === undefined) {
      args = [];
    }

    this.$el.trigger("".concat(eventName, ".").concat(this.name, ".patterns"), args);
  }
};

base_Base.extend = function (patternProps) {
  /* Helper function to correctly set up the prototype chain for new patterns.
   */
  var parent = this;
  var child; // Check that the required configuration properties are given.

  if (!patternProps) {
    throw new Error("Pattern configuration properties required when calling Base.extend");
  } // The constructor function for the new subclass is either defined by you
  // (the "constructor" property in your `extend` definition), or defaulted
  // by us to simply call the parent's constructor.


  if (Object.hasOwnProperty.call(patternProps, "constructor")) {
    child = patternProps.constructor;
  } else {
    child = function child() {
      parent.apply(this, arguments);
    };
  } // Allow patterns to be extended indefinitely


  child.extend = base_Base.extend; // Static properties required by the Patternslib registry

  child.init = base_initBasePattern;
  child.jquery_plugin = true;
  child.trigger = patternProps.trigger;
  child.parser = (patternProps === null || patternProps === void 0 ? void 0 : patternProps.parser) || null; // Set the prototype chain to inherit from `parent`, without calling
  // `parent`'s constructor function.

  var Surrogate = function Surrogate() {
    this.constructor = child;
  };

  Surrogate.prototype = parent.prototype;
  child.prototype = new Surrogate(); // Add pattern's configuration properties (instance properties) to the subclass,

  jquery_js_exposed_default.a.extend(true, child.prototype, patternProps); // Set a convenience property in case the parent's prototype is needed
  // later.

  child.__super__ = parent.prototype; // Register the pattern in the Patternslib registry.

  if (!patternProps.name) {
    log.warn("This pattern without a name attribute will not be registered!");
  } else if (!patternProps.trigger) {
    log.warn("The pattern ".concat(patternProps.name, " does not have a trigger attribute, it will not be registered."));
  } else {
    registry["a" /* default */].register(child, patternProps.name);
  }

  return child;
};

/* harmony default export */ var base = __webpack_exports__["a"] = (base_Base);

/***/ }),

/***/ 50:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(13);
/* harmony import */ var _logging__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(28);
function _typeof2(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Patterns argument parser




var ArgumentParser = /*#__PURE__*/function () {
  function ArgumentParser(name) {
    _classCallCheck(this, ArgumentParser);

    this.order = [];
    this.parameters = {};
    this.attribute = "data-pat-" + name;
    this.enum_values = {};
    this.enum_conflicts = [];
    this.groups = {};
    this.possible_groups = {};
    this.log = _logging__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].getLogger(name + ".parser");
    this.group_pattern = /([a-z][a-z0-9]*)-([A-Z][a-z0-0\-]*)/i;
    this.json_param_pattern = /^\s*{/i;
    this.named_param_pattern = /^\s*([a-z][a-z0-9\-]*)\s*:(.*)/i;
    this.token_pattern = /((["']).*?(?!\\)\2)|\s*(\S+)\s*/g;
  }

  _createClass(ArgumentParser, [{
    key: "_camelCase",
    value: function _camelCase(str) {
      return str.replace(/\-([a-z])/g, function (__, p1) {
        return p1.toUpperCase();
      });
    }
  }, {
    key: "addAlias",
    value: function addAlias(alias, original) {
      /* Add an alias for a previously added parser argument.
       *
       * Useful when you want to support both US and UK english argument
       * names.
       */
      if (this.parameters[original]) {
        this.parameters[original].alias = alias;
      } else {
        throw 'Attempted to add an alias "' + alias + '" for a non-existing parser argument "' + original + '".';
      }
    }
  }, {
    key: "addGroupToSpec",
    value: function addGroupToSpec(spec) {
      /* Determine wether an argument being parsed can be grouped and
       * update its specifications object accordingly.
       *
       * Internal method used by addArgument and addJSONArgument
       */
      var m = spec.name.match(this.group_pattern);

      if (m) {
        var group = m[1];
        var field = m[2];

        if (group in this.possible_groups) {
          var first_spec = this.possible_groups[group];
          var first_name = first_spec.name.match(this.group_pattern)[2];
          first_spec.group = group;
          first_spec.dest = first_name;
          this.groups[group] = new ArgumentParser();
          this.groups[group].addArgument(first_name, first_spec.value, first_spec.choices, first_spec.multiple);
          delete this.possible_groups[group];
        }

        if (group in this.groups) {
          this.groups[group].addArgument(field, spec.value, spec.choices, spec.multiple);
          spec.group = group;
          spec.dest = field;
        } else {
          this.possible_groups[group] = spec;
          spec.dest = this._camelCase(spec.name);
        }
      }

      return spec;
    }
  }, {
    key: "addJSONArgument",
    value: function addJSONArgument(name, default_value) {
      /* Add an argument where the value is provided in JSON format.
       *
       * This is a different usecase than specifying all arguments to
       * the data-pat-... attributes in JSON format, and instead is part
       * of the normal notation except that a value is in JSON instead of
       * for example a string.
       */
      this.order.push(name);
      this.parameters[name] = this.addGroupToSpec({
        name: name,
        value: default_value,
        dest: name,
        group: null,
        type: "json"
      });
    }
  }, {
    key: "addArgument",
    value: function addArgument(name, default_value, choices, multiple) {
      var spec = {
        name: name,
        value: multiple && !Array.isArray(default_value) ? [default_value] : default_value,
        multiple: multiple,
        dest: name,
        group: null
      };

      if (choices && Array.isArray(choices) && choices.length) {
        spec.choices = choices;
        spec.type = this._typeof(choices[0]);

        var _iterator = _createForOfIteratorHelper(choices),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var choice = _step.value;

            if (this.enum_conflicts.indexOf(choice) !== -1) {
              continue;
            } else if (choice in this.enum_values) {
              this.enum_conflicts.push(choice);
              delete this.enum_values[choice];
            } else {
              this.enum_values[choice] = name;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } else if (typeof spec.value === "string" && spec.value.slice(0, 1) === "$") {
        spec.type = this.parameters[spec.value.slice(1)].type;
      } else {
        // Note that this will get reset by _defaults if default_value is a function.
        spec.type = this._typeof(multiple ? spec.value[0] : spec.value);
      }

      this.order.push(name);
      this.parameters[name] = this.addGroupToSpec(spec);
    }
  }, {
    key: "_typeof",
    value: function _typeof(obj) {
      if (obj === null) {
        return "null";
      }

      return _typeof2(obj);
    }
  }, {
    key: "_coerce",
    value: function _coerce(name, value) {
      var spec = this.parameters[name];
      if (_typeof2(value) !== spec.type) try {
        switch (spec.type) {
          case "json":
            value = JSON.parse(value);
            break;

          case "boolean":
            if (typeof value === "string") {
              value = value.toLowerCase();
              var num = parseInt(value, 10);
              if (!isNaN(num)) value = !!num;else value = value === "true" || value === "y" || value === "yes" || value === "y";
            } else if (typeof value === "number") {
              value = !!value;
            } else {
              throw "Cannot convert value for " + name + " to boolean";
            }

            break;

          case "number":
            if (typeof value === "string") {
              value = parseInt(value, 10);

              if (isNaN(value)) {
                throw "Cannot convert value for " + name + " to number";
              }
            } else if (typeof value === "boolean") {
              value = value + 0;
            } else {
              throw "Cannot convert value for " + name + " to number";
            }

            break;

          case "string":
            value = value.toString();
            break;

          case "null": // Missing default values

          case "undefined":
            break;

          default:
            throw "Do not know how to convert value for " + name + " to " + spec.type;
        }
      } catch (e) {
        this.log.warn(e);
        return null;
      }

      if (spec.choices && spec.choices.indexOf(value) === -1) {
        this.log.warn("Illegal value for " + name + ": " + value);
        return null;
      }

      return value;
    }
  }, {
    key: "_set",
    value: function _set(opts, name, value) {
      if (!(name in this.parameters)) {
        this.log.debug("Ignoring value for unknown argument " + name);
        return;
      }

      var spec = this.parameters[name];
      var parts;

      if (spec.multiple) {
        if (typeof value === "string") {
          parts = value.split(/,+/);
        } else {
          parts = value;
        }

        value = [];

        var _iterator2 = _createForOfIteratorHelper(parts),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var part = _step2.value;

            var v = this._coerce(name, part.trim());

            if (v !== null) {
              value.push(v);
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      } else {
        value = this._coerce(name, value);

        if (value === null) {
          return;
        }
      }

      opts[name] = value;
    }
  }, {
    key: "_split",
    value: function _split(text) {
      var tokens = [];
      text.replace(this.token_pattern, function (match, quoted, __, simple) {
        if (quoted) {
          tokens.push(quoted);
        } else if (simple) {
          tokens.push(simple);
        }
      });
      return tokens;
    }
  }, {
    key: "_parseExtendedNotation",
    value: function _parseExtendedNotation(argstring) {
      var _this = this;

      var opts = {};
      var parts = argstring.replace(/;;/g, "\0x1f").replace(/&amp;/g, "&amp\0x1f").split(/;/).map(function (el) {
        return el.replace(new RegExp("\0x1f", "g"), ";");
      });

      var _iterator3 = _createForOfIteratorHelper(parts),
          _step3;

      try {
        var _loop = function _loop() {
          var part = _step3.value;

          if (!part) {
            return "continue";
          }

          var matches = part.match(_this.named_param_pattern);

          if (!matches) {
            _this.log.warn("Invalid parameter: " + part + ": " + argstring);

            return "continue";
          }

          var name = matches[1];
          var value = matches[2].trim();
          var arg = Object.values(_this.parameters).filter(function (it) {
            return it.alias === name;
          });
          var is_alias = arg.length === 1;

          if (is_alias) {
            _this._set(opts, arg[0].name, value);
          } else if (name in _this.parameters) {
            _this._set(opts, name, value);
          } else if (name in _this.groups) {
            var subopt = _this.groups[name]._parseShorthandNotation(value);

            for (var field in subopt) {
              _this._set(opts, name + "-" + field, subopt[field]);
            }
          } else {
            _this.log.warn("Unknown named parameter " + matches[1]);

            return "continue";
          }
        };

        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _ret = _loop();

          if (_ret === "continue") continue;
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return opts;
    }
  }, {
    key: "_parseShorthandNotation",
    value: function _parseShorthandNotation(parameter) {
      var parts = this._split(parameter);

      var opts = {};
      var i = 0;

      while (parts.length) {
        var part = parts.shift().trim();
        var sense = void 0;
        var flag = void 0;
        var positional = true;

        if (part.slice(0, 3) === "no-") {
          sense = false;
          flag = part.slice(3);
        } else {
          sense = true;
          flag = part;
        }

        if (flag in this.parameters && this.parameters[flag].type === "boolean") {
          positional = false;

          this._set(opts, flag, sense);
        } else if (flag in this.enum_values) {
          positional = false;

          this._set(opts, this.enum_values[flag], flag);
        } else if (positional) this._set(opts, this.order[i], part);else {
          parts.unshift(part);
          break;
        }

        i++;

        if (i >= this.order.length) {
          break;
        }
      }

      if (parts.length) this.log.warn("Ignore extra arguments: " + parts.join(" "));
      return opts;
    }
  }, {
    key: "_parse",
    value: function _parse(parameter) {
      if (!parameter) {
        return {};
      }

      if (parameter.match(this.json_param_pattern)) {
        try {
          return JSON.parse(parameter);
        } catch (e) {
          this.log.warn("Invalid JSON argument found: " + parameter);
        }
      }

      if (parameter.match(this.named_param_pattern)) {
        return this._parseExtendedNotation(parameter);
      }

      var sep = parameter.indexOf(";");

      if (sep === -1) {
        return this._parseShorthandNotation(parameter);
      }

      var opts = this._parseShorthandNotation(parameter.slice(0, sep));

      var extended = this._parseExtendedNotation(parameter.slice(sep + 1));

      for (var name in extended) {
        opts[name] = extended[name];
      }

      return opts;
    }
  }, {
    key: "_defaults",
    value: function _defaults($el) {
      var result = {};

      for (var name in this.parameters) {
        if (typeof this.parameters[name].value === "function") try {
          result[name] = this.parameters[name].value($el, name);
          this.parameters[name].type = _typeof2(result[name]);
        } catch (e) {
          this.log.error("Default function for " + name + " failed.");
        } else result[name] = this.parameters[name].value;
      }

      return result;
    }
  }, {
    key: "_cleanupOptions",
    value: function _cleanupOptions(options) {
      // Resolve references
      for (var _i = 0, _Object$keys = Object.keys(options); _i < _Object$keys.length; _i++) {
        var name = _Object$keys[_i];
        var spec = this.parameters[name];
        if (spec === undefined) continue;
        if (options[name] === spec.value && typeof spec.value === "string" && spec.value.slice(0, 1) === "$") options[name] = options[spec.value.slice(1)];
      } // Move options into groups and do renames


      for (var _i2 = 0, _Object$keys2 = Object.keys(options); _i2 < _Object$keys2.length; _i2++) {
        var _name = _Object$keys2[_i2];
        var _spec = this.parameters[_name];
        var target = void 0;
        if (_spec === undefined) continue;

        if (_spec.group) {
          if (_typeof2(options[_spec.group]) !== "object") options[_spec.group] = {};
          target = options[_spec.group];
        } else {
          target = options;
        }

        if (_spec.dest !== _name) {
          target[_spec.dest] = options[_name];
          delete options[_name];
        }
      }

      return options;
    }
  }, {
    key: "parse",
    value: function parse($el, options, multiple, inherit) {
      if (!$el.jquery) {
        $el = jquery__WEBPACK_IMPORTED_MODULE_0___default()($el);
      }

      if (typeof options === "boolean" && multiple === undefined) {
        // Fix argument order: ``multiple`` passed instead of ``options``.
        multiple = options;
        options = {};
      }

      inherit = inherit !== false;
      var stack = inherit ? [[this._defaults($el)]] : [[{}]];
      var $possible_config_providers;
      var final_length = 1;
      /*
       * XXX this is a workaround for:
       * - https://github.com/Patternslib/Patterns/issues/393
       *
       * Prevents the parser to pollute the pat-modal configuration
       * with data-pat-inject elements define in a `.pat-modal` parent element.
       *
       *  Probably this function should be completely revisited, see:
       * - https://github.com/Patternslib/Patterns/issues/627
       *
       */

      if (!inherit || $el.hasClass("pat-modal") && this.attribute === "data-pat-inject") {
        $possible_config_providers = $el;
      } else {
        $possible_config_providers = $el.parents("[" + this.attribute + "]").addBack();
      }

      var _iterator4 = _createForOfIteratorHelper($possible_config_providers),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var provider = _step4.value;
          var frame = void 0;
          var data = jquery__WEBPACK_IMPORTED_MODULE_0___default()(provider).attr(this.attribute);

          if (!data) {
            continue;
          }

          var _parse = this._parse.bind(this);

          if (data.match(/&&/)) {
            frame = data.split(/\s*&&\s*/).map(_parse);
          } else {
            frame = [_parse(data)];
          }

          final_length = Math.max(frame.length, final_length);
          stack.push(frame);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      if (_typeof2(options) === "object") {
        if (Array.isArray(options)) {
          stack.push(options);
          final_length = Math.max(options.length, final_length);
        } else stack.push([options]);
      }

      if (!multiple) {
        final_length = 1;
      }

      var results = _utils_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].removeDuplicateObjects(_utils_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].mergeStack(stack, final_length)).map(this._cleanupOptions.bind(this));
      return multiple ? results : results[0];
    }
  }]);

  return ArgumentParser;
}(); // BBB


ArgumentParser.prototype.add_argument = ArgumentParser.prototype.addArgument;
/* harmony default export */ __webpack_exports__["a"] = (ArgumentParser);

/***/ }),

/***/ 51:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(32);
/* harmony import */ var patternslib_src_pat_tooltip_tooltip__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(111);



/* harmony default export */ __webpack_exports__["a"] = (_base__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].extend({
  tagName: "a",
  className: "btn",
  eventPrefix: "button",
  context: "default",
  idPrefix: "btn-",
  attributes: {
    href: "#"
  },
  extraClasses: [],
  tooltip: null,
  template: '<% if (icon) { %><span class="glyphicon glyphicon-<%= icon %>"></span><% } %> <%= title %>',
  events: {
    click: "handleClick"
  },
  initialize: function initialize(options) {
    if (!options.id) {
      var title = options.title || "";
      options.id = title !== "" ? title.toLowerCase().replace(" ", "-") : this.cid; // prettier-ignore
    }

    _base__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].prototype.initialize.apply(this, [options]);
    this.on("render", function () {
      this.$el.attr("title", this.options.title || "");
      this.$el.attr("aria-label", this.options.title || this.options.tooltip || "");

      if (this.context !== null) {
        this.$el.addClass("btn-" + this.context);
      }

      underscore__WEBPACK_IMPORTED_MODULE_0__["default"].each(this.extraClasses, function (klass) {
        this.$el.addClass(klass);
      }.bind(this));

      if (this.tooltip !== null) {
        this.$el.attr("title", this.tooltip);
        new patternslib_src_pat_tooltip_tooltip__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](this.$el); // XXX since tooltip triggers hidden
        // suppress so it plays nice with modals, backdrops, etc

        this.$el.on("hidden", function (e) {
          if (e.type === "hidden") {
            e.stopPropagation();
          }
        });
      }
    }, this);
  },
  handleClick: function handleClick(e) {
    e.preventDefault();

    if (!this.$el.is(".disabled")) {
      this.uiEventTrigger("click", this, e);
    }
  },
  serializedModel: function serializedModel() {
    return underscore__WEBPACK_IMPORTED_MODULE_0__["default"].extend({
      icon: "",
      title: ""
    }, this.options);
  },
  disable: function disable() {
    this.$el.addClass("disabled");
  },
  enable: function enable() {
    this.$el.removeClass("disabled");
  }
}));

/***/ }),

/***/ 52:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(37);
/* harmony import */ var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var patternslib_src_core_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _core_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

 // needed for ``await`` support




/* harmony default export */ __webpack_exports__["default"] = (patternslib_src_core_base__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].extend({
  name: "select2",
  trigger: ".pat-select2",
  parser: "mockup",
  defaults: {
    separator: ","
  },
  initializeValues: function initializeValues() {
    var self = this; // Init Selection ---------------------------------------------

    if (self.options.initialValues) {
      self.options.id = function (term) {
        return term.id;
      };

      self.options.initSelection = function ($el, callback) {
        var data = [],
            value = $el.val(),
            seldefaults = self.options.initialValues; // Create the initSelection value that contains the default selection,
        // but in a javascript object

        if (typeof self.options.initialValues === "string" && self.options.initialValues !== "") {
          // if default selection value starts with a '{', then treat the value as
          // a JSON object that needs to be parsed
          if (self.options.initialValues[0] === "{") {
            seldefaults = JSON.parse(self.options.initialValues);
          } // otherwise, treat the value as a list, separated by the defaults.separator value of
          // strings in the format "id:text", and convert it to an object
          else {
              seldefaults = {};
              jquery__WEBPACK_IMPORTED_MODULE_1___default()(self.options.initialValues.split(self.options.separator)).each(function () {
                var selection = this.split(":");
                var id = jquery__WEBPACK_IMPORTED_MODULE_1___default.a.trim(selection[0]);
                var text = jquery__WEBPACK_IMPORTED_MODULE_1___default.a.trim(selection[1]);
                seldefaults[id] = text;
              });
            }
        }

        jquery__WEBPACK_IMPORTED_MODULE_1___default()(value.split(self.options.separator)).each(function () {
          var text = this;

          if (seldefaults[this]) {
            text = seldefaults[this];
          }

          data.push({
            id: _core_utils__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].removeHTML(this),
            text: _core_utils__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].removeHTML(text)
          });
        });
        callback(data);
      };
    }
  },
  initializeTags: function initializeTags() {
    var self = this;

    if (self.options.tags && typeof self.options.tags === "string") {
      if (self.options.tags.substr(0, 1) === "[") {
        self.options.tags = JSON.parse(self.options.tags);
      } else {
        self.options.tags = self.options.tags.split(self.options.separator);
      }
    }

    if (self.options.tags && !self.options.allowNewItems) {
      self.options.data = jquery__WEBPACK_IMPORTED_MODULE_1___default.a.map(self.options.tags, function (value, i) {
        return {
          id: value,
          text: value
        };
      });
      self.options.multiple = true;
      delete self.options.tags;
    }
  },
  initializeOrdering: function () {
    var _initializeOrdering = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var _this = this;

      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (this.options.orderable) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return");

            case 2:
              // TODO: fix sorting!
              this.$el.on("change", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var Sortable, sortable_el;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return __webpack_require__.e(/* import() */ 62).then(__webpack_require__.bind(null, 594));

                      case 2:
                        Sortable = _context.sent;
                        Sortable = Sortable.default;
                        sortable_el = _this.$select2[0].querySelector(".select2-choices");
                        new Sortable(sortable_el, {
                          draggable: "li",
                          dragClass: "select2-choice-dragging",
                          chosenClass: "dragging",
                          onStart: function onStart() {
                            return _this.$el.select2("onSortStart");
                          },
                          onEnd: function onEnd() {
                            return _this.$el.select2("onSortEnd");
                          }
                        });

                      case 6:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              })));

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function initializeOrdering() {
      return _initializeOrdering.apply(this, arguments);
    }

    return initializeOrdering;
  }(),
  initializeSelect2: function () {
    var _initializeSelect = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      var self, callback;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              callback = function _callback(action, e) {
                if (action) {
                  if (self.options.debug) {
                    console.debug("callback", action, e);
                  }

                  if (typeof action === "string") {
                    action = window[action];
                  }

                  return action(e);
                } else {
                  return action;
                }
              };

              __webpack_require__.e(/* import() */ 148).then(__webpack_require__.t.bind(null, 595, 7));
              _context3.next = 4;
              return __webpack_require__.e(/* import() */ 186).then(__webpack_require__.t.bind(null, 596, 7));

            case 4:
              self = this;

              self.options.formatResultCssClass = function (ob) {
                if (ob.id) {
                  return "select2-option-" + ob.id.toLowerCase().replace(/[ \:\)\(\[\]\{\}\_\+\=\&\*\%\#]/g, "-");
                }
              };

              jquery__WEBPACK_IMPORTED_MODULE_1___default()(self.el).select2(self.options);
              self.$el.on("select2-selected", function (e) {
                callback(self.options.onSelected, e);
              });
              self.$el.on("select2-selecting", function (e) {
                callback(self.options.onSelecting, e);
              });
              self.$el.on("select2-deselecting", function (e) {
                callback(self.options.onDeselecting, e);
              });
              self.$el.on("select2-deselected", function (e) {
                callback(self.options.onDeselected, e);
              });
              self.$select2 = self.$el.parent().find(".select2-container");
              self.$el.parent().off("close.plone-modal.patterns");

              if (self.options.orderable) {
                self.$select2.addClass("select2-orderable");
              }

            case 14:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function initializeSelect2() {
      return _initializeSelect.apply(this, arguments);
    }

    return initializeSelect2;
  }(),
  opened: function opened() {
    var self = this;
    var isOpen = jquery__WEBPACK_IMPORTED_MODULE_1___default()(".select2-dropdown-open", self.$el.parent()).length === 1;
    return isOpen;
  },
  init: function init() {
    var self = this;
    self.options.allowNewItems = self.options.hasOwnProperty("allowNewItems") ? JSON.parse(self.options.allowNewItems) : true;

    if (self.options.ajax || self.options.vocabularyUrl) {
      if (self.options.vocabularyUrl) {
        self.options.multiple = self.options.multiple === undefined ? true : self.options.multiple;
        self.options.ajax = self.options.ajax || {};
        self.options.ajax.url = self.options.vocabularyUrl; // XXX removing the following function does'nt break tests. dead code?

        self.options.initSelection = function ($el, callback) {
          var data = [],
              value = $el.val();
          jquery__WEBPACK_IMPORTED_MODULE_1___default()(value.split(self.options.separator)).each(function () {
            var val = _core_utils__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].removeHTML(this);
            data.push({
              id: val,
              text: val
            });
          });
          callback(data);
        };
      }

      var queryTerm = "";
      self.options.ajax = jquery__WEBPACK_IMPORTED_MODULE_1___default.a.extend({
        quietMillis: 300,
        data: function data(term, page) {
          queryTerm = term;
          return {
            query: term,
            page_limit: 10,
            page: page
          };
        },
        results: function results(data, page) {
          var results = data.results;

          if (self.options.vocabularyUrl) {
            var dataIds = [];
            jquery__WEBPACK_IMPORTED_MODULE_1___default.a.each(data.results, function (i, item) {
              dataIds.push(item.id);
            });
            results = [];
            var haveResult = queryTerm === "" || jquery__WEBPACK_IMPORTED_MODULE_1___default.a.inArray(queryTerm, dataIds) >= 0;

            if (self.options.allowNewItems && !haveResult) {
              queryTerm = _core_utils__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].removeHTML(queryTerm);
              results.push({
                id: queryTerm,
                text: queryTerm
              });
            }

            jquery__WEBPACK_IMPORTED_MODULE_1___default.a.each(data.results, function (i, item) {
              results.push(item);
            });
          }

          return {
            results: results
          };
        }
      }, self.options.ajax);
    } else if (self.options.multiple && self.$el.is("select")) {
      // Multiselects need to be converted to input[type=hidden]
      // for Select2
      var vals = self.$el.val() || [];
      var options = jquery__WEBPACK_IMPORTED_MODULE_1___default.a.map(self.$el.find("option"), function (o) {
        return {
          text: jquery__WEBPACK_IMPORTED_MODULE_1___default()(o).html(),
          id: o.value
        };
      });
      var $hidden = jquery__WEBPACK_IMPORTED_MODULE_1___default()('<input type="hidden" />');
      $hidden.val(vals.join(self.options.separator));
      $hidden.attr("class", self.$el.attr("class"));
      $hidden.attr("name", self.$el.attr("name"));
      $hidden.attr("id", self.$el.attr("id"));
      self.$orig = self.$el;
      self.$el.replaceWith($hidden);
      self.$el = $hidden;
      self.options.data = options;
    }

    self.initializeValues();
    self.initializeTags();
    self.initializeOrdering();
    self.initializeSelect2();
  }
}));

/***/ }),

/***/ 58:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ getOffsetParent; });

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindow.js
var getWindow = __webpack_require__(26);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
var getNodeName = __webpack_require__(31);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
var getComputedStyle = __webpack_require__(36);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
var instanceOf = __webpack_require__(18);

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js

function isTableElement(element) {
  return ['table', 'td', 'th'].indexOf(Object(getNodeName["a" /* default */])(element)) >= 0;
}
// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
var getParentNode = __webpack_require__(72);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
var getDocumentElement = __webpack_require__(27);

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js








function getTrueOffsetParent(element) {
  if (!Object(instanceOf["b" /* isHTMLElement */])(element) || // https://github.com/popperjs/popper-core/issues/837
  Object(getComputedStyle["a" /* default */])(element).position === 'fixed') {
    return null;
  }

  var offsetParent = element.offsetParent;

  if (offsetParent) {
    var html = Object(getDocumentElement["a" /* default */])(offsetParent);

    if (Object(getNodeName["a" /* default */])(offsetParent) === 'body' && Object(getComputedStyle["a" /* default */])(offsetParent).position === 'static' && Object(getComputedStyle["a" /* default */])(html).position !== 'static') {
      return html;
    }
  }

  return offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block


function getContainingBlock(element) {
  var currentNode = Object(getParentNode["a" /* default */])(element);

  while (Object(instanceOf["b" /* isHTMLElement */])(currentNode) && ['html', 'body'].indexOf(Object(getNodeName["a" /* default */])(currentNode)) < 0) {
    var css = Object(getComputedStyle["a" /* default */])(currentNode); // This is non-exhaustive but covers the most common CSS properties that
    // create a containing block.

    if (css.transform !== 'none' || css.perspective !== 'none' || css.willChange && css.willChange !== 'auto') {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }

  return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.


function getOffsetParent(element) {
  var window = Object(getWindow["a" /* default */])(element);
  var offsetParent = getTrueOffsetParent(element);

  while (offsetParent && isTableElement(offsetParent) && Object(getComputedStyle["a" /* default */])(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent);
  }

  if (offsetParent && Object(getNodeName["a" /* default */])(offsetParent) === 'body' && Object(getComputedStyle["a" /* default */])(offsetParent).position === 'static') {
    return window;
  }

  return offsetParent || getContainingBlock(element) || window;
}

/***/ }),

/***/ 581:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/mockup/src/public_path.js
var public_path = __webpack_require__(364);

// EXTERNAL MODULE: ./node_modules/patternslib/src/core/registry.js
var registry = __webpack_require__(12);

// EXTERNAL MODULE: ./node_modules/jquery/dist/jquery.js-exposed
var jquery_js_exposed = __webpack_require__(0);
var jquery_js_exposed_default = /*#__PURE__*/__webpack_require__.n(jquery_js_exposed);

// EXTERNAL MODULE: ./node_modules/regenerator-runtime/runtime.js
var runtime = __webpack_require__(37);

// EXTERNAL MODULE: ./node_modules/patternslib/src/core/base.js + 1 modules
var core_base = __webpack_require__(5);

// EXTERNAL MODULE: ./node_modules/patternslib/src/core/parser.js
var parser = __webpack_require__(50);

// EXTERNAL MODULE: ./node_modules/patternslib/src/core/utils.js
var utils = __webpack_require__(13);

// EXTERNAL MODULE: ./node_modules/patternslib/src/core/dom.js
var dom = __webpack_require__(35);

// CONCATENATED MODULE: ./node_modules/patternslib/src/pat/datetime-picker/datetime-picker.js
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/* pat-datetime-picker  - Polyfill for input type=datetime-local */
 // needed for ``await`` support





var datetime_picker_parser = new parser["a" /* default */]("datetime-picker");
datetime_picker_parser.addArgument("behavior", "styled", ["native", "styled"]);
datetime_picker_parser.addArgument("format", "YYYY-MM-DD");
datetime_picker_parser.addArgument("week-numbers", [], ["show", "hide"]);
datetime_picker_parser.addArgument("i18n"); // URL pointing to JSON resource with i18n values

datetime_picker_parser.addArgument("today", "Today");
datetime_picker_parser.addArgument("clear", "Clear");
datetime_picker_parser.addArgument("first-day", 0);
/* harmony default export */ var datetime_picker = (core_base["a" /* default */].extend({
  name: "datetime-picker",
  trigger: ".pat-datetime-picker",
  parser: datetime_picker_parser,
  el_date: null,
  el_time: null,
  init: function init() {
    var _this = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var el, DatePicker, value, date_value, time_value, el_wrapper, html_btn_now, html_btn_clear, date_options, btn_now, btn_clear;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              el = _this.el;
              _this.options = datetime_picker_parser.parse(_this.el, _this.options);

              if (!(_this.options.behavior === "native" && utils["a" /* default */].checkInputSupport("datetime-local", "invalid date"))) {
                _context.next = 4;
                break;
              }

              return _context.abrupt("return");

            case 4:
              _context.next = 6;
              return __webpack_require__.e(/* import() */ 176).then(__webpack_require__.bind(null, 648));

            case 6:
              DatePicker = _context.sent;
              DatePicker = DatePicker.default;

              if (!window.__patternslib_import_styles) {
                _context.next = 11;
                break;
              }

              _context.next = 11;
              return __webpack_require__.e(/* import() */ 152).then(__webpack_require__.t.bind(null, 649, 7));

            case 11:
              value = _this.el.value.split("T");
              date_value = value[0] || "";
              time_value = value[1] || "";
              el_wrapper = document.createElement("div");
              el_wrapper.setAttribute("class", "pat-datetime-picker__wrapper");
              dom["a" /* default */].hide(el); // let the buttons be of type button otherwise they are submit buttons

              html_btn_now = "\n            <button type=\"button\" class=\"_btn _now\" title=\"".concat(_this.options.today, "\">\n                <span class=\"_icon\"/>\n                <span class=\"_text\">").concat(_this.options.today, "</span>\n            </button>");
              html_btn_clear = "\n            <button type=\"button\" class=\"_btn _clear\" title=\"".concat(_this.options.clear, "\">\n                <span class=\"_icon\"/>\n                <span class=\"_text\">").concat(_this.options.clear, "</span>\n            </button>");
              el_wrapper.innerHTML = "\n            <input type=\"date\" placeholder=\"YYYY-MM-DD\" value=\"".concat(date_value, "\" />\n            <input type=\"time\" placeholder=\"hh:mm\" value=\"").concat(time_value, "\" />\n            ").concat(_this.options.today ? html_btn_now : "", "\n            ").concat(_this.options.clear ? html_btn_clear : "", "\n        ");
              _this.el_time = el_wrapper.querySelector("input[type=time]");

              _this.el_time.addEventListener("change", function () {
                return _this.update();
              });

              _this.el_date = el_wrapper.querySelector("input[type=date]");

              _this.el_date.addEventListener("change", function () {
                if (!_this.el_time.value) {
                  // Set time on date change, if time was empty.
                  _this.el_time.value = _this.isotime();
                }

                _this.update();
              });

              date_options = {
                behavior: _this.options.behavior,
                weekNumbers: _this.options.weekNumbers,
                firstDay: _this.options.firstDay
              };
              _context.next = 27;
              return DatePicker.init(_this.el_date, date_options);

            case 27:
              if (_this.options.today) {
                btn_now = el_wrapper.querySelector("._btn._now");
                btn_now.addEventListener("click", function (e) {
                  e.preventDefault();
                  _this.el_date.value = _this.isodate();
                  _this.el_time.value = _this.isotime();

                  _this.update();
                });
              }

              if (_this.options.clear) {
                btn_clear = el_wrapper.querySelector("._btn._clear");
                btn_clear.addEventListener("click", function (e) {
                  e.preventDefault();
                  _this.el_date.value = "";
                  _this.el_time.value = "";

                  _this.update();
                });
              } // TODO: timezone


              el.parentNode.insertBefore(el_wrapper, el);

            case 30:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  update: function update() {
    if (this.el_date.value && this.el_time.value) {
      this.el.value = "".concat(this.el_date.value, "T").concat(this.el_time.value);
    } else {
      this.el.value = "";
    }

    this.el.dispatchEvent(new Event("change", {
      bubbles: true
    }));
  },
  isodate: function isodate() {
    var now = new Date();
    return now.toISOString().substr(0, 10);
  },
  isotime: function isotime() {
    var now = new Date();
    return now.toTimeString().substr(0, 5);
  }
}));
// EXTERNAL MODULE: ./node_modules/underscore/modules/index-all.js + 159 modules
var index_all = __webpack_require__(1);

// CONCATENATED MODULE: ./node_modules/patternslib/src/pat/validation/validation.js
function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function validation_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function validation_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { validation_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { validation_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Patterns validate - Form vlidation
 *
 * Copyright 2013 Simplon B.V. - Wichert Akkerman
 * Copyright 2014-2015 Syslab.com GmBH  - JC Brand
 */
 // needed for ``await`` support





 // Lazy loading modules.

var Validate;
var Moment;
var validation_parser = new parser["a" /* default */]("validation");
validation_parser.addArgument("disable-selector"); // Elements which must be disabled if there are errors

validation_parser.addArgument("message-date", "This value must be a valid date");
validation_parser.addArgument("message-datetime", "This value must be a valid date and time");
validation_parser.addArgument("message-email", "This value must be a valid email address");
validation_parser.addArgument("message-integer", "This value must be an integer");
validation_parser.addArgument("message-max", "This value must be less than or equal to %{count}");
validation_parser.addArgument("message-min", "This value must be greater than or equal to %{count}");
validation_parser.addArgument("message-number", "This value must be a number");
validation_parser.addArgument("message-required", "This field is required");
validation_parser.addArgument("message-equality", "is not equal to %{attribute}");
validation_parser.addArgument("message-confirm", "This field is required");
validation_parser.addArgument("not-after");
validation_parser.addArgument("not-before");
validation_parser.addArgument("equality");
validation_parser.addArgument("type", undefined, ["integer", "date", "datetime"]);
var VALIDATION_TYPE_MAP = {
  required: "presence",
  email: "email",
  datetime: "datetime",
  date: "date"
};
/* harmony default export */ var validation = (core_base["a" /* default */].extend({
  name: "validation",
  trigger: "form.pat-validation",
  init: function init($el, opts) {
    var _this = this;

    return validation_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return __webpack_require__.e(/* import() */ 174).then(__webpack_require__.t.bind(null, 650, 7));

            case 2:
              Validate = _context.sent;
              Validate = Validate.default;
              _context.next = 6;
              return Promise.resolve(/* import() */).then(__webpack_require__.t.bind(null, 79, 7));

            case 6:
              Moment = _context.sent;
              Moment = Moment.default;

              _this.extend_validate();

              _this.errors = 0;
              _this.options = validation_parser.parse(_this.$el, opts);
              _this.$inputs = _this.$el.find("input[name], select[name], textarea[name]");

              _this.$el.find("input[type=number]").on("keyup mouseup", index_all["default"].debounce(function (ev) {
                this.validateElement(ev.target);
              }.bind(_this), 500));

              _this.$inputs.on("change.pat-validation", function (ev) {
                this.validateElement(ev.target);
              }.bind(_this)); // formaction causes form validation to be skipped, so validate on
              // submit button click instead.


              _this.$el.find("button[type=submit][formaction]").on("click.pat-validation", _this.validateForm.bind(_this));

              _this.$el.on("submit.pat-validation", _this.validateForm.bind(_this));

              _this.$el.on("pat-update.pat-validation", _this.onPatternUpdate.bind(_this));

              _this.$el.on("click.pat-validation", ".close-panel", function (ev) {
                if (!jquery_js_exposed_default()(ev.target).hasClass("validate-ignore")) {
                  this.validateForm(ev);
                }
              }.bind(_this));

            case 18:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  extend_validate: function extend_validate() {
    // Before using it we must add the parse and format functions
    // Here is a sample implementation using moment.js
    Validate.moment = Moment;
    Validate.extend(Validate.validators.datetime, {
      // The value is guaranteed not to be null or undefined but otherwise it
      // could be anything.
      parse: function parse(value) {
        return +Moment.utc(value);
      },
      // Input is a unix timestamp
      format: function format(value, options) {
        var format = options.dateOnly ? "YYYY-MM-DD" : "YYYY-MM-DD hh:mm:ss";
        return Moment.utc(value).format(format);
      }
    });
  },
  getFieldType: function getFieldType(input) {
    var opts = validation_parser.parse(jquery_js_exposed_default()(input));
    var type = input.getAttribute("type");

    if (index_all["default"].contains(["datetime", "date"], opts.type)) {
      type = opts.type;
    }

    if (type === "datetime-local") {
      type = "datetime";
    }

    return type;
  },
  setLocalDateConstraints: function setLocalDateConstraints(input, opts, constraints) {
    /* Set the relative date constraints, i.e. not-after and not-before, as well as custom messages.
     */
    var name = input.getAttribute("name").replace(/\./g, "\\.");
    var type = this.getFieldType(input);
    var c = constraints[name][type];

    if (!c || typeof opts == "undefined") {
      return constraints;
    }

    index_all["default"].each(["before", "after"], function (relation) {
      var relative = opts.not ? opts.not[relation] : undefined;
      var $ref;

      if (typeof relative === "undefined") {
        return;
      }

      var relative_constraint = relation === "before" ? "earliest" : "latest";

      if (Validate.moment.isDate(relative)) {
        c[relative_constraint] = relative;
      } else {
        try {
          $ref = jquery_js_exposed_default()(relative);
        } catch (e) {
          console.log(e);
        }

        var arr = $ref.data("pat-validation-refs") || [];

        if (!index_all["default"].contains(arr, input)) {
          arr.unshift(input);
          $ref.data("pat-validation-refs", arr);
        }

        if ($ref && $ref.val()) {
          // relative constraint validation
          c[relative_constraint] = $ref.val();
        }
      }
    });

    return constraints;
  },
  setLocalConstraints: function setLocalConstraints(input, constraints) {
    /* Some form fields might have their own data-pat-validation
     * attribute, used to set field-specific constraints.
     *
     * We parse them and add them to the passed in constraints obj.
     */
    var name = input.getAttribute("name").replace(/\./g, "\\."),
        type = this.getFieldType(input),
        opts = validation_parser.parse(jquery_js_exposed_default()(input)),
        constraint = constraints[name];

    if (index_all["default"].contains(["datetime", "date"], type)) {
      constraints = this.setLocalDateConstraints(input, opts, constraints);
    } else if (type == "number") {
      index_all["default"].each(["min", "max"], function (limit) {
        // TODO: need to figure out how to add local validation
        // messages for numericality operators
        if (input.getAttribute(limit)) {
          var constraint = constraints[name],
              key = limit == "min" ? "greaterThanOrEqualTo" : "lessThanOrEqualTo",
              value = Number(input.getAttribute(limit));

          if (typeof constraint.numericality === "boolean") {
            constraint.numericality = {};
          }

          constraint.numericality[key] = value;
        }
      });

      if (opts.type == "integer") {
        if (typeof constraint.numericality === "boolean") {
          constraint.numericality = {};
        }

        constraint.numericality.onlyInteger = true;
      }
    } // Handle fields equality


    if (opts.equality) {
      this.$el.find("[name=" + opts.equality + "]").each(function (idx, el) {
        if (input.value !== el.value) {
          constraint.equality = {
            attribute: opts.equality,
            message: "^" + opts.message["equality"]
          };
        }
      });
    } // Set local validation messages.


    index_all["default"].each(Object.keys(VALIDATION_TYPE_MAP), function (type) {
      var c = constraints[name][VALIDATION_TYPE_MAP[type]];

      if (c === false) {
        c = {
          message: "^" + opts.message[type]
        };
      } else {
        c.message = "^" + opts.message[type];
      }
    });

    return constraints;
  },
  getConstraints: function getConstraints(input) {
    // Get validation constraints by parsing the input element for hints
    var name = input.getAttribute("name"),
        type = this.getFieldType(input),
        constraints = {};

    if (!name) {
      return;
    }

    constraints[name.replace(/\./g, "\\.")] = {
      presence: input.hasAttribute("required") ? {
        message: "^" + this.options.message.required,
        allowEmpty: false
      } : false,
      email: type === "email" ? {
        message: "^" + this.options.message.email
      } : false,
      numericality: type === "number" ? true : false,
      datetime: type === "datetime" && this.doDateCheck(input) ? {
        message: "^" + this.options.message.datetime
      } : false,
      date: type === "date" && this.doDateCheck(input) ? {
        message: "^" + this.options.message.date
      } : false
    };
    constraints = this.setLocalConstraints(input, constraints);
    return constraints;
  },
  doDateCheck: function doDateCheck(input) {
    // Returns true if a date check should be done.
    // Don't check if there is no input - this should be handled by
    // the ``required`` attribute.
    // In case of HTML5 date/datetime-local support we also have to
    // check for ``badInput`` as invalid date input will result in an
    // empty ``value``.
    var type = input.getAttribute("type"); // we need the raw type here

    if (utils["a" /* default */].checkInputSupport("date", "wrong value") && type.indexOf("date") === 0 && typeof input.validity.badInput !== "undefined") {
      // Do the date check if the input is invalid or not missing
      // (actually double-checking here - HTML5 and validate.js).
      return input.validity.badInput || !!input.value;
    } else {
      // Do the date check if input is not empty (Safari has yet no
      // date support at all)
      return !!input.value;
    }
  },
  getValueDict: function getValueDict(input) {
    /* Return a dict {name: value} derived from a DOM input element.
     * Used by validate.js's validate method.
     */
    var value_dict = {};
    var name = input.getAttribute("name");
    var value = input.value;

    if (input.getAttribute("type") == "number") {
      if (value !== "") {
        try {
          value = Number(input.value);
        } catch (e) {
          value = input.value;
        }
      } else {
        value = null;
      }
    }

    value_dict[name] = value;
    return value_dict;
  },
  validateForm: function validateForm(ev) {
    /* Handler which gets called when the entire form needs to be
     * validated. Will prevent the event's default action if validation fails.
     */
    var has_errors = false; // Ignore invisible elements (otherwise pat-clone template
    // elements get validated). Not aware of other cases where this
    // might cause problems.

    var $single = this.$inputs.filter(":visible:enabled:not(:checkbox):not(:radio), .pat-autosuggest:not(:visible)");
    var group_names = this.$inputs.filter(":enabled:checkbox, :enabled:radio").map(function () {
      return this.getAttribute("name");
    });

    var handleError = function handleError(error) {
      if (typeof error != "undefined") {
        if (!has_errors && ev) {
          ev.preventDefault();
          ev.stopPropagation();
          ev.stopImmediatePropagation();
        }

        has_errors = true;
      }
    }; // We use for loops, to keep things synchronous, otherwise other
    // pattern's event handlers (like pat-inject) start getting called,
    // which we need to avoid.


    var _iterator = _createForOfIteratorHelper($single),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var single = _step.value;
        handleError(this.validateElement(single));
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    var _iterator2 = _createForOfIteratorHelper(group_names),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var group_name = _step2.value;
        handleError(this.validateGroupedElement(group_name));
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  },
  customizeMessage: function customizeMessage(msg, input) {
    /* Due to a limitation in validate.js, whereby we cannot have more
     * fine-grained error messages for sub-validations (e.g. is a
     * number and is bigger than 5), we need to customize the messages
     * after validation. We do that here.
     */
    var opts = validation_parser.parse(jquery_js_exposed_default()(input));

    if (msg.indexOf("must be greater than or equal to") != -1) {
      return Validate.format(opts.message.min, {
        count: input.getAttribute("min")
      });
    } else if (msg.indexOf("must be less than or equal to") != -1) {
      return Validate.format(opts.message.max, {
        count: input.getAttribute("max")
      });
    } else if (msg.indexOf("is not a number") != -1) {
      return opts.message.number;
    } else if (msg.indexOf("must be an integer") != -1) {
      return opts.message.integer;
    }

    return msg;
  },
  validateGroupedElement: function validateGroupedElement(name) {
    /* Handler which gets called for :checkbox and :radio elments. */
    var input = this.$el.find('[name="' + name + '"]')[0];
    var error = Validate(index_all["default"].pick(Validate.collectFormValues(this.$el), name), this.getConstraints(input));

    if (!error) {
      this.removeError(input);
    } else {
      index_all["default"].each(error[name.replace(/\./g, "\\.")], function (msg) {
        this.showError(this.customizeMessage(msg, input), input);
      }.bind(this));
    }

    return error;
  },
  validateElement: function validateElement(input, no_recurse) {
    /* Handler which gets called when a single form input element
     * needs to be validated. Will prevent the event's default action
     * if validation fails.
     */
    if (input.disabled) {
      return;
    }

    var error = Validate(this.getValueDict(input), this.getConstraints(input));

    if (!error) {
      this.removeError(input);
    } else {
      var name = input.getAttribute("name").replace(/\./g, "\\.");

      index_all["default"].each(error[name], function (msg) {
        this.showError(this.customizeMessage(msg, input), input);
      }.bind(this));
    }

    if (!no_recurse) {
      index_all["default"].each(jquery_js_exposed_default()(input).data("pat-validation-refs") || [], index_all["default"].partial(this.validateElement.bind(this), index_all["default"], true));
    }

    return error;
  },
  onPatternUpdate: function onPatternUpdate(ev, data) {
    /* Handler which gets called when pat-update is triggered within
     * the .pat-validation element.
     *
     * Currently we handle the case where new content appears in the
     * form. In that case we need to remove and then reassign event
     * handlers.
     */
    if (data.pattern == "clone" || data.pattern == "inject") {
      this.$inputs.off("change.pat-validation");
      this.$el.off("submit.pat-validation");
      this.$el.off("pat-update.pat-validation");
      this.init();

      if (data.pattern == "clone" && data.action == "remove") {
        this.validateForm(ev);
      }
    }

    return true;
  },
  findErrorMessages: function findErrorMessages(el) {
    var $el = jquery_js_exposed_default()(el),
        selector = "em.validation.message",
        $messages = $el.next(selector);

    if ($el.is("[type=radio],[type=checkbox]")) {
      var $fieldset = $el.closest("fieldset.pat-checklist");
      if ($fieldset.length) $messages = $fieldset.find(selector);
    }

    return $messages;
  },
  removeError: function removeError(input) {
    var $errors = this.findErrorMessages(input);
    this.errors = this.errors - $errors.length;
    $errors.remove();
    utils["a" /* default */].findRelatives(input).removeClass("is-invalid").addClass("is-valid");

    if (this.errors < 1 && this.options.disableSelector) {
      jquery_js_exposed_default()(this.options.disableSelector).prop("disabled", false).removeClass("disabled");
    }
  },
  showError: function showError(error, input) {
    var $el = jquery_js_exposed_default()(input),
        $relatives = utils["a" /* default */].findRelatives(input),
        $position = $el,
        strategy = "after",
        $message = jquery_js_exposed_default()("<em/>", {
      class: "validation warning message"
    }),
        $fieldset;

    if ($el.is("[type=radio],[type=checkbox]")) {
      $fieldset = $el.closest("fieldset.pat-checklist");

      if ($fieldset.length) {
        $position = $fieldset;
        strategy = "append";
      }
    }

    this.removeError(input);
    $message.text(error);

    switch (strategy) {
      case "append":
        $message.appendTo($position);
        break;

      case "after":
        $message.insertAfter($position);
        break;
    }

    $relatives.removeClass("is-valid").addClass("is-invalid");
    this.errors += 1;

    if (this.options.disableSelector) {
      jquery_js_exposed_default()(this.options.disableSelector).prop("disabled", true).addClass("disabled");
    }

    $position.trigger("pat-update", {
      pattern: "validation"
    });
  }
}));
// EXTERNAL MODULE: ./node_modules/patternslib/src/pat/tooltip/tooltip.js
var tooltip = __webpack_require__(111);

// CONCATENATED MODULE: ./node_modules/pat-code-editor/node_modules/patternslib/src/core/dom.js
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || dom_unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function dom_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return dom_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return dom_arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return dom_arrayLikeToArray(arr); }

function dom_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* Utilities for DOM traversal or navigation */
var DATA_STYLE_DISPLAY = "__patternslib__style__display";

var toNodeArray = function toNodeArray(nodes) {
  // Return an array of DOM nodes
  if (nodes.jquery || nodes instanceof NodeList) {
    // jQuery or document.querySelectorAll
    nodes = _toConsumableArray(nodes);
  } else if (nodes instanceof Array === false) {
    nodes = [nodes];
  }

  return nodes;
};

var querySelectorAllAndMe = function querySelectorAllAndMe(el, selector) {
  // Like querySelectorAll but including the element where it starts from.
  // Returns an Array, not a NodeList
  var all = _toConsumableArray(el.querySelectorAll(selector));

  if (el.matches(selector)) {
    all.unshift(el); // start element should be first.
  }

  return all;
};

var wrap = function wrap(el, wrapper) {
  // Wrap a element with a wrapper element.
  // See: https://stackoverflow.com/a/13169465/1337474
  el.parentNode.insertBefore(wrapper, el);
  wrapper.appendChild(el);
};

var dom_hide = function hide(el) {
  // Hides the element with ``display: none``
  if (el.style.display === "none") {
    // Nothing to do.
    return;
  }

  if (el.style.display) {
    el[DATA_STYLE_DISPLAY] = el.style.display;
  }

  el.style.display = "none";
};

var show = function show(el) {
  // Shows element by removing ``display: none`` and restoring the display
  // value to whatever it was before.
  var val = el[DATA_STYLE_DISPLAY] || null;
  el.style.display = val;
  delete el[DATA_STYLE_DISPLAY];
};

var find_parents = function find_parents(el, selector) {
  var _el$parentNode;

  // Return all direct parents of ``el`` matching ``selector``.
  // This matches against all parents but not the element itself.
  // The order of elements is from the search starting point up to higher
  // DOM levels.
  var parent = (el === null || el === void 0 ? void 0 : (_el$parentNode = el.parentNode) === null || _el$parentNode === void 0 ? void 0 : _el$parentNode.closest) && el.parentNode.closest(selector) || null;
  var ret = [];

  while (parent) {
    var _parent$parentNode;

    ret.push(parent);
    parent = ((_parent$parentNode = parent.parentNode) === null || _parent$parentNode === void 0 ? void 0 : _parent$parentNode.closest(selector)) || null;
  }

  return ret;
};

var find_scoped = function find_scoped(el, selector) {
  // If the selector starts with an object id do a global search,
  // otherwise do a local search.
  return (selector.indexOf("#") === 0 ? document : el).querySelectorAll(selector);
};

var is_visible = function is_visible(el) {
  // Check, if element is visible in DOM.
  // https://stackoverflow.com/a/19808107/1337474
  return el.offsetWidth > 0 && el.offsetHeight > 0;
};

var create_from_string = function create_from_string(string) {
  // Create a DOM element from a string.
  var div = document.createElement("div");
  div.innerHTML = string.trim();
  return div.firstChild;
};

var dom_dom = {
  toNodeArray: toNodeArray,
  querySelectorAllAndMe: querySelectorAllAndMe,
  wrap: wrap,
  hide: dom_hide,
  show: show,
  find_parents: find_parents,
  find_scoped: find_scoped,
  is_visible: is_visible,
  create_from_string: create_from_string
};
/* harmony default export */ var core_dom = (dom_dom);
// CONCATENATED MODULE: ./node_modules/pat-code-editor/node_modules/patternslib/src/core/logging.js
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Patterns logging - minimal logging framework
 *
 * Copyright 2012 Simplon B.V.
 */
// source: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind
if (!Function.prototype.bind) {
  Function.prototype.bind = function (oThis) {
    if (typeof this !== "function") {
      // closest thing possible to the ECMAScript 5 internal IsCallable function
      throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
    }

    var aArgs = Array.prototype.slice.call(arguments, 1),
        fToBind = this,
        fNOP = function fNOP() {},
        fBound = function fBound() {
      return fToBind.apply(this instanceof fNOP && oThis ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
    };

    fNOP.prototype = this.prototype;
    fBound.prototype = new fNOP();
    return fBound;
  };
}

var root, // root logger instance
writer; // writer instance, used to output log entries

var Level = {
  DEBUG: 10,
  INFO: 20,
  WARN: 30,
  ERROR: 40,
  FATAL: 50
};

function IEConsoleWriter() {}

IEConsoleWriter.prototype = {
  output: function output(log_name, level, messages) {
    // console.log will magically appear in IE8 when the user opens the
    // F12 Developer Tools, so we have to test for it every time.
    if (typeof window.console === "undefined" || typeof console.log === "undefined") return;
    if (log_name) messages.unshift(log_name + ":");
    var message = messages.join(" "); // Under some conditions console.log will be available but the
    // other functions are missing.

    if (_typeof(console.info) === undefined) {
      var level_name;
      if (level <= Level.DEBUG) level_name = "DEBUG";else if (level <= Level.INFO) level_name = "INFO";else if (level <= Level.WARN) level_name = "WARN";else if (level <= Level.ERROR) level_name = "ERROR";else level_name = "FATAL";
      console.log("[" + level_name + "] " + message);
    } else {
      if (level <= Level.DEBUG) {
        // console.debug exists but is deprecated
        message = "[DEBUG] " + message;
        console.log(message);
      } else if (level <= Level.INFO) console.info(message);else if (level <= Level.WARN) console.warn(message);else console.error(message);
    }
  }
};

function ConsoleWriter() {}

ConsoleWriter.prototype = {
  output: function output(log_name, level, messages) {
    if (log_name) messages.unshift(log_name + ":");

    if (level <= Level.DEBUG) {
      // console.debug exists but is deprecated
      messages.unshift("[DEBUG]");
      console.log.apply(console, messages);
    } else if (level <= Level.INFO) console.info.apply(console, messages);else if (level <= Level.WARN) console.warn.apply(console, messages);else console.error.apply(console, messages);
  }
};

function Logger(name, parent) {
  this._loggers = {};
  this.name = name || "";
  this._parent = parent || null;

  if (!parent) {
    this._enabled = true;
    this._level = Level.WARN;
  }
}

Logger.prototype = {
  getLogger: function getLogger(name) {
    var path = name.split("."),
        root = this,
        route = this.name ? [this.name] : [];

    while (path.length) {
      var entry = path.shift();
      route.push(entry);
      if (!(entry in root._loggers)) root._loggers[entry] = new Logger(route.join("."), root);
      root = root._loggers[entry];
    }

    return root;
  },
  _getFlag: function _getFlag(flag) {
    var context = this;
    flag = "_" + flag;

    while (context !== null) {
      if (context[flag] !== undefined) return context[flag];
      context = context._parent;
    }

    return null;
  },
  setEnabled: function setEnabled(state) {
    this._enabled = !!state;
  },
  isEnabled: function isEnabled() {
    this._getFlag("enabled");
  },
  setLevel: function setLevel(level) {
    if (typeof level === "number") this._level = level;else if (typeof level === "string") {
      level = level.toUpperCase();
      if (level in Level) this._level = Level[level];
    }
  },
  getLevel: function getLevel() {
    return this._getFlag("level");
  },
  log: function log(level, messages) {
    if (!messages.length || !this._getFlag("enabled") || level < this._getFlag("level")) return;
    messages = Array.prototype.slice.call(messages);
    writer.output(this.name, level, messages);
  },
  debug: function debug() {
    this.log(Level.DEBUG, arguments);
  },
  info: function info() {
    this.log(Level.INFO, arguments);
  },
  warn: function warn() {
    this.log(Level.WARN, arguments);
  },
  error: function error() {
    this.log(Level.ERROR, arguments);
  },
  fatal: function fatal() {
    this.log(Level.FATAL, arguments);
  }
};

function getWriter() {
  return writer;
}

function setWriter(w) {
  writer = w;
}

if (!window.console || !window.console.log || typeof window.console.log.apply !== "function") {
  setWriter(new IEConsoleWriter());
} else {
  setWriter(new ConsoleWriter());
}

root = new Logger();
var logconfig = /loglevel(|-[^=]+)=([^&]+)/g,
    match;

while ((match = logconfig.exec(window.location.search)) !== null) {
  var logger = match[1] === "" ? root : root.getLogger(match[1].slice(1));
  logger.setLevel(match[2].toUpperCase());
}

var api = {
  Level: Level,
  getLogger: root.getLogger.bind(root),
  setEnabled: root.setEnabled.bind(root),
  isEnabled: root.isEnabled.bind(root),
  setLevel: root.setLevel.bind(root),
  getLevel: root.getLevel.bind(root),
  debug: root.debug.bind(root),
  info: root.info.bind(root),
  warn: root.warn.bind(root),
  error: root.error.bind(root),
  fatal: root.fatal.bind(root),
  getWriter: getWriter,
  setWriter: setWriter
};
/* harmony default export */ var logging = (api);
// CONCATENATED MODULE: ./node_modules/pat-code-editor/node_modules/patternslib/src/core/utils.js
function utils_createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = utils_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function utils_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return utils_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return utils_arrayLikeToArray(o, minLen); }

function utils_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function utils_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { utils_typeof = function _typeof(obj) { return typeof obj; }; } else { utils_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return utils_typeof(obj); }





jquery_js_exposed_default.a.fn.safeClone = function () {
  var $clone = this.clone(); // IE BUG : Placeholder text becomes actual value after deep clone on textarea
  // https://connect.microsoft.com/IE/feedback/details/781612/placeholder-text-becomes-actual-value-after-deep-clone-on-textarea

  if (window.document.documentMode) {
    $clone.findInclusive(":input[placeholder]").each(function (i, item) {
      var $item = jquery_js_exposed_default()(item);

      if ($item.attr("placeholder") === $item.val()) {
        $item.val("");
      }
    });
  }

  return $clone;
}; // Production steps of ECMA-262, Edition 5, 15.4.4.18
// Reference: http://es5.github.io/#x15.4.4.18


if (!Array.prototype.forEach) {
  Array.prototype.forEach = function (callback, thisArg) {
    var T, k;

    if (this === null) {
      throw new TypeError(" this is null or not defined");
    } // 1. Let O be the result of calling ToObject passing the |this| value as the argument.


    var O = Object(this); // 2. Let lenValue be the result of calling the Get internal method of O with the argument "length".
    // 3. Let len be ToUint32(lenValue).

    var len = O.length >>> 0; // 4. If IsCallable(callback) is false, throw a TypeError exception.
    // See: http://es5.github.com/#x9.11

    if (typeof callback !== "function") {
      throw new TypeError(callback + " is not a function");
    } // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.


    if (arguments.length > 1) {
      T = thisArg;
    } // 6. Let k be 0


    k = 0; // 7. Repeat, while k < len

    while (k < len) {
      var kValue; // a. Let Pk be ToString(k).
      //   This is implicit for LHS operands of the in operator
      // b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.
      //   This step can be combined with c
      // c. If kPresent is true, then

      if (k in O) {
        // i. Let kValue be the result of calling the Get internal method of O with argument Pk.
        kValue = O[k]; // ii. Call the Call internal method of callback with T as the this value and
        // argument list containing kValue, k, and O.

        callback.call(T, kValue, k, O);
      } // d. Increase k by 1.


      k++;
    } // 8. return undefined

  };
}

var utils_singleBoundJQueryPlugin = function singleBoundJQueryPlugin(pattern, method, options) {
  /* This is a jQuery plugin for patterns which are invoked ONCE FOR EACH
   * matched element in the DOM.
   *
   * This is how the Mockup-type patterns behave. They are constructor
   * functions which need to be invoked once per jQuery-wrapped DOM node
   * for all DOM nodes on which the pattern applies.
   */
  var $this = this;
  $this.each(function () {
    var pat,
        $el = jquery_js_exposed_default()(this);
    pat = pattern.init($el, options);

    if (method) {
      if (pat[method] === undefined) {
        jquery_js_exposed_default.a.error("Method " + method + " does not exist on jQuery." + pattern.name);
        return false;
      }

      if (method.charAt(0) === "_") {
        jquery_js_exposed_default.a.error("Method " + method + " is private on jQuery." + pattern.name);
        return false;
      }

      pat[method].apply(pat, [options]);
    }
  });
  return $this;
};

var utils_pluralBoundJQueryPlugin = function pluralBoundJQueryPlugin(pattern, method, options) {
  /* This is a jQuery plugin for patterns which are invoked ONCE FOR ALL
   * matched elements in the DOM.
   *
   * This is how the vanilla Patternslib-type patterns behave. They are
   * simple objects with an init method and this method gets called once
   * with a list of jQuery-wrapped DOM nodes on which the pattern
   * applies.
   */
  var $this = this;

  if (method) {
    if (pattern[method]) {
      return pattern[method].apply($this, [$this].concat([options]));
    } else {
      jquery_js_exposed_default.a.error("Method " + method + " does not exist on jQuery." + pattern.name);
    }
  } else {
    pattern.init.apply($this, [$this].concat([options]));
  }

  return $this;
};

var jqueryPlugin = function jqueryPlugin(pattern) {
  return function (method, options) {
    var $this = this;

    if ($this.length === 0) {
      return $this;
    }

    if (utils_typeof(method) === "object") {
      options = method;
      method = undefined;
    }

    if (typeof pattern === "function") {
      return utils_singleBoundJQueryPlugin.call(this, pattern, method, options);
    } else {
      return utils_pluralBoundJQueryPlugin.call(this, pattern, method, options);
    }
  };
}; // Is a given variable an object?


function isObject(obj) {
  var type = utils_typeof(obj);

  return type === "function" || type === "object" && !!obj;
} // Extend a given object with all the properties in passed-in object(s).


function extend(obj) {
  if (!isObject(obj)) return obj;
  var source, prop;

  for (var i = 1, length = arguments.length; i < length; i++) {
    source = arguments[i];

    for (prop in source) {
      if (hasOwnProperty.call(source, prop)) {
        obj[prop] = source[prop];
      }
    }
  }

  return obj;
} // END: Taken from Underscore.js until here.


function rebaseURL(base, url) {
  base = new URL(base, window.location).href; // If base is relative make it absolute.

  if (url.indexOf("://") !== -1 || url[0] === "/" || url.indexOf("data:") === 0) {
    return url;
  }

  return base.slice(0, base.lastIndexOf("/") + 1) + url;
}

function findLabel(input) {
  var $label;

  for (var label = input.parentNode; label && label.nodeType !== 11; label = label.parentNode) {
    if (label.tagName === "LABEL") {
      return label;
    }
  }

  if (input.id) {
    $label = jquery_js_exposed_default()('label[for="' + input.id + '"]');
  }

  if ($label && $label.length === 0 && input.form) {
    $label = jquery_js_exposed_default()('label[for="' + input.name + '"]', input.form);
  }

  if ($label && $label.length) {
    return $label[0];
  } else {
    return null;
  }
} // Taken from http://stackoverflow.com/questions/123999/how-to-tell-if-a-dom-element-is-visible-in-the-current-viewport


function elementInViewport(el) {
  var rect = el.getBoundingClientRect(),
      docEl = document.documentElement,
      vWidth = window.innerWidth || docEl.clientWidth,
      vHeight = window.innerHeight || docEl.clientHeight;
  if (rect.right < 0 || rect.bottom < 0 || rect.left > vWidth || rect.top > vHeight) return false;
  return true;
} // Taken from http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex


function escapeRegExp(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}

function removeWildcardClass($targets, classes) {
  if (classes.indexOf("*") === -1) $targets.removeClass(classes);else {
    var matcher = classes.replace(/[\-\[\]{}()+?.,\\\^$|#\s]/g, "\\$&");
    matcher = matcher.replace(/[*]/g, ".*");
    matcher = new RegExp("^" + matcher + "$");
    $targets.filter("[class]").each(function () {
      var $this = jquery_js_exposed_default()(this),
          classes = $this.attr("class").split(/\s+/),
          ok = [];

      for (var i = 0; i < classes.length; i++) {
        if (!matcher.test(classes[i])) ok.push(classes[i]);
      }

      if (ok.length) $this.attr("class", ok.join(" "));else $this.removeAttr("class");
    });
  }
}

function hasValue(el) {
  if (el.tagName === "INPUT") {
    if (el.type === "checkbox" || el.type === "radio") {
      return el.checked;
    }

    return el.value !== "";
  }

  if (el.tagName === "SELECT") {
    return el.selectedIndex !== -1;
  }

  if (el.tagName === "TEXTAREA") {
    return el.value !== "";
  }

  return false;
}

var utils_hideOrShow = function hideOrShow(nodes, visible, options, pattern_name) {
  nodes = core_dom.toNodeArray(nodes);
  var transitions = {
    none: {
      hide: "hide",
      show: "show"
    },
    fade: {
      hide: "fadeOut",
      show: "fadeIn"
    },
    slide: {
      hide: "slideUp",
      show: "slideDown"
    }
  };
  var duration = options.transition === "css" || options.transition === "none" ? null : options.effect.duration;

  var on_complete = function on_complete(el) {
    el.classList.remove("in-progress");
    el.classList.add(visible ? "visible" : "hidden");
    jquery_js_exposed_default()(el).trigger("pat-update", {
      pattern: pattern_name,
      transition: "complete"
    });
  };

  var _iterator = utils_createForOfIteratorHelper(nodes),
      _step;

  try {
    var _loop = function _loop() {
      var el = _step.value;
      el.classList.remove("visible");
      el.classList.remove("hidden");
      el.classList.remove("in-progress");

      if (duration) {
        var t = transitions[options.transition];
        el.classList.add("in-progress");
        jquery_js_exposed_default()(el).trigger("pat-update", {
          pattern: pattern_name,
          transition: "start"
        });
        jquery_js_exposed_default()(el)[visible ? t.show : t.hide]({
          duration: duration,
          easing: options.effect.easing,
          complete: function complete() {
            return on_complete(el);
          }
        });
      } else {
        if (options.transition !== "css") {
          core_dom[visible ? "show" : "hide"](el);
        }

        on_complete(el);
      }
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
};

function addURLQueryParameter(fullURL, param, value) {
  /* Using a positive lookahead (?=\=) to find the given parameter,
   * preceded by a ? or &, and followed by a = with a value after
   * than (using a non-greedy selector) and then followed by
   * a & or the end of the string.
   *
   * Taken from http://stackoverflow.com/questions/7640270/adding-modify-query-string-get-variables-in-a-url-with-javascript
   */
  var val = new RegExp("(\\?|\\&)" + param + "=.*?(?=(&|$))"),
      parts = fullURL.toString().split("#"),
      url = parts[0],
      hash = parts[1],
      qstring = /\?.+$/,
      newURL = url; // Check if the parameter exists

  if (val.test(url)) {
    // if it does, replace it, using the captured group
    // to determine & or ? at the beginning
    newURL = url.replace(val, "$1" + param + "=" + value);
  } else if (qstring.test(url)) {
    // otherwise, if there is a query string at all
    // add the param to the end of it
    newURL = url + "&" + param + "=" + value;
  } else {
    // if there's no query string, add one
    newURL = url + "?" + param + "=" + value;
  }

  if (hash) {
    newURL += "#" + hash;
  }

  return newURL;
}

function removeDuplicateObjects(objs) {
  /* Given an array of objects, remove any duplicate objects which might
   * be present.
   */
  var comparator = function comparator(v, k) {
    return this[k] === v;
  };

  return index_all["default"].reduce(objs, function (list, next_obj) {
    var is_duplicate = false;

    index_all["default"].each(list, function (obj) {
      is_duplicate = index_all["default"].keys(obj).length === index_all["default"].keys(next_obj).length && !index_all["default"].chain(obj).omit(comparator.bind(next_obj)).keys().value().length;
    });

    if (!is_duplicate) {
      list.push(next_obj);
    }

    return list;
  }, []);
}

function mergeStack(stack, length) {
  /* Given a list of lists of objects (which for brevity we call a stack),
   * return a list of objects where each object is the merge of all the
   * corresponding original objects at that particular index.
   *
   * If a certain sub-list doesn't have an object at that particular
   * index, the last object in that list is merged.
   */
  var results = [];

  for (var i = 0; i < length; i++) {
    results.push({});
  }

  index_all["default"].each(stack, function (frame) {
    var frame_length = frame.length - 1;

    for (var x = 0; x < length; x++) {
      results[x] = jquery_js_exposed_default.a.extend(results[x] || {}, frame[x > frame_length ? frame_length : x]);
    }
  });

  return results;
}

function isElementInViewport(el, partial, offset) {
  /* returns true if element is visible to the user ie. is in the viewport.
   * Setting partial parameter to true, will only check if a part of the element is visible
   * in the viewport, specifically that some part of that element is touching the top part
   * of the viewport. This only applies to the vertical direction, ie. doesnt check partial
   * visibility for horizontal scrolling
   * some code taken from:
   * http://stackoverflow.com/questions/123999/how-to-tell-if-a-dom-element-is-visible-in-the-current-viewport/7557433#7557433
   */
  if (el === []) {
    return false;
  }

  if (el instanceof jquery_js_exposed_default.a) {
    el = el[0];
  }

  var rec = el.getBoundingClientRect(),
      rec_values = [rec.top, rec.bottom, rec.left, rec.right];

  if (index_all["default"].every(rec_values, function zero(v) {
    if (v === 0) {
      return true;
    }
  })) {
    // if every property of rec is 0, the element is invisible;
    return false;
  } else if (partial) {
    // when using getBoundingClientRect() (in the vertical case)
    // negative means above top of viewport, positive means below top of viewport
    // therefore for part of the element to be touching or crossing the top of the viewport
    // rec.top must <= 0 and rec.bottom must >= 0
    // an optional tolerance offset can be added for when the desired element is not exactly
    // toucing the top of the viewport but needs to be considered as touching.
    if (offset === undefined) {
      offset = 0;
    }

    return rec.top <= 0 + offset && rec.bottom >= 0 + offset //(rec.top >= 0+offset && rec.top <= window.innerHeight) // this checks if the element
    // touches bottom part of viewport
    // XXX do we want to include a check for the padding of an element?
    // using window.getComputedStyle(target).paddingTop
    ;
  } else {
    // this will return true if the entire element is completely in the viewport
    return rec.top >= 0 && rec.left >= 0 && rec.bottom <= (window.innerHeight || document.documentElement.clientHeight)
    /*or $(window).height() */
    && rec.right <= (window.innerWidth || document.documentElement.clientWidth)
    /*or $(window).width() */
    ;
  }
}

function parseTime(time) {
  var m = /^(\d+(?:\.\d+)?)\s*(\w*)/.exec(time);

  if (!m) {
    throw new Error("Invalid time");
  }

  var amount = parseFloat(m[1]);

  switch (m[2]) {
    case "s":
      return Math.round(amount * 1000);

    case "m":
      return Math.round(amount * 1000 * 60);

    case "ms":
    default:
      return Math.round(amount);
  }
} // Return a jQuery object with elements related to an input element.


function findRelatives(el) {
  var $el = jquery_js_exposed_default()(el),
      $relatives = jquery_js_exposed_default()(el),
      $label = jquery_js_exposed_default()();
  $relatives = $relatives.add($el.closest("label"));
  $relatives = $relatives.add($el.closest("fieldset"));
  if (el.id) $label = jquery_js_exposed_default()("label[for='" + el.id + "']");

  if (!$label.length) {
    var $form = $el.closest("form");
    if (!$form.length) $form = jquery_js_exposed_default()(document.body);
    $label = $form.find("label[for='" + el.name + "']");
  }

  $relatives = $relatives.add($label);
  return $relatives;
}

function getCSSValue(el, property, asPixels) {
  /* Return a CSS property value for a given DOM node.
   * For length-values, relative values are converted to pixels.
   * Optionally parse as pixels, if applicable.
   */
  var value = window.getComputedStyle(el).getPropertyValue(property);

  if (asPixels) {
    value = parseFloat(value) || 0.0;
  }

  return value;
}

function checkInputSupport(type, invalid_value) {
  /* Check input type support.
   *  See: https://stackoverflow.com/a/10199306/1337474
   */
  var support = false;
  var input = document.createElement("input");
  input.setAttribute("type", type);
  support = input.type == type;

  if (invalid_value !== undefined) {
    // Check for input type UI support
    input.setAttribute("value", invalid_value);
    support = input.value !== invalid_value;
  }

  return support;
}

var checkCSSFeature = function checkCSSFeature(attribute, value) {
  var tag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "div";

  /* Check for browser support of specific CSS feature.
   */
  tag = document.createElement(tag);
  var supported = tag.style[attribute] !== undefined;

  if (supported && value !== undefined) {
    tag.style[attribute] = value;
    supported = tag.style[attribute] === value;
  }

  return supported;
};

var utils_timeout = function timeout(ms) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, ms);
  });
};

var debounce = function debounce(func, ms) {
  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds.
  // From: https://underscorejs.org/#debounce
  var timer = null;
  return function () {
    var _this = this;

    clearTimeout(timer);
    var args = arguments;
    timer = setTimeout(function () {
      func.apply(_this, args);
    }, ms);
  };
};

var isIE = function isIE() {
  // See: https://stackoverflow.com/a/9851769/1337474
  // Internet Explorer 6-11
  return (
    /*@cc_on!@*/
     false || !!document.documentMode
  );
};

var jqToNode = function jqToNode(el) {
  // Return a DOM node if a jQuery node was passed.
  if (el.jquery) {
    el = el[0];
  }

  return el;
};

var utils_utils = {
  // pattern pimping - own module?
  jqueryPlugin: jqueryPlugin,
  escapeRegExp: escapeRegExp,
  isObject: isObject,
  extend: extend,
  rebaseURL: rebaseURL,
  findLabel: findLabel,
  elementInViewport: elementInViewport,
  removeWildcardClass: removeWildcardClass,
  hideOrShow: utils_hideOrShow,
  addURLQueryParameter: addURLQueryParameter,
  removeDuplicateObjects: removeDuplicateObjects,
  mergeStack: mergeStack,
  isElementInViewport: isElementInViewport,
  hasValue: hasValue,
  parseTime: parseTime,
  findRelatives: findRelatives,
  getCSSValue: getCSSValue,
  checkInputSupport: checkInputSupport,
  checkCSSFeature: checkCSSFeature,
  timeout: utils_timeout,
  debounce: debounce,
  isIE: isIE,
  jqToNode: jqToNode
};
/* harmony default export */ var core_utils = (utils_utils);
// CONCATENATED MODULE: ./node_modules/pat-code-editor/node_modules/patternslib/src/core/registry.js
function registry_createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = registry_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function registry_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return registry_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return registry_arrayLikeToArray(o, minLen); }

function registry_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Patterns registry - Central registry and scan logic for patterns
 *
 * Copyright 2012-2013 Simplon B.V.
 * Copyright 2012-2013 Florian Friesdorf
 * Copyright 2013 Marko Durkovic
 * Copyright 2013 Rok Garbas
 * Copyright 2014-2015 Syslab.com GmBH, JC Brand
 */

/*
 * changes to previous patterns.register/scan mechanism
 * - if you want initialised class, do it in init
 * - init returns set of elements actually initialised
 * - handle once within init
 * - no turnstile anymore
 * - set pattern.jquery_plugin if you want it
 */




var log = logging.getLogger("registry");
var disable_re = /patterns-disable=([^&]+)/g;
var dont_catch_re = /patterns-dont-catch/g;
var disabled = {};
var dont_catch = false;
var registry_match;

while ((registry_match = disable_re.exec(window.location.search)) !== null) {
  disabled[registry_match[1]] = true;
  log.info("Pattern disabled via url config:", registry_match[1]);
}

while ((registry_match = dont_catch_re.exec(window.location.search)) !== null) {
  dont_catch = true;
  log.info("I will not catch init exceptions");
}

var registry_registry = {
  patterns: {},
  // as long as the registry is not initialized, pattern
  // registration just registers a pattern. Once init is called,
  // the DOM is scanned. After that registering a new pattern
  // results in rescanning the DOM only for this pattern.
  initialized: false,
  init: function init() {
    jquery_js_exposed_default()(document).ready(function () {
      log.info("loaded: " + Object.keys(registry_registry.patterns).sort().join(", "));
      registry_registry.scan(document.body);
      registry_registry.initialized = true;
      log.info("finished initial scan.");
    });
  },
  clear: function clear() {
    // Removes all patterns from the registry. Currently only being
    // used in tests.
    this.patterns = {};
  },
  transformPattern: function transformPattern(name, content) {
    var _pattern$prototype;

    /* Call the transform method on the pattern with the given name, if
     * it exists.
     */
    if (disabled[name]) {
      log.debug("Skipping disabled pattern:", name);
      return;
    }

    var pattern = registry_registry.patterns[name];
    var transform = pattern.transform || ((_pattern$prototype = pattern.prototype) === null || _pattern$prototype === void 0 ? void 0 : _pattern$prototype.transform);

    if (transform) {
      try {
        transform(jquery_js_exposed_default()(content));
      } catch (e) {
        if (dont_catch) {
          throw e;
        }

        log.error("Transform error for pattern" + name, e);
      }
    }
  },
  initPattern: function initPattern(name, el, trigger) {
    /* Initialize the pattern with the provided name and in the context
     * of the passed in DOM element.
     */
    var $el = jquery_js_exposed_default()(el);
    var pattern = registry_registry.patterns[name];

    if (pattern.init) {
      var plog = logging.getLogger("pat." + name);

      if ($el.is(pattern.trigger)) {
        plog.debug("Initialising:", $el);

        try {
          pattern.init($el, null, trigger);
          plog.debug("done.");
        } catch (e) {
          if (dont_catch) {
            throw e;
          }

          plog.error("Caught error:", e);
        }
      }
    }
  },
  orderPatterns: function orderPatterns(patterns) {
    // XXX: Bit of a hack. We need the validation pattern to be
    // parsed and initiated before the inject pattern. So we make
    // sure here, that it appears first. Not sure what would be
    // the best solution. Perhaps some kind of way to register
    // patterns "before" or "after" other patterns.
    if (patterns.includes("validation") && patterns.includes("inject")) {
      patterns.splice(patterns.indexOf("validation"), 1);
      patterns.unshift("validation");
    }

    return patterns;
  },
  scan: function scan(content, patterns, trigger) {
    if (typeof content === "string") {
      content = document.querySelector(content);
    } else if (content.jquery) {
      content = content[0];
    }

    var selectors = [];
    patterns = this.orderPatterns(patterns || Object.keys(registry_registry.patterns));

    var _iterator = registry_createForOfIteratorHelper(patterns),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var name = _step.value;
        this.transformPattern(name, content);
        var pattern = registry_registry.patterns[name];

        if (pattern.trigger) {
          selectors.unshift(pattern.trigger);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    var matches = core_dom.querySelectorAllAndMe(content, selectors.map(function (it) {
      return it.trim().replace(/,$/, "");
    }).join(","));
    matches = matches.filter(function (el) {
      // Filter out code examples wrapped in <pre> elements.
      // Also filter special class ``.cant-touch-this``
      return core_dom.find_parents(el, "pre").length === 0 && !el.matches(".cant-touch-this");
    }); // walk list backwards and initialize patterns inside-out.

    var _iterator2 = registry_createForOfIteratorHelper(matches.reverse()),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var el = _step2.value;

        var _iterator3 = registry_createForOfIteratorHelper(patterns),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _name = _step3.value;
            this.initPattern(_name, el, trigger);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    document.body.classList.add("patterns-loaded");
  },
  register: function register(pattern, name) {
    name = name || pattern.name;

    if (!name) {
      log.error("Pattern lacks a name:", pattern);
      return false;
    }

    if (registry_registry.patterns[name]) {
      log.error("Already have a pattern called: " + name);
      return false;
    } // register pattern to be used for scanning new content


    registry_registry.patterns[name] = pattern; // register pattern as jquery plugin

    if (pattern.jquery_plugin) {
      var plugin_name = ("pat-" + name).replace(/-([a-zA-Z])/g, function (match, p1) {
        return p1.toUpperCase();
      });
      jquery_js_exposed_default.a.fn[plugin_name] = core_utils.jqueryPlugin(pattern); // BBB 2012-12-10 and also for Mockup patterns.

      jquery_js_exposed_default.a.fn[plugin_name.replace(/^pat/, "pattern")] = jquery_js_exposed_default.a.fn[plugin_name];
    }

    log.debug("Registered pattern:", name, pattern);

    if (registry_registry.initialized) {
      registry_registry.scan(document.body, [name]);
    }

    return true;
  }
};
/* harmony default export */ var core_registry = (registry_registry);
// CONCATENATED MODULE: ./node_modules/pat-code-editor/node_modules/patternslib/src/core/mockup-parser.js

var mockup_parser_parser = {
  getOptions: function getOptions($el, patternName, options) {
    /* This is the Mockup parser. An alternative parser for Patternslib
     * patterns.
     *
     * NOTE: Use of the Mockup parser is discouraged and is added here for
     * legacy support for the Plone Mockup project.
     *
     * It parses a DOM element for pattern configuration options.
     */
    options = options || {}; // get options from parent element first, stop if element tag name is 'body'

    if ($el.length !== 0 && !jquery_js_exposed_default.a.nodeName($el[0], "body")) {
      options = this.getOptions($el.parent(), patternName, options);
    } // collect all options from element


    var elOptions = {};

    if ($el.length !== 0) {
      elOptions = $el.data("pat-" + patternName);

      if (elOptions) {
        // parse options if string
        if (typeof elOptions === "string") {
          var tmpOptions = {};
          jquery_js_exposed_default.a.each(elOptions.split(";"), function (i, item) {
            item = item.split(":");
            item.reverse();
            var key = item.pop();
            key = key.replace(/^\s+|\s+$/g, ""); // trim

            item.reverse();
            var value = item.join(":");
            value = value.replace(/^\s+|\s+$/g, ""); // trim

            tmpOptions[key] = value;
          });
          elOptions = tmpOptions;
        }
      }
    }

    return jquery_js_exposed_default.a.extend(true, {}, options, elOptions);
  }
};
/* harmony default export */ var mockup_parser = (mockup_parser_parser);
// CONCATENATED MODULE: ./node_modules/pat-code-editor/node_modules/patternslib/src/core/base.js
/**
 * A Base pattern for creating scoped patterns. It's similar to Backbone's
 * Model class. The advantage of this approach is that each instance of a
 * pattern has its own local scope (closure).
 *
 * A new instance is created for each DOM element on which a pattern applies.
 *
 * You can assign values, such as $el, to `this` for an instance and they
 * will remain unique to that instance.
 *
 * Older Patternslib patterns on the other hand have a single global scope for
 * all DOM elements.
 */




var base_log = logging.getLogger("Patternslib Base");

var base_initBasePattern = function initBasePattern($el, options, trigger) {
  if (!$el.jquery) {
    $el = jquery_js_exposed_default()($el);
  }

  var name = this.prototype.name;
  var plog = logging.getLogger("pat.".concat(name));
  var pattern = $el.data("pattern-".concat(name));

  if (pattern === undefined && core_registry.patterns[name]) {
    try {
      options = this.prototype.parser === "mockup" ? mockup_parser.getOptions($el, name, options) : options;
      pattern = new core_registry.patterns[name]($el, options, trigger);
    } catch (e) {
      plog.error("Failed while initializing ".concat(name, " pattern."), e);
    }

    $el.data("pattern-".concat(name), pattern);
  }

  return pattern;
};

var base_Base = function Base($el, options, trigger) {
  if (!$el.jquery) {
    $el = jquery_js_exposed_default()($el);
  }

  this.$el = $el;
  this.el = $el[0];
  this.options = jquery_js_exposed_default.a.extend(true, {}, this.defaults || {}, options || {});
  this.init($el, options, trigger);
  this.emit("init");
};

base_Base.prototype = {
  constructor: base_Base,
  on: function on(eventName, eventCallback) {
    this.$el.on("".concat(eventName, ".").concat(this.name, ".patterns"), eventCallback);
  },
  emit: function emit(eventName, args) {
    // args should be a list
    if (args === undefined) {
      args = [];
    }

    this.$el.trigger("".concat(eventName, ".").concat(this.name, ".patterns"), args);
  }
};

base_Base.extend = function (patternProps) {
  /* Helper function to correctly set up the prototype chain for new patterns.
   */
  var parent = this;
  var child; // Check that the required configuration properties are given.

  if (!patternProps) {
    throw new Error("Pattern configuration properties required when calling Base.extend");
  } // The constructor function for the new subclass is either defined by you
  // (the "constructor" property in your `extend` definition), or defaulted
  // by us to simply call the parent's constructor.


  if (Object.hasOwnProperty.call(patternProps, "constructor")) {
    child = patternProps.constructor;
  } else {
    child = function child() {
      parent.apply(this, arguments);
    };
  } // Allow patterns to be extended indefinitely


  child.extend = base_Base.extend; // Static properties required by the Patternslib registry

  child.init = base_initBasePattern;
  child.jquery_plugin = true;
  child.trigger = patternProps.trigger;
  child.parser = (patternProps === null || patternProps === void 0 ? void 0 : patternProps.parser) || null; // Set the prototype chain to inherit from `parent`, without calling
  // `parent`'s constructor function.

  var Surrogate = function Surrogate() {
    this.constructor = child;
  };

  Surrogate.prototype = parent.prototype;
  child.prototype = new Surrogate(); // Add pattern's configuration properties (instance properties) to the subclass,

  jquery_js_exposed_default.a.extend(true, child.prototype, patternProps); // Set a convenience property in case the parent's prototype is needed
  // later.

  child.__super__ = parent.prototype; // Register the pattern in the Patternslib registry.

  if (!patternProps.name) {
    base_log.warn("This pattern without a name attribute will not be registered!");
  } else if (!patternProps.trigger) {
    base_log.warn("The pattern ".concat(patternProps.name, " does not have a trigger attribute, it will not be registered."));
  } else {
    core_registry.register(child, patternProps.name);
  }

  return child;
};

/* harmony default export */ var src_core_base = (base_Base);
// CONCATENATED MODULE: ./node_modules/pat-code-editor/node_modules/patternslib/src/core/parser.js
function _typeof2(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function parser_createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = parser_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function parser_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return parser_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return parser_arrayLikeToArray(o, minLen); }

function parser_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Patterns argument parser




var parser_ArgumentParser = /*#__PURE__*/function () {
  function ArgumentParser(name) {
    _classCallCheck(this, ArgumentParser);

    this.order = [];
    this.parameters = {};
    this.attribute = "data-pat-" + name;
    this.enum_values = {};
    this.enum_conflicts = [];
    this.groups = {};
    this.possible_groups = {};
    this.log = logging.getLogger(name + ".parser");
    this.group_pattern = /([a-z][a-z0-9]*)-([A-Z][a-z0-0\-]*)/i;
    this.json_param_pattern = /^\s*{/i;
    this.named_param_pattern = /^\s*([a-z][a-z0-9\-]*)\s*:(.*)/i;
    this.token_pattern = /((["']).*?(?!\\)\2)|\s*(\S+)\s*/g;
  }

  _createClass(ArgumentParser, [{
    key: "_camelCase",
    value: function _camelCase(str) {
      return str.replace(/\-([a-z])/g, function (__, p1) {
        return p1.toUpperCase();
      });
    }
  }, {
    key: "addAlias",
    value: function addAlias(alias, original) {
      /* Add an alias for a previously added parser argument.
       *
       * Useful when you want to support both US and UK english argument
       * names.
       */
      if (this.parameters[original]) {
        this.parameters[original].alias = alias;
      } else {
        throw 'Attempted to add an alias "' + alias + '" for a non-existing parser argument "' + original + '".';
      }
    }
  }, {
    key: "addGroupToSpec",
    value: function addGroupToSpec(spec) {
      /* Determine wether an argument being parsed can be grouped and
       * update its specifications object accordingly.
       *
       * Internal method used by addArgument and addJSONArgument
       */
      var m = spec.name.match(this.group_pattern);

      if (m) {
        var group = m[1];
        var field = m[2];

        if (group in this.possible_groups) {
          var first_spec = this.possible_groups[group];
          var first_name = first_spec.name.match(this.group_pattern)[2];
          first_spec.group = group;
          first_spec.dest = first_name;
          this.groups[group] = new ArgumentParser();
          this.groups[group].addArgument(first_name, first_spec.value, first_spec.choices, first_spec.multiple);
          delete this.possible_groups[group];
        }

        if (group in this.groups) {
          this.groups[group].addArgument(field, spec.value, spec.choices, spec.multiple);
          spec.group = group;
          spec.dest = field;
        } else {
          this.possible_groups[group] = spec;
          spec.dest = this._camelCase(spec.name);
        }
      }

      return spec;
    }
  }, {
    key: "addJSONArgument",
    value: function addJSONArgument(name, default_value) {
      /* Add an argument where the value is provided in JSON format.
       *
       * This is a different usecase than specifying all arguments to
       * the data-pat-... attributes in JSON format, and instead is part
       * of the normal notation except that a value is in JSON instead of
       * for example a string.
       */
      this.order.push(name);
      this.parameters[name] = this.addGroupToSpec({
        name: name,
        value: default_value,
        dest: name,
        group: null,
        type: "json"
      });
    }
  }, {
    key: "addArgument",
    value: function addArgument(name, default_value, choices, multiple) {
      var spec = {
        name: name,
        value: multiple && !Array.isArray(default_value) ? [default_value] : default_value,
        multiple: multiple,
        dest: name,
        group: null
      };

      if (choices && Array.isArray(choices) && choices.length) {
        spec.choices = choices;
        spec.type = this._typeof(choices[0]);

        var _iterator = parser_createForOfIteratorHelper(choices),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var choice = _step.value;

            if (this.enum_conflicts.indexOf(choice) !== -1) {
              continue;
            } else if (choice in this.enum_values) {
              this.enum_conflicts.push(choice);
              delete this.enum_values[choice];
            } else {
              this.enum_values[choice] = name;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } else if (typeof spec.value === "string" && spec.value.slice(0, 1) === "$") {
        spec.type = this.parameters[spec.value.slice(1)].type;
      } else {
        // Note that this will get reset by _defaults if default_value is a function.
        spec.type = this._typeof(multiple ? spec.value[0] : spec.value);
      }

      this.order.push(name);
      this.parameters[name] = this.addGroupToSpec(spec);
    }
  }, {
    key: "_typeof",
    value: function _typeof(obj) {
      if (obj === null) {
        return "null";
      }

      return _typeof2(obj);
    }
  }, {
    key: "_coerce",
    value: function _coerce(name, value) {
      var spec = this.parameters[name];
      if (_typeof2(value) !== spec.type) try {
        switch (spec.type) {
          case "json":
            value = JSON.parse(value);
            break;

          case "boolean":
            if (typeof value === "string") {
              value = value.toLowerCase();
              var num = parseInt(value, 10);
              if (!isNaN(num)) value = !!num;else value = value === "true" || value === "y" || value === "yes" || value === "y";
            } else if (typeof value === "number") {
              value = !!value;
            } else {
              throw "Cannot convert value for " + name + " to boolean";
            }

            break;

          case "number":
            if (typeof value === "string") {
              value = parseInt(value, 10);

              if (isNaN(value)) {
                throw "Cannot convert value for " + name + " to number";
              }
            } else if (typeof value === "boolean") {
              value = value + 0;
            } else {
              throw "Cannot convert value for " + name + " to number";
            }

            break;

          case "string":
            value = value.toString();
            break;

          case "null": // Missing default values

          case "undefined":
            break;

          default:
            throw "Do not know how to convert value for " + name + " to " + spec.type;
        }
      } catch (e) {
        this.log.warn(e);
        return null;
      }

      if (spec.choices && spec.choices.indexOf(value) === -1) {
        this.log.warn("Illegal value for " + name + ": " + value);
        return null;
      }

      return value;
    }
  }, {
    key: "_set",
    value: function _set(opts, name, value) {
      if (!(name in this.parameters)) {
        this.log.debug("Ignoring value for unknown argument " + name);
        return;
      }

      var spec = this.parameters[name];
      var parts;

      if (spec.multiple) {
        if (typeof value === "string") {
          parts = value.split(/,+/);
        } else {
          parts = value;
        }

        value = [];

        var _iterator2 = parser_createForOfIteratorHelper(parts),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var part = _step2.value;

            var v = this._coerce(name, part.trim());

            if (v !== null) {
              value.push(v);
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      } else {
        value = this._coerce(name, value);

        if (value === null) {
          return;
        }
      }

      opts[name] = value;
    }
  }, {
    key: "_split",
    value: function _split(text) {
      var tokens = [];
      text.replace(this.token_pattern, function (match, quoted, __, simple) {
        if (quoted) {
          tokens.push(quoted);
        } else if (simple) {
          tokens.push(simple);
        }
      });
      return tokens;
    }
  }, {
    key: "_parseExtendedNotation",
    value: function _parseExtendedNotation(argstring) {
      var _this = this;

      var opts = {};
      var parts = argstring.replace(/;;/g, "\0x1f").replace(/&amp;/g, "&amp\0x1f").split(/;/).map(function (el) {
        return el.replace(new RegExp("\0x1f", "g"), ";");
      });

      var _iterator3 = parser_createForOfIteratorHelper(parts),
          _step3;

      try {
        var _loop = function _loop() {
          var part = _step3.value;

          if (!part) {
            return "continue";
          }

          var matches = part.match(_this.named_param_pattern);

          if (!matches) {
            _this.log.warn("Invalid parameter: " + part + ": " + argstring);

            return "continue";
          }

          var name = matches[1];
          var value = matches[2].trim();
          var arg = Object.values(_this.parameters).filter(function (it) {
            return it.alias === name;
          });
          var is_alias = arg.length === 1;

          if (is_alias) {
            _this._set(opts, arg[0].name, value);
          } else if (name in _this.parameters) {
            _this._set(opts, name, value);
          } else if (name in _this.groups) {
            var subopt = _this.groups[name]._parseShorthandNotation(value);

            for (var field in subopt) {
              _this._set(opts, name + "-" + field, subopt[field]);
            }
          } else {
            _this.log.warn("Unknown named parameter " + matches[1]);

            return "continue";
          }
        };

        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _ret = _loop();

          if (_ret === "continue") continue;
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return opts;
    }
  }, {
    key: "_parseShorthandNotation",
    value: function _parseShorthandNotation(parameter) {
      var parts = this._split(parameter);

      var opts = {};
      var i = 0;

      while (parts.length) {
        var part = parts.shift().trim();
        var sense = void 0;
        var flag = void 0;
        var positional = true;

        if (part.slice(0, 3) === "no-") {
          sense = false;
          flag = part.slice(3);
        } else {
          sense = true;
          flag = part;
        }

        if (flag in this.parameters && this.parameters[flag].type === "boolean") {
          positional = false;

          this._set(opts, flag, sense);
        } else if (flag in this.enum_values) {
          positional = false;

          this._set(opts, this.enum_values[flag], flag);
        } else if (positional) this._set(opts, this.order[i], part);else {
          parts.unshift(part);
          break;
        }

        i++;

        if (i >= this.order.length) {
          break;
        }
      }

      if (parts.length) this.log.warn("Ignore extra arguments: " + parts.join(" "));
      return opts;
    }
  }, {
    key: "_parse",
    value: function _parse(parameter) {
      if (!parameter) {
        return {};
      }

      if (parameter.match(this.json_param_pattern)) {
        try {
          return JSON.parse(parameter);
        } catch (e) {
          this.log.warn("Invalid JSON argument found: " + parameter);
        }
      }

      if (parameter.match(this.named_param_pattern)) {
        return this._parseExtendedNotation(parameter);
      }

      var sep = parameter.indexOf(";");

      if (sep === -1) {
        return this._parseShorthandNotation(parameter);
      }

      var opts = this._parseShorthandNotation(parameter.slice(0, sep));

      var extended = this._parseExtendedNotation(parameter.slice(sep + 1));

      for (var name in extended) {
        opts[name] = extended[name];
      }

      return opts;
    }
  }, {
    key: "_defaults",
    value: function _defaults($el) {
      var result = {};

      for (var name in this.parameters) {
        if (typeof this.parameters[name].value === "function") try {
          result[name] = this.parameters[name].value($el, name);
          this.parameters[name].type = _typeof2(result[name]);
        } catch (e) {
          this.log.error("Default function for " + name + " failed.");
        } else result[name] = this.parameters[name].value;
      }

      return result;
    }
  }, {
    key: "_cleanupOptions",
    value: function _cleanupOptions(options) {
      // Resolve references
      for (var _i = 0, _Object$keys = Object.keys(options); _i < _Object$keys.length; _i++) {
        var name = _Object$keys[_i];
        var spec = this.parameters[name];
        if (spec === undefined) continue;
        if (options[name] === spec.value && typeof spec.value === "string" && spec.value.slice(0, 1) === "$") options[name] = options[spec.value.slice(1)];
      } // Move options into groups and do renames


      for (var _i2 = 0, _Object$keys2 = Object.keys(options); _i2 < _Object$keys2.length; _i2++) {
        var _name = _Object$keys2[_i2];
        var _spec = this.parameters[_name];
        var target = void 0;
        if (_spec === undefined) continue;

        if (_spec.group) {
          if (_typeof2(options[_spec.group]) !== "object") options[_spec.group] = {};
          target = options[_spec.group];
        } else {
          target = options;
        }

        if (_spec.dest !== _name) {
          target[_spec.dest] = options[_name];
          delete options[_name];
        }
      }

      return options;
    }
  }, {
    key: "parse",
    value: function parse($el, options, multiple, inherit) {
      if (!$el.jquery) {
        $el = jquery_js_exposed_default()($el);
      }

      if (typeof options === "boolean" && multiple === undefined) {
        // Fix argument order: ``multiple`` passed instead of ``options``.
        multiple = options;
        options = {};
      }

      inherit = inherit !== false;
      var stack = inherit ? [[this._defaults($el)]] : [[{}]];
      var $possible_config_providers;
      var final_length = 1;
      /*
       * XXX this is a workaround for:
       * - https://github.com/Patternslib/Patterns/issues/393
       *
       * Prevents the parser to pollute the pat-modal configuration
       * with data-pat-inject elements define in a `.pat-modal` parent element.
       *
       *  Probably this function should be completely revisited, see:
       * - https://github.com/Patternslib/Patterns/issues/627
       *
       */

      if (!inherit || $el.hasClass("pat-modal") && this.attribute === "data-pat-inject") {
        $possible_config_providers = $el;
      } else {
        $possible_config_providers = $el.parents("[" + this.attribute + "]").addBack();
      }

      var _iterator4 = parser_createForOfIteratorHelper($possible_config_providers),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var provider = _step4.value;
          var frame = void 0;
          var data = jquery_js_exposed_default()(provider).attr(this.attribute);

          if (!data) {
            continue;
          }

          var _parse = this._parse.bind(this);

          if (data.match(/&&/)) {
            frame = data.split(/\s*&&\s*/).map(_parse);
          } else {
            frame = [_parse(data)];
          }

          final_length = Math.max(frame.length, final_length);
          stack.push(frame);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      if (_typeof2(options) === "object") {
        if (Array.isArray(options)) {
          stack.push(options);
          final_length = Math.max(options.length, final_length);
        } else stack.push([options]);
      }

      if (!multiple) {
        final_length = 1;
      }

      var results = core_utils.removeDuplicateObjects(core_utils.mergeStack(stack, final_length)).map(this._cleanupOptions.bind(this));
      return multiple ? results : results[0];
    }
  }]);

  return ArgumentParser;
}(); // BBB


parser_ArgumentParser.prototype.add_argument = parser_ArgumentParser.prototype.addArgument;
/* harmony default export */ var core_parser = (parser_ArgumentParser);
// CONCATENATED MODULE: ./node_modules/pat-code-editor/src/code-editor.js
function code_editor_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function code_editor_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { code_editor_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { code_editor_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

 // needed for ``await`` support



var code_editor_parser = new core_parser("code-editor");
code_editor_parser.addArgument("language", null); // programming language to use.

code_editor_parser.addArgument("linenumbers", true);
code_editor_parser.addArgument("theme", null); // theme to use.
// CodeJar options

code_editor_parser.addArgument("tab", "    "); // The tab-string. "\t" for real tabs.

code_editor_parser.addArgument("indent-on", "{$");
code_editor_parser.addArgument("spellcheck", false);
code_editor_parser.addArgument("catch-tab", true);
code_editor_parser.addArgument("preserve-ident", true);
code_editor_parser.addArgument("add-closing", true);
code_editor_parser.addArgument("history", true);
/* harmony default export */ var code_editor = (src_core_base.extend({
  name: "code-editor",
  trigger: ".pat-code-editor",
  init: function init() {
    var _this = this;

    return code_editor_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var CodeJar, Prism, prism_wrapper, linenumbers, el, config;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this.options = code_editor_parser.parse(_this.el, _this.options);
              _context.next = 3;
              return __webpack_require__.e(/* import() */ 178).then(__webpack_require__.bind(null, 651));

            case 3:
              CodeJar = _context.sent;
              CodeJar = CodeJar.CodeJar;
              _context.next = 7;
              return __webpack_require__.e(/* import() */ 190).then(__webpack_require__.t.bind(null, 652, 7));

            case 7:
              Prism = _context.sent;
              Prism = Prism.default;

              prism_wrapper = function prism_wrapper() {
                var _Prism;

                return (_Prism = Prism).highlightElement.apply(_Prism, arguments);
              };

              if (!_this.options.linenumbers) {
                _context.next = 16;
                break;
              }

              _context.next = 13;
              return __webpack_require__.e(/* import() */ 179).then(__webpack_require__.bind(null, 653));

            case 13:
              linenumbers = _context.sent;
              linenumbers = linenumbers.withLineNumbers;
              prism_wrapper = linenumbers(Prism.highlightElement);

            case 16:
              el = _this.el;

              if (["textarea", "input"].includes(_this.el.nodeName.toLowerCase())) {
                el = document.createElement("pre");
                el.innerHTML = "<code contenteditable>".concat(_this.el.value, "</code>");

                _this.el.parentNode.insertBefore(el, _this.el);

                _this.el.setAttribute("hidden", "");
              }

              if (_this.options.language) {
                el.classList.add("language-".concat(_this.options.language));
              }

              __webpack_require__(367)("./prism".concat(_this.options.theme ? "-" + _this.options.theme : "", ".css"));
              config = {
                tab: _this.options.tab,
                indentOn: _this.options.indentOn,
                spellcheck: _this.options.spellcheck,
                catchTab: _this.options.catchTab,
                preserveIdent: _this.options.preserveIdent,
                addClosing: _this.options.addClosing,
                history: _this.options.history
              };
              _this.codeeditor = CodeJar(el, prism_wrapper, config);

              if (el !== _this.el) {
                // Update <textarea> or <input>, if one of these were the
                // initializing elements.
                _this.codeeditor.onUpdate(function (code) {
                  _this.el.value = code;
                });
              }

            case 23:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  }
}));
// CONCATENATED MODULE: ./node_modules/pat-tinymce/node_modules/patternslib/src/core/dom.js
function dom_toConsumableArray(arr) { return dom_arrayWithoutHoles(arr) || dom_iterableToArray(arr) || core_dom_unsupportedIterableToArray(arr) || dom_nonIterableSpread(); }

function dom_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function core_dom_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return core_dom_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return core_dom_arrayLikeToArray(o, minLen); }

function dom_iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function dom_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return core_dom_arrayLikeToArray(arr); }

function core_dom_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* Utilities for DOM traversal or navigation */
var dom_DATA_STYLE_DISPLAY = "__patternslib__style__display";

var dom_toNodeArray = function toNodeArray(nodes) {
  // Return an array of DOM nodes
  if (nodes.jquery || nodes instanceof NodeList) {
    // jQuery or document.querySelectorAll
    nodes = dom_toConsumableArray(nodes);
  } else if (nodes instanceof Array === false) {
    nodes = [nodes];
  }

  return nodes;
};

var dom_querySelectorAllAndMe = function querySelectorAllAndMe(el, selector) {
  // Like querySelectorAll but including the element where it starts from.
  // Returns an Array, not a NodeList
  var all = dom_toConsumableArray(el.querySelectorAll(selector));

  if (el.matches(selector)) {
    all.unshift(el); // start element should be first.
  }

  return all;
};

var dom_wrap = function wrap(el, wrapper) {
  // Wrap a element with a wrapper element.
  // See: https://stackoverflow.com/a/13169465/1337474
  el.parentNode.insertBefore(wrapper, el);
  wrapper.appendChild(el);
};

var core_dom_hide = function hide(el) {
  // Hides the element with ``display: none``
  if (el.style.display === "none") {
    // Nothing to do.
    return;
  }

  if (el.style.display) {
    el[dom_DATA_STYLE_DISPLAY] = el.style.display;
  }

  el.style.display = "none";
};

var dom_show = function show(el) {
  // Shows element by removing ``display: none`` and restoring the display
  // value to whatever it was before.
  var val = el[dom_DATA_STYLE_DISPLAY] || null;
  el.style.display = val;
  delete el[dom_DATA_STYLE_DISPLAY];
};

var dom_find_parents = function find_parents(el, selector) {
  var _el$parentNode;

  // Return all direct parents of ``el`` matching ``selector``.
  // This matches against all parents but not the element itself.
  // The order of elements is from the search starting point up to higher
  // DOM levels.
  var parent = (el === null || el === void 0 ? void 0 : (_el$parentNode = el.parentNode) === null || _el$parentNode === void 0 ? void 0 : _el$parentNode.closest) && el.parentNode.closest(selector) || null;
  var ret = [];

  while (parent) {
    var _parent$parentNode;

    ret.push(parent);
    parent = ((_parent$parentNode = parent.parentNode) === null || _parent$parentNode === void 0 ? void 0 : _parent$parentNode.closest(selector)) || null;
  }

  return ret;
};

var dom_find_scoped = function find_scoped(el, selector) {
  // If the selector starts with an object id do a global search,
  // otherwise do a local search.
  return (selector.indexOf("#") === 0 ? document : el).querySelectorAll(selector);
};

var dom_is_visible = function is_visible(el) {
  // Check, if element is visible in DOM.
  // https://stackoverflow.com/a/19808107/1337474
  return el.offsetWidth > 0 && el.offsetHeight > 0;
};

var dom_create_from_string = function create_from_string(string) {
  // Create a DOM element from a string.
  var div = document.createElement("div");
  div.innerHTML = string.trim();
  return div.firstChild;
};

var core_dom_dom = {
  toNodeArray: dom_toNodeArray,
  querySelectorAllAndMe: dom_querySelectorAllAndMe,
  wrap: dom_wrap,
  hide: core_dom_hide,
  show: dom_show,
  find_parents: dom_find_parents,
  find_scoped: dom_find_scoped,
  is_visible: dom_is_visible,
  create_from_string: dom_create_from_string
};
/* harmony default export */ var src_core_dom = (core_dom_dom);
// CONCATENATED MODULE: ./node_modules/pat-tinymce/node_modules/patternslib/src/core/logging.js
function logging_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { logging_typeof = function _typeof(obj) { return typeof obj; }; } else { logging_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return logging_typeof(obj); }

/**
 * Patterns logging - minimal logging framework
 *
 * Copyright 2012 Simplon B.V.
 */
// source: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind
if (!Function.prototype.bind) {
  Function.prototype.bind = function (oThis) {
    if (typeof this !== "function") {
      // closest thing possible to the ECMAScript 5 internal IsCallable function
      throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
    }

    var aArgs = Array.prototype.slice.call(arguments, 1),
        fToBind = this,
        fNOP = function fNOP() {},
        fBound = function fBound() {
      return fToBind.apply(this instanceof fNOP && oThis ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
    };

    fNOP.prototype = this.prototype;
    fBound.prototype = new fNOP();
    return fBound;
  };
}

var logging_root, // root logger instance
logging_writer; // writer instance, used to output log entries

var logging_Level = {
  DEBUG: 10,
  INFO: 20,
  WARN: 30,
  ERROR: 40,
  FATAL: 50
};

function logging_IEConsoleWriter() {}

logging_IEConsoleWriter.prototype = {
  output: function output(log_name, level, messages) {
    // console.log will magically appear in IE8 when the user opens the
    // F12 Developer Tools, so we have to test for it every time.
    if (typeof window.console === "undefined" || typeof console.log === "undefined") return;
    if (log_name) messages.unshift(log_name + ":");
    var message = messages.join(" "); // Under some conditions console.log will be available but the
    // other functions are missing.

    if (logging_typeof(console.info) === undefined) {
      var level_name;
      if (level <= logging_Level.DEBUG) level_name = "DEBUG";else if (level <= logging_Level.INFO) level_name = "INFO";else if (level <= logging_Level.WARN) level_name = "WARN";else if (level <= logging_Level.ERROR) level_name = "ERROR";else level_name = "FATAL";
      console.log("[" + level_name + "] " + message);
    } else {
      if (level <= logging_Level.DEBUG) {
        // console.debug exists but is deprecated
        message = "[DEBUG] " + message;
        console.log(message);
      } else if (level <= logging_Level.INFO) console.info(message);else if (level <= logging_Level.WARN) console.warn(message);else console.error(message);
    }
  }
};

function logging_ConsoleWriter() {}

logging_ConsoleWriter.prototype = {
  output: function output(log_name, level, messages) {
    if (log_name) messages.unshift(log_name + ":");

    if (level <= logging_Level.DEBUG) {
      // console.debug exists but is deprecated
      messages.unshift("[DEBUG]");
      console.log.apply(console, messages);
    } else if (level <= logging_Level.INFO) console.info.apply(console, messages);else if (level <= logging_Level.WARN) console.warn.apply(console, messages);else console.error.apply(console, messages);
  }
};

function logging_Logger(name, parent) {
  this._loggers = {};
  this.name = name || "";
  this._parent = parent || null;

  if (!parent) {
    this._enabled = true;
    this._level = logging_Level.WARN;
  }
}

logging_Logger.prototype = {
  getLogger: function getLogger(name) {
    var path = name.split("."),
        root = this,
        route = this.name ? [this.name] : [];

    while (path.length) {
      var entry = path.shift();
      route.push(entry);
      if (!(entry in root._loggers)) root._loggers[entry] = new logging_Logger(route.join("."), root);
      root = root._loggers[entry];
    }

    return root;
  },
  _getFlag: function _getFlag(flag) {
    var context = this;
    flag = "_" + flag;

    while (context !== null) {
      if (context[flag] !== undefined) return context[flag];
      context = context._parent;
    }

    return null;
  },
  setEnabled: function setEnabled(state) {
    this._enabled = !!state;
  },
  isEnabled: function isEnabled() {
    this._getFlag("enabled");
  },
  setLevel: function setLevel(level) {
    if (typeof level === "number") this._level = level;else if (typeof level === "string") {
      level = level.toUpperCase();
      if (level in logging_Level) this._level = logging_Level[level];
    }
  },
  getLevel: function getLevel() {
    return this._getFlag("level");
  },
  log: function log(level, messages) {
    if (!messages.length || !this._getFlag("enabled") || level < this._getFlag("level")) return;
    messages = Array.prototype.slice.call(messages);
    logging_writer.output(this.name, level, messages);
  },
  debug: function debug() {
    this.log(logging_Level.DEBUG, arguments);
  },
  info: function info() {
    this.log(logging_Level.INFO, arguments);
  },
  warn: function warn() {
    this.log(logging_Level.WARN, arguments);
  },
  error: function error() {
    this.log(logging_Level.ERROR, arguments);
  },
  fatal: function fatal() {
    this.log(logging_Level.FATAL, arguments);
  }
};

function logging_getWriter() {
  return logging_writer;
}

function logging_setWriter(w) {
  logging_writer = w;
}

if (!window.console || !window.console.log || typeof window.console.log.apply !== "function") {
  logging_setWriter(new logging_IEConsoleWriter());
} else {
  logging_setWriter(new logging_ConsoleWriter());
}

logging_root = new logging_Logger();
var logging_logconfig = /loglevel(|-[^=]+)=([^&]+)/g,
    logging_match;

while ((logging_match = logging_logconfig.exec(window.location.search)) !== null) {
  var logging_logger = logging_match[1] === "" ? logging_root : logging_root.getLogger(logging_match[1].slice(1));
  logging_logger.setLevel(logging_match[2].toUpperCase());
}

var logging_api = {
  Level: logging_Level,
  getLogger: logging_root.getLogger.bind(logging_root),
  setEnabled: logging_root.setEnabled.bind(logging_root),
  isEnabled: logging_root.isEnabled.bind(logging_root),
  setLevel: logging_root.setLevel.bind(logging_root),
  getLevel: logging_root.getLevel.bind(logging_root),
  debug: logging_root.debug.bind(logging_root),
  info: logging_root.info.bind(logging_root),
  warn: logging_root.warn.bind(logging_root),
  error: logging_root.error.bind(logging_root),
  fatal: logging_root.fatal.bind(logging_root),
  getWriter: logging_getWriter,
  setWriter: logging_setWriter
};
/* harmony default export */ var core_logging = (logging_api);
// CONCATENATED MODULE: ./node_modules/pat-tinymce/node_modules/patternslib/src/core/utils.js
function core_utils_createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = core_utils_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function core_utils_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return core_utils_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return core_utils_arrayLikeToArray(o, minLen); }

function core_utils_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function core_utils_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { core_utils_typeof = function _typeof(obj) { return typeof obj; }; } else { core_utils_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return core_utils_typeof(obj); }





jquery_js_exposed_default.a.fn.safeClone = function () {
  var $clone = this.clone(); // IE BUG : Placeholder text becomes actual value after deep clone on textarea
  // https://connect.microsoft.com/IE/feedback/details/781612/placeholder-text-becomes-actual-value-after-deep-clone-on-textarea

  if (window.document.documentMode) {
    $clone.findInclusive(":input[placeholder]").each(function (i, item) {
      var $item = jquery_js_exposed_default()(item);

      if ($item.attr("placeholder") === $item.val()) {
        $item.val("");
      }
    });
  }

  return $clone;
}; // Production steps of ECMA-262, Edition 5, 15.4.4.18
// Reference: http://es5.github.io/#x15.4.4.18


if (!Array.prototype.forEach) {
  Array.prototype.forEach = function (callback, thisArg) {
    var T, k;

    if (this === null) {
      throw new TypeError(" this is null or not defined");
    } // 1. Let O be the result of calling ToObject passing the |this| value as the argument.


    var O = Object(this); // 2. Let lenValue be the result of calling the Get internal method of O with the argument "length".
    // 3. Let len be ToUint32(lenValue).

    var len = O.length >>> 0; // 4. If IsCallable(callback) is false, throw a TypeError exception.
    // See: http://es5.github.com/#x9.11

    if (typeof callback !== "function") {
      throw new TypeError(callback + " is not a function");
    } // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.


    if (arguments.length > 1) {
      T = thisArg;
    } // 6. Let k be 0


    k = 0; // 7. Repeat, while k < len

    while (k < len) {
      var kValue; // a. Let Pk be ToString(k).
      //   This is implicit for LHS operands of the in operator
      // b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.
      //   This step can be combined with c
      // c. If kPresent is true, then

      if (k in O) {
        // i. Let kValue be the result of calling the Get internal method of O with argument Pk.
        kValue = O[k]; // ii. Call the Call internal method of callback with T as the this value and
        // argument list containing kValue, k, and O.

        callback.call(T, kValue, k, O);
      } // d. Increase k by 1.


      k++;
    } // 8. return undefined

  };
}

var core_utils_singleBoundJQueryPlugin = function singleBoundJQueryPlugin(pattern, method, options) {
  /* This is a jQuery plugin for patterns which are invoked ONCE FOR EACH
   * matched element in the DOM.
   *
   * This is how the Mockup-type patterns behave. They are constructor
   * functions which need to be invoked once per jQuery-wrapped DOM node
   * for all DOM nodes on which the pattern applies.
   */
  var $this = this;
  $this.each(function () {
    var pat,
        $el = jquery_js_exposed_default()(this);
    pat = pattern.init($el, options);

    if (method) {
      if (pat[method] === undefined) {
        jquery_js_exposed_default.a.error("Method " + method + " does not exist on jQuery." + pattern.name);
        return false;
      }

      if (method.charAt(0) === "_") {
        jquery_js_exposed_default.a.error("Method " + method + " is private on jQuery." + pattern.name);
        return false;
      }

      pat[method].apply(pat, [options]);
    }
  });
  return $this;
};

var core_utils_pluralBoundJQueryPlugin = function pluralBoundJQueryPlugin(pattern, method, options) {
  /* This is a jQuery plugin for patterns which are invoked ONCE FOR ALL
   * matched elements in the DOM.
   *
   * This is how the vanilla Patternslib-type patterns behave. They are
   * simple objects with an init method and this method gets called once
   * with a list of jQuery-wrapped DOM nodes on which the pattern
   * applies.
   */
  var $this = this;

  if (method) {
    if (pattern[method]) {
      return pattern[method].apply($this, [$this].concat([options]));
    } else {
      jquery_js_exposed_default.a.error("Method " + method + " does not exist on jQuery." + pattern.name);
    }
  } else {
    pattern.init.apply($this, [$this].concat([options]));
  }

  return $this;
};

var utils_jqueryPlugin = function jqueryPlugin(pattern) {
  return function (method, options) {
    var $this = this;

    if ($this.length === 0) {
      return $this;
    }

    if (core_utils_typeof(method) === "object") {
      options = method;
      method = undefined;
    }

    if (typeof pattern === "function") {
      return core_utils_singleBoundJQueryPlugin.call(this, pattern, method, options);
    } else {
      return core_utils_pluralBoundJQueryPlugin.call(this, pattern, method, options);
    }
  };
}; // Is a given variable an object?


function utils_isObject(obj) {
  var type = core_utils_typeof(obj);

  return type === "function" || type === "object" && !!obj;
} // Extend a given object with all the properties in passed-in object(s).


function utils_extend(obj) {
  if (!utils_isObject(obj)) return obj;
  var source, prop;

  for (var i = 1, length = arguments.length; i < length; i++) {
    source = arguments[i];

    for (prop in source) {
      if (hasOwnProperty.call(source, prop)) {
        obj[prop] = source[prop];
      }
    }
  }

  return obj;
} // END: Taken from Underscore.js until here.


function utils_rebaseURL(base, url) {
  base = new URL(base, window.location).href; // If base is relative make it absolute.

  if (url.indexOf("://") !== -1 || url[0] === "/" || url.indexOf("data:") === 0) {
    return url;
  }

  return base.slice(0, base.lastIndexOf("/") + 1) + url;
}

function utils_findLabel(input) {
  var $label;

  for (var label = input.parentNode; label && label.nodeType !== 11; label = label.parentNode) {
    if (label.tagName === "LABEL") {
      return label;
    }
  }

  if (input.id) {
    $label = jquery_js_exposed_default()('label[for="' + input.id + '"]');
  }

  if ($label && $label.length === 0 && input.form) {
    $label = jquery_js_exposed_default()('label[for="' + input.name + '"]', input.form);
  }

  if ($label && $label.length) {
    return $label[0];
  } else {
    return null;
  }
} // Taken from http://stackoverflow.com/questions/123999/how-to-tell-if-a-dom-element-is-visible-in-the-current-viewport


function utils_elementInViewport(el) {
  var rect = el.getBoundingClientRect(),
      docEl = document.documentElement,
      vWidth = window.innerWidth || docEl.clientWidth,
      vHeight = window.innerHeight || docEl.clientHeight;
  if (rect.right < 0 || rect.bottom < 0 || rect.left > vWidth || rect.top > vHeight) return false;
  return true;
} // Taken from http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex


function utils_escapeRegExp(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}

function utils_removeWildcardClass($targets, classes) {
  if (classes.indexOf("*") === -1) $targets.removeClass(classes);else {
    var matcher = classes.replace(/[\-\[\]{}()+?.,\\\^$|#\s]/g, "\\$&");
    matcher = matcher.replace(/[*]/g, ".*");
    matcher = new RegExp("^" + matcher + "$");
    $targets.filter("[class]").each(function () {
      var $this = jquery_js_exposed_default()(this),
          classes = $this.attr("class").split(/\s+/),
          ok = [];

      for (var i = 0; i < classes.length; i++) {
        if (!matcher.test(classes[i])) ok.push(classes[i]);
      }

      if (ok.length) $this.attr("class", ok.join(" "));else $this.removeAttr("class");
    });
  }
}

function utils_hasValue(el) {
  if (el.tagName === "INPUT") {
    if (el.type === "checkbox" || el.type === "radio") {
      return el.checked;
    }

    return el.value !== "";
  }

  if (el.tagName === "SELECT") {
    return el.selectedIndex !== -1;
  }

  if (el.tagName === "TEXTAREA") {
    return el.value !== "";
  }

  return false;
}

var core_utils_hideOrShow = function hideOrShow(nodes, visible, options, pattern_name) {
  nodes = src_core_dom.toNodeArray(nodes);
  var transitions = {
    none: {
      hide: "hide",
      show: "show"
    },
    fade: {
      hide: "fadeOut",
      show: "fadeIn"
    },
    slide: {
      hide: "slideUp",
      show: "slideDown"
    }
  };
  var duration = options.transition === "css" || options.transition === "none" ? null : options.effect.duration;

  var on_complete = function on_complete(el) {
    el.classList.remove("in-progress");
    el.classList.add(visible ? "visible" : "hidden");
    jquery_js_exposed_default()(el).trigger("pat-update", {
      pattern: pattern_name,
      transition: "complete"
    });
  };

  var _iterator = core_utils_createForOfIteratorHelper(nodes),
      _step;

  try {
    var _loop = function _loop() {
      var el = _step.value;
      el.classList.remove("visible");
      el.classList.remove("hidden");
      el.classList.remove("in-progress");

      if (duration) {
        var t = transitions[options.transition];
        el.classList.add("in-progress");
        jquery_js_exposed_default()(el).trigger("pat-update", {
          pattern: pattern_name,
          transition: "start"
        });
        jquery_js_exposed_default()(el)[visible ? t.show : t.hide]({
          duration: duration,
          easing: options.effect.easing,
          complete: function complete() {
            return on_complete(el);
          }
        });
      } else {
        if (options.transition !== "css") {
          src_core_dom[visible ? "show" : "hide"](el);
        }

        on_complete(el);
      }
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
};

function utils_addURLQueryParameter(fullURL, param, value) {
  /* Using a positive lookahead (?=\=) to find the given parameter,
   * preceded by a ? or &, and followed by a = with a value after
   * than (using a non-greedy selector) and then followed by
   * a & or the end of the string.
   *
   * Taken from http://stackoverflow.com/questions/7640270/adding-modify-query-string-get-variables-in-a-url-with-javascript
   */
  var val = new RegExp("(\\?|\\&)" + param + "=.*?(?=(&|$))"),
      parts = fullURL.toString().split("#"),
      url = parts[0],
      hash = parts[1],
      qstring = /\?.+$/,
      newURL = url; // Check if the parameter exists

  if (val.test(url)) {
    // if it does, replace it, using the captured group
    // to determine & or ? at the beginning
    newURL = url.replace(val, "$1" + param + "=" + value);
  } else if (qstring.test(url)) {
    // otherwise, if there is a query string at all
    // add the param to the end of it
    newURL = url + "&" + param + "=" + value;
  } else {
    // if there's no query string, add one
    newURL = url + "?" + param + "=" + value;
  }

  if (hash) {
    newURL += "#" + hash;
  }

  return newURL;
}

function utils_removeDuplicateObjects(objs) {
  /* Given an array of objects, remove any duplicate objects which might
   * be present.
   */
  var comparator = function comparator(v, k) {
    return this[k] === v;
  };

  return index_all["default"].reduce(objs, function (list, next_obj) {
    var is_duplicate = false;

    index_all["default"].each(list, function (obj) {
      is_duplicate = index_all["default"].keys(obj).length === index_all["default"].keys(next_obj).length && !index_all["default"].chain(obj).omit(comparator.bind(next_obj)).keys().value().length;
    });

    if (!is_duplicate) {
      list.push(next_obj);
    }

    return list;
  }, []);
}

function utils_mergeStack(stack, length) {
  /* Given a list of lists of objects (which for brevity we call a stack),
   * return a list of objects where each object is the merge of all the
   * corresponding original objects at that particular index.
   *
   * If a certain sub-list doesn't have an object at that particular
   * index, the last object in that list is merged.
   */
  var results = [];

  for (var i = 0; i < length; i++) {
    results.push({});
  }

  index_all["default"].each(stack, function (frame) {
    var frame_length = frame.length - 1;

    for (var x = 0; x < length; x++) {
      results[x] = jquery_js_exposed_default.a.extend(results[x] || {}, frame[x > frame_length ? frame_length : x]);
    }
  });

  return results;
}

function utils_isElementInViewport(el, partial, offset) {
  /* returns true if element is visible to the user ie. is in the viewport.
   * Setting partial parameter to true, will only check if a part of the element is visible
   * in the viewport, specifically that some part of that element is touching the top part
   * of the viewport. This only applies to the vertical direction, ie. doesnt check partial
   * visibility for horizontal scrolling
   * some code taken from:
   * http://stackoverflow.com/questions/123999/how-to-tell-if-a-dom-element-is-visible-in-the-current-viewport/7557433#7557433
   */
  if (el === []) {
    return false;
  }

  if (el instanceof jquery_js_exposed_default.a) {
    el = el[0];
  }

  var rec = el.getBoundingClientRect(),
      rec_values = [rec.top, rec.bottom, rec.left, rec.right];

  if (index_all["default"].every(rec_values, function zero(v) {
    if (v === 0) {
      return true;
    }
  })) {
    // if every property of rec is 0, the element is invisible;
    return false;
  } else if (partial) {
    // when using getBoundingClientRect() (in the vertical case)
    // negative means above top of viewport, positive means below top of viewport
    // therefore for part of the element to be touching or crossing the top of the viewport
    // rec.top must <= 0 and rec.bottom must >= 0
    // an optional tolerance offset can be added for when the desired element is not exactly
    // toucing the top of the viewport but needs to be considered as touching.
    if (offset === undefined) {
      offset = 0;
    }

    return rec.top <= 0 + offset && rec.bottom >= 0 + offset //(rec.top >= 0+offset && rec.top <= window.innerHeight) // this checks if the element
    // touches bottom part of viewport
    // XXX do we want to include a check for the padding of an element?
    // using window.getComputedStyle(target).paddingTop
    ;
  } else {
    // this will return true if the entire element is completely in the viewport
    return rec.top >= 0 && rec.left >= 0 && rec.bottom <= (window.innerHeight || document.documentElement.clientHeight)
    /*or $(window).height() */
    && rec.right <= (window.innerWidth || document.documentElement.clientWidth)
    /*or $(window).width() */
    ;
  }
}

function utils_parseTime(time) {
  var m = /^(\d+(?:\.\d+)?)\s*(\w*)/.exec(time);

  if (!m) {
    throw new Error("Invalid time");
  }

  var amount = parseFloat(m[1]);

  switch (m[2]) {
    case "s":
      return Math.round(amount * 1000);

    case "m":
      return Math.round(amount * 1000 * 60);

    case "ms":
    default:
      return Math.round(amount);
  }
} // Return a jQuery object with elements related to an input element.


function utils_findRelatives(el) {
  var $el = jquery_js_exposed_default()(el),
      $relatives = jquery_js_exposed_default()(el),
      $label = jquery_js_exposed_default()();
  $relatives = $relatives.add($el.closest("label"));
  $relatives = $relatives.add($el.closest("fieldset"));
  if (el.id) $label = jquery_js_exposed_default()("label[for='" + el.id + "']");

  if (!$label.length) {
    var $form = $el.closest("form");
    if (!$form.length) $form = jquery_js_exposed_default()(document.body);
    $label = $form.find("label[for='" + el.name + "']");
  }

  $relatives = $relatives.add($label);
  return $relatives;
}

function utils_getCSSValue(el, property, asPixels) {
  /* Return a CSS property value for a given DOM node.
   * For length-values, relative values are converted to pixels.
   * Optionally parse as pixels, if applicable.
   */
  var value = window.getComputedStyle(el).getPropertyValue(property);

  if (asPixels) {
    value = parseFloat(value) || 0.0;
  }

  return value;
}

function utils_checkInputSupport(type, invalid_value) {
  /* Check input type support.
   *  See: https://stackoverflow.com/a/10199306/1337474
   */
  var support = false;
  var input = document.createElement("input");
  input.setAttribute("type", type);
  support = input.type == type;

  if (invalid_value !== undefined) {
    // Check for input type UI support
    input.setAttribute("value", invalid_value);
    support = input.value !== invalid_value;
  }

  return support;
}

var utils_checkCSSFeature = function checkCSSFeature(attribute, value) {
  var tag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "div";

  /* Check for browser support of specific CSS feature.
   */
  tag = document.createElement(tag);
  var supported = tag.style[attribute] !== undefined;

  if (supported && value !== undefined) {
    tag.style[attribute] = value;
    supported = tag.style[attribute] === value;
  }

  return supported;
};

var core_utils_timeout = function timeout(ms) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, ms);
  });
};

var utils_debounce = function debounce(func, ms) {
  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds.
  // From: https://underscorejs.org/#debounce
  var timer = null;
  return function () {
    var _this = this;

    clearTimeout(timer);
    var args = arguments;
    timer = setTimeout(function () {
      func.apply(_this, args);
    }, ms);
  };
};

var utils_isIE = function isIE() {
  // See: https://stackoverflow.com/a/9851769/1337474
  // Internet Explorer 6-11
  return (
    /*@cc_on!@*/
     false || !!document.documentMode
  );
};

var utils_jqToNode = function jqToNode(el) {
  // Return a DOM node if a jQuery node was passed.
  if (el.jquery) {
    el = el[0];
  }

  return el;
};

var core_utils_utils = {
  // pattern pimping - own module?
  jqueryPlugin: utils_jqueryPlugin,
  escapeRegExp: utils_escapeRegExp,
  isObject: utils_isObject,
  extend: utils_extend,
  rebaseURL: utils_rebaseURL,
  findLabel: utils_findLabel,
  elementInViewport: utils_elementInViewport,
  removeWildcardClass: utils_removeWildcardClass,
  hideOrShow: core_utils_hideOrShow,
  addURLQueryParameter: utils_addURLQueryParameter,
  removeDuplicateObjects: utils_removeDuplicateObjects,
  mergeStack: utils_mergeStack,
  isElementInViewport: utils_isElementInViewport,
  hasValue: utils_hasValue,
  parseTime: utils_parseTime,
  findRelatives: utils_findRelatives,
  getCSSValue: utils_getCSSValue,
  checkInputSupport: utils_checkInputSupport,
  checkCSSFeature: utils_checkCSSFeature,
  timeout: core_utils_timeout,
  debounce: utils_debounce,
  isIE: utils_isIE,
  jqToNode: utils_jqToNode
};
/* harmony default export */ var src_core_utils = (core_utils_utils);
// CONCATENATED MODULE: ./node_modules/pat-tinymce/node_modules/patternslib/src/core/registry.js
function core_registry_createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = core_registry_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function core_registry_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return core_registry_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return core_registry_arrayLikeToArray(o, minLen); }

function core_registry_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Patterns registry - Central registry and scan logic for patterns
 *
 * Copyright 2012-2013 Simplon B.V.
 * Copyright 2012-2013 Florian Friesdorf
 * Copyright 2013 Marko Durkovic
 * Copyright 2013 Rok Garbas
 * Copyright 2014-2015 Syslab.com GmBH, JC Brand
 */

/*
 * changes to previous patterns.register/scan mechanism
 * - if you want initialised class, do it in init
 * - init returns set of elements actually initialised
 * - handle once within init
 * - no turnstile anymore
 * - set pattern.jquery_plugin if you want it
 */




var registry_log = core_logging.getLogger("registry");
var registry_disable_re = /patterns-disable=([^&]+)/g;
var registry_dont_catch_re = /patterns-dont-catch/g;
var registry_disabled = {};
var registry_dont_catch = false;
var core_registry_match;

while ((core_registry_match = registry_disable_re.exec(window.location.search)) !== null) {
  registry_disabled[core_registry_match[1]] = true;
  registry_log.info("Pattern disabled via url config:", core_registry_match[1]);
}

while ((core_registry_match = registry_dont_catch_re.exec(window.location.search)) !== null) {
  registry_dont_catch = true;
  registry_log.info("I will not catch init exceptions");
}

var core_registry_registry = {
  patterns: {},
  // as long as the registry is not initialized, pattern
  // registration just registers a pattern. Once init is called,
  // the DOM is scanned. After that registering a new pattern
  // results in rescanning the DOM only for this pattern.
  initialized: false,
  init: function init() {
    jquery_js_exposed_default()(document).ready(function () {
      registry_log.info("loaded: " + Object.keys(core_registry_registry.patterns).sort().join(", "));
      core_registry_registry.scan(document.body);
      core_registry_registry.initialized = true;
      registry_log.info("finished initial scan.");
    });
  },
  clear: function clear() {
    // Removes all patterns from the registry. Currently only being
    // used in tests.
    this.patterns = {};
  },
  transformPattern: function transformPattern(name, content) {
    var _pattern$prototype;

    /* Call the transform method on the pattern with the given name, if
     * it exists.
     */
    if (registry_disabled[name]) {
      registry_log.debug("Skipping disabled pattern:", name);
      return;
    }

    var pattern = core_registry_registry.patterns[name];
    var transform = pattern.transform || ((_pattern$prototype = pattern.prototype) === null || _pattern$prototype === void 0 ? void 0 : _pattern$prototype.transform);

    if (transform) {
      try {
        transform(jquery_js_exposed_default()(content));
      } catch (e) {
        if (registry_dont_catch) {
          throw e;
        }

        registry_log.error("Transform error for pattern" + name, e);
      }
    }
  },
  initPattern: function initPattern(name, el, trigger) {
    /* Initialize the pattern with the provided name and in the context
     * of the passed in DOM element.
     */
    var $el = jquery_js_exposed_default()(el);
    var pattern = core_registry_registry.patterns[name];

    if (pattern.init) {
      var plog = core_logging.getLogger("pat." + name);

      if ($el.is(pattern.trigger)) {
        plog.debug("Initialising:", $el);

        try {
          pattern.init($el, null, trigger);
          plog.debug("done.");
        } catch (e) {
          if (registry_dont_catch) {
            throw e;
          }

          plog.error("Caught error:", e);
        }
      }
    }
  },
  orderPatterns: function orderPatterns(patterns) {
    // XXX: Bit of a hack. We need the validation pattern to be
    // parsed and initiated before the inject pattern. So we make
    // sure here, that it appears first. Not sure what would be
    // the best solution. Perhaps some kind of way to register
    // patterns "before" or "after" other patterns.
    if (patterns.includes("validation") && patterns.includes("inject")) {
      patterns.splice(patterns.indexOf("validation"), 1);
      patterns.unshift("validation");
    }

    return patterns;
  },
  scan: function scan(content, patterns, trigger) {
    if (typeof content === "string") {
      content = document.querySelector(content);
    } else if (content.jquery) {
      content = content[0];
    }

    var selectors = [];
    patterns = this.orderPatterns(patterns || Object.keys(core_registry_registry.patterns));

    var _iterator = core_registry_createForOfIteratorHelper(patterns),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var name = _step.value;
        this.transformPattern(name, content);
        var pattern = core_registry_registry.patterns[name];

        if (pattern.trigger) {
          selectors.unshift(pattern.trigger);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    var matches = src_core_dom.querySelectorAllAndMe(content, selectors.map(function (it) {
      return it.trim().replace(/,$/, "");
    }).join(","));
    matches = matches.filter(function (el) {
      // Filter out code examples wrapped in <pre> elements.
      // Also filter special class ``.cant-touch-this``
      return src_core_dom.find_parents(el, "pre").length === 0 && !el.matches(".cant-touch-this");
    }); // walk list backwards and initialize patterns inside-out.

    var _iterator2 = core_registry_createForOfIteratorHelper(matches.reverse()),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var el = _step2.value;

        var _iterator3 = core_registry_createForOfIteratorHelper(patterns),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _name = _step3.value;
            this.initPattern(_name, el, trigger);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    document.body.classList.add("patterns-loaded");
  },
  register: function register(pattern, name) {
    name = name || pattern.name;

    if (!name) {
      registry_log.error("Pattern lacks a name:", pattern);
      return false;
    }

    if (core_registry_registry.patterns[name]) {
      registry_log.error("Already have a pattern called: " + name);
      return false;
    } // register pattern to be used for scanning new content


    core_registry_registry.patterns[name] = pattern; // register pattern as jquery plugin

    if (pattern.jquery_plugin) {
      var plugin_name = ("pat-" + name).replace(/-([a-zA-Z])/g, function (match, p1) {
        return p1.toUpperCase();
      });
      jquery_js_exposed_default.a.fn[plugin_name] = src_core_utils.jqueryPlugin(pattern); // BBB 2012-12-10 and also for Mockup patterns.

      jquery_js_exposed_default.a.fn[plugin_name.replace(/^pat/, "pattern")] = jquery_js_exposed_default.a.fn[plugin_name];
    }

    registry_log.debug("Registered pattern:", name, pattern);

    if (core_registry_registry.initialized) {
      core_registry_registry.scan(document.body, [name]);
    }

    return true;
  }
};
/* harmony default export */ var src_core_registry = (core_registry_registry);
// CONCATENATED MODULE: ./node_modules/pat-tinymce/node_modules/patternslib/src/core/mockup-parser.js

var core_mockup_parser_parser = {
  getOptions: function getOptions($el, patternName, options) {
    /* This is the Mockup parser. An alternative parser for Patternslib
     * patterns.
     *
     * NOTE: Use of the Mockup parser is discouraged and is added here for
     * legacy support for the Plone Mockup project.
     *
     * It parses a DOM element for pattern configuration options.
     */
    options = options || {}; // get options from parent element first, stop if element tag name is 'body'

    if ($el.length !== 0 && !jquery_js_exposed_default.a.nodeName($el[0], "body")) {
      options = this.getOptions($el.parent(), patternName, options);
    } // collect all options from element


    var elOptions = {};

    if ($el.length !== 0) {
      elOptions = $el.data("pat-" + patternName);

      if (elOptions) {
        // parse options if string
        if (typeof elOptions === "string") {
          var tmpOptions = {};
          jquery_js_exposed_default.a.each(elOptions.split(";"), function (i, item) {
            item = item.split(":");
            item.reverse();
            var key = item.pop();
            key = key.replace(/^\s+|\s+$/g, ""); // trim

            item.reverse();
            var value = item.join(":");
            value = value.replace(/^\s+|\s+$/g, ""); // trim

            tmpOptions[key] = value;
          });
          elOptions = tmpOptions;
        }
      }
    }

    return jquery_js_exposed_default.a.extend(true, {}, options, elOptions);
  }
};
/* harmony default export */ var core_mockup_parser = (core_mockup_parser_parser);
// CONCATENATED MODULE: ./node_modules/pat-tinymce/node_modules/patternslib/src/core/base.js
/**
 * A Base pattern for creating scoped patterns. It's similar to Backbone's
 * Model class. The advantage of this approach is that each instance of a
 * pattern has its own local scope (closure).
 *
 * A new instance is created for each DOM element on which a pattern applies.
 *
 * You can assign values, such as $el, to `this` for an instance and they
 * will remain unique to that instance.
 *
 * Older Patternslib patterns on the other hand have a single global scope for
 * all DOM elements.
 */




var core_base_log = core_logging.getLogger("Patternslib Base");

var core_base_initBasePattern = function initBasePattern($el, options, trigger) {
  if (!$el.jquery) {
    $el = jquery_js_exposed_default()($el);
  }

  var name = this.prototype.name;
  var plog = core_logging.getLogger("pat.".concat(name));
  var pattern = $el.data("pattern-".concat(name));

  if (pattern === undefined && src_core_registry.patterns[name]) {
    try {
      options = this.prototype.parser === "mockup" ? core_mockup_parser.getOptions($el, name, options) : options;
      pattern = new src_core_registry.patterns[name]($el, options, trigger);
    } catch (e) {
      plog.error("Failed while initializing ".concat(name, " pattern."), e);
    }

    $el.data("pattern-".concat(name), pattern);
  }

  return pattern;
};

var core_base_Base = function Base($el, options, trigger) {
  if (!$el.jquery) {
    $el = jquery_js_exposed_default()($el);
  }

  this.$el = $el;
  this.el = $el[0];
  this.options = jquery_js_exposed_default.a.extend(true, {}, this.defaults || {}, options || {});
  this.init($el, options, trigger);
  this.emit("init");
};

core_base_Base.prototype = {
  constructor: core_base_Base,
  on: function on(eventName, eventCallback) {
    this.$el.on("".concat(eventName, ".").concat(this.name, ".patterns"), eventCallback);
  },
  emit: function emit(eventName, args) {
    // args should be a list
    if (args === undefined) {
      args = [];
    }

    this.$el.trigger("".concat(eventName, ".").concat(this.name, ".patterns"), args);
  }
};

core_base_Base.extend = function (patternProps) {
  /* Helper function to correctly set up the prototype chain for new patterns.
   */
  var parent = this;
  var child; // Check that the required configuration properties are given.

  if (!patternProps) {
    throw new Error("Pattern configuration properties required when calling Base.extend");
  } // The constructor function for the new subclass is either defined by you
  // (the "constructor" property in your `extend` definition), or defaulted
  // by us to simply call the parent's constructor.


  if (Object.hasOwnProperty.call(patternProps, "constructor")) {
    child = patternProps.constructor;
  } else {
    child = function child() {
      parent.apply(this, arguments);
    };
  } // Allow patterns to be extended indefinitely


  child.extend = core_base_Base.extend; // Static properties required by the Patternslib registry

  child.init = core_base_initBasePattern;
  child.jquery_plugin = true;
  child.trigger = patternProps.trigger;
  child.parser = (patternProps === null || patternProps === void 0 ? void 0 : patternProps.parser) || null; // Set the prototype chain to inherit from `parent`, without calling
  // `parent`'s constructor function.

  var Surrogate = function Surrogate() {
    this.constructor = child;
  };

  Surrogate.prototype = parent.prototype;
  child.prototype = new Surrogate(); // Add pattern's configuration properties (instance properties) to the subclass,

  jquery_js_exposed_default.a.extend(true, child.prototype, patternProps); // Set a convenience property in case the parent's prototype is needed
  // later.

  child.__super__ = parent.prototype; // Register the pattern in the Patternslib registry.

  if (!patternProps.name) {
    core_base_log.warn("This pattern without a name attribute will not be registered!");
  } else if (!patternProps.trigger) {
    core_base_log.warn("The pattern ".concat(patternProps.name, " does not have a trigger attribute, it will not be registered."));
  } else {
    src_core_registry.register(child, patternProps.name);
  }

  return child;
};

/* harmony default export */ var patternslib_src_core_base = (core_base_Base);
// CONCATENATED MODULE: ./node_modules/pat-tinymce/node_modules/patternslib/src/core/parser.js
function parser_typeof2(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { parser_typeof2 = function _typeof2(obj) { return typeof obj; }; } else { parser_typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return parser_typeof2(obj); }

function core_parser_createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = core_parser_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function core_parser_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return core_parser_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return core_parser_arrayLikeToArray(o, minLen); }

function core_parser_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function parser_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function parser_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function parser_createClass(Constructor, protoProps, staticProps) { if (protoProps) parser_defineProperties(Constructor.prototype, protoProps); if (staticProps) parser_defineProperties(Constructor, staticProps); return Constructor; }

// Patterns argument parser




var core_parser_ArgumentParser = /*#__PURE__*/function () {
  function ArgumentParser(name) {
    parser_classCallCheck(this, ArgumentParser);

    this.order = [];
    this.parameters = {};
    this.attribute = "data-pat-" + name;
    this.enum_values = {};
    this.enum_conflicts = [];
    this.groups = {};
    this.possible_groups = {};
    this.log = core_logging.getLogger(name + ".parser");
    this.group_pattern = /([a-z][a-z0-9]*)-([A-Z][a-z0-0\-]*)/i;
    this.json_param_pattern = /^\s*{/i;
    this.named_param_pattern = /^\s*([a-z][a-z0-9\-]*)\s*:(.*)/i;
    this.token_pattern = /((["']).*?(?!\\)\2)|\s*(\S+)\s*/g;
  }

  parser_createClass(ArgumentParser, [{
    key: "_camelCase",
    value: function _camelCase(str) {
      return str.replace(/\-([a-z])/g, function (__, p1) {
        return p1.toUpperCase();
      });
    }
  }, {
    key: "addAlias",
    value: function addAlias(alias, original) {
      /* Add an alias for a previously added parser argument.
       *
       * Useful when you want to support both US and UK english argument
       * names.
       */
      if (this.parameters[original]) {
        this.parameters[original].alias = alias;
      } else {
        throw 'Attempted to add an alias "' + alias + '" for a non-existing parser argument "' + original + '".';
      }
    }
  }, {
    key: "addGroupToSpec",
    value: function addGroupToSpec(spec) {
      /* Determine wether an argument being parsed can be grouped and
       * update its specifications object accordingly.
       *
       * Internal method used by addArgument and addJSONArgument
       */
      var m = spec.name.match(this.group_pattern);

      if (m) {
        var group = m[1];
        var field = m[2];

        if (group in this.possible_groups) {
          var first_spec = this.possible_groups[group];
          var first_name = first_spec.name.match(this.group_pattern)[2];
          first_spec.group = group;
          first_spec.dest = first_name;
          this.groups[group] = new ArgumentParser();
          this.groups[group].addArgument(first_name, first_spec.value, first_spec.choices, first_spec.multiple);
          delete this.possible_groups[group];
        }

        if (group in this.groups) {
          this.groups[group].addArgument(field, spec.value, spec.choices, spec.multiple);
          spec.group = group;
          spec.dest = field;
        } else {
          this.possible_groups[group] = spec;
          spec.dest = this._camelCase(spec.name);
        }
      }

      return spec;
    }
  }, {
    key: "addJSONArgument",
    value: function addJSONArgument(name, default_value) {
      /* Add an argument where the value is provided in JSON format.
       *
       * This is a different usecase than specifying all arguments to
       * the data-pat-... attributes in JSON format, and instead is part
       * of the normal notation except that a value is in JSON instead of
       * for example a string.
       */
      this.order.push(name);
      this.parameters[name] = this.addGroupToSpec({
        name: name,
        value: default_value,
        dest: name,
        group: null,
        type: "json"
      });
    }
  }, {
    key: "addArgument",
    value: function addArgument(name, default_value, choices, multiple) {
      var spec = {
        name: name,
        value: multiple && !Array.isArray(default_value) ? [default_value] : default_value,
        multiple: multiple,
        dest: name,
        group: null
      };

      if (choices && Array.isArray(choices) && choices.length) {
        spec.choices = choices;
        spec.type = this._typeof(choices[0]);

        var _iterator = core_parser_createForOfIteratorHelper(choices),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var choice = _step.value;

            if (this.enum_conflicts.indexOf(choice) !== -1) {
              continue;
            } else if (choice in this.enum_values) {
              this.enum_conflicts.push(choice);
              delete this.enum_values[choice];
            } else {
              this.enum_values[choice] = name;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } else if (typeof spec.value === "string" && spec.value.slice(0, 1) === "$") {
        spec.type = this.parameters[spec.value.slice(1)].type;
      } else {
        // Note that this will get reset by _defaults if default_value is a function.
        spec.type = this._typeof(multiple ? spec.value[0] : spec.value);
      }

      this.order.push(name);
      this.parameters[name] = this.addGroupToSpec(spec);
    }
  }, {
    key: "_typeof",
    value: function _typeof(obj) {
      if (obj === null) {
        return "null";
      }

      return parser_typeof2(obj);
    }
  }, {
    key: "_coerce",
    value: function _coerce(name, value) {
      var spec = this.parameters[name];
      if (parser_typeof2(value) !== spec.type) try {
        switch (spec.type) {
          case "json":
            value = JSON.parse(value);
            break;

          case "boolean":
            if (typeof value === "string") {
              value = value.toLowerCase();
              var num = parseInt(value, 10);
              if (!isNaN(num)) value = !!num;else value = value === "true" || value === "y" || value === "yes" || value === "y";
            } else if (typeof value === "number") {
              value = !!value;
            } else {
              throw "Cannot convert value for " + name + " to boolean";
            }

            break;

          case "number":
            if (typeof value === "string") {
              value = parseInt(value, 10);

              if (isNaN(value)) {
                throw "Cannot convert value for " + name + " to number";
              }
            } else if (typeof value === "boolean") {
              value = value + 0;
            } else {
              throw "Cannot convert value for " + name + " to number";
            }

            break;

          case "string":
            value = value.toString();
            break;

          case "null": // Missing default values

          case "undefined":
            break;

          default:
            throw "Do not know how to convert value for " + name + " to " + spec.type;
        }
      } catch (e) {
        this.log.warn(e);
        return null;
      }

      if (spec.choices && spec.choices.indexOf(value) === -1) {
        this.log.warn("Illegal value for " + name + ": " + value);
        return null;
      }

      return value;
    }
  }, {
    key: "_set",
    value: function _set(opts, name, value) {
      if (!(name in this.parameters)) {
        this.log.debug("Ignoring value for unknown argument " + name);
        return;
      }

      var spec = this.parameters[name];
      var parts;

      if (spec.multiple) {
        if (typeof value === "string") {
          parts = value.split(/,+/);
        } else {
          parts = value;
        }

        value = [];

        var _iterator2 = core_parser_createForOfIteratorHelper(parts),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var part = _step2.value;

            var v = this._coerce(name, part.trim());

            if (v !== null) {
              value.push(v);
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      } else {
        value = this._coerce(name, value);

        if (value === null) {
          return;
        }
      }

      opts[name] = value;
    }
  }, {
    key: "_split",
    value: function _split(text) {
      var tokens = [];
      text.replace(this.token_pattern, function (match, quoted, __, simple) {
        if (quoted) {
          tokens.push(quoted);
        } else if (simple) {
          tokens.push(simple);
        }
      });
      return tokens;
    }
  }, {
    key: "_parseExtendedNotation",
    value: function _parseExtendedNotation(argstring) {
      var _this = this;

      var opts = {};
      var parts = argstring.replace(/;;/g, "\0x1f").replace(/&amp;/g, "&amp\0x1f").split(/;/).map(function (el) {
        return el.replace(new RegExp("\0x1f", "g"), ";");
      });

      var _iterator3 = core_parser_createForOfIteratorHelper(parts),
          _step3;

      try {
        var _loop = function _loop() {
          var part = _step3.value;

          if (!part) {
            return "continue";
          }

          var matches = part.match(_this.named_param_pattern);

          if (!matches) {
            _this.log.warn("Invalid parameter: " + part + ": " + argstring);

            return "continue";
          }

          var name = matches[1];
          var value = matches[2].trim();
          var arg = Object.values(_this.parameters).filter(function (it) {
            return it.alias === name;
          });
          var is_alias = arg.length === 1;

          if (is_alias) {
            _this._set(opts, arg[0].name, value);
          } else if (name in _this.parameters) {
            _this._set(opts, name, value);
          } else if (name in _this.groups) {
            var subopt = _this.groups[name]._parseShorthandNotation(value);

            for (var field in subopt) {
              _this._set(opts, name + "-" + field, subopt[field]);
            }
          } else {
            _this.log.warn("Unknown named parameter " + matches[1]);

            return "continue";
          }
        };

        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _ret = _loop();

          if (_ret === "continue") continue;
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return opts;
    }
  }, {
    key: "_parseShorthandNotation",
    value: function _parseShorthandNotation(parameter) {
      var parts = this._split(parameter);

      var opts = {};
      var i = 0;

      while (parts.length) {
        var part = parts.shift().trim();
        var sense = void 0;
        var flag = void 0;
        var positional = true;

        if (part.slice(0, 3) === "no-") {
          sense = false;
          flag = part.slice(3);
        } else {
          sense = true;
          flag = part;
        }

        if (flag in this.parameters && this.parameters[flag].type === "boolean") {
          positional = false;

          this._set(opts, flag, sense);
        } else if (flag in this.enum_values) {
          positional = false;

          this._set(opts, this.enum_values[flag], flag);
        } else if (positional) this._set(opts, this.order[i], part);else {
          parts.unshift(part);
          break;
        }

        i++;

        if (i >= this.order.length) {
          break;
        }
      }

      if (parts.length) this.log.warn("Ignore extra arguments: " + parts.join(" "));
      return opts;
    }
  }, {
    key: "_parse",
    value: function _parse(parameter) {
      if (!parameter) {
        return {};
      }

      if (parameter.match(this.json_param_pattern)) {
        try {
          return JSON.parse(parameter);
        } catch (e) {
          this.log.warn("Invalid JSON argument found: " + parameter);
        }
      }

      if (parameter.match(this.named_param_pattern)) {
        return this._parseExtendedNotation(parameter);
      }

      var sep = parameter.indexOf(";");

      if (sep === -1) {
        return this._parseShorthandNotation(parameter);
      }

      var opts = this._parseShorthandNotation(parameter.slice(0, sep));

      var extended = this._parseExtendedNotation(parameter.slice(sep + 1));

      for (var name in extended) {
        opts[name] = extended[name];
      }

      return opts;
    }
  }, {
    key: "_defaults",
    value: function _defaults($el) {
      var result = {};

      for (var name in this.parameters) {
        if (typeof this.parameters[name].value === "function") try {
          result[name] = this.parameters[name].value($el, name);
          this.parameters[name].type = parser_typeof2(result[name]);
        } catch (e) {
          this.log.error("Default function for " + name + " failed.");
        } else result[name] = this.parameters[name].value;
      }

      return result;
    }
  }, {
    key: "_cleanupOptions",
    value: function _cleanupOptions(options) {
      // Resolve references
      for (var _i = 0, _Object$keys = Object.keys(options); _i < _Object$keys.length; _i++) {
        var name = _Object$keys[_i];
        var spec = this.parameters[name];
        if (spec === undefined) continue;
        if (options[name] === spec.value && typeof spec.value === "string" && spec.value.slice(0, 1) === "$") options[name] = options[spec.value.slice(1)];
      } // Move options into groups and do renames


      for (var _i2 = 0, _Object$keys2 = Object.keys(options); _i2 < _Object$keys2.length; _i2++) {
        var _name = _Object$keys2[_i2];
        var _spec = this.parameters[_name];
        var target = void 0;
        if (_spec === undefined) continue;

        if (_spec.group) {
          if (parser_typeof2(options[_spec.group]) !== "object") options[_spec.group] = {};
          target = options[_spec.group];
        } else {
          target = options;
        }

        if (_spec.dest !== _name) {
          target[_spec.dest] = options[_name];
          delete options[_name];
        }
      }

      return options;
    }
  }, {
    key: "parse",
    value: function parse($el, options, multiple, inherit) {
      if (!$el.jquery) {
        $el = jquery_js_exposed_default()($el);
      }

      if (typeof options === "boolean" && multiple === undefined) {
        // Fix argument order: ``multiple`` passed instead of ``options``.
        multiple = options;
        options = {};
      }

      inherit = inherit !== false;
      var stack = inherit ? [[this._defaults($el)]] : [[{}]];
      var $possible_config_providers;
      var final_length = 1;
      /*
       * XXX this is a workaround for:
       * - https://github.com/Patternslib/Patterns/issues/393
       *
       * Prevents the parser to pollute the pat-modal configuration
       * with data-pat-inject elements define in a `.pat-modal` parent element.
       *
       *  Probably this function should be completely revisited, see:
       * - https://github.com/Patternslib/Patterns/issues/627
       *
       */

      if (!inherit || $el.hasClass("pat-modal") && this.attribute === "data-pat-inject") {
        $possible_config_providers = $el;
      } else {
        $possible_config_providers = $el.parents("[" + this.attribute + "]").addBack();
      }

      var _iterator4 = core_parser_createForOfIteratorHelper($possible_config_providers),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var provider = _step4.value;
          var frame = void 0;
          var data = jquery_js_exposed_default()(provider).attr(this.attribute);

          if (!data) {
            continue;
          }

          var _parse = this._parse.bind(this);

          if (data.match(/&&/)) {
            frame = data.split(/\s*&&\s*/).map(_parse);
          } else {
            frame = [_parse(data)];
          }

          final_length = Math.max(frame.length, final_length);
          stack.push(frame);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      if (parser_typeof2(options) === "object") {
        if (Array.isArray(options)) {
          stack.push(options);
          final_length = Math.max(options.length, final_length);
        } else stack.push([options]);
      }

      if (!multiple) {
        final_length = 1;
      }

      var results = src_core_utils.removeDuplicateObjects(src_core_utils.mergeStack(stack, final_length)).map(this._cleanupOptions.bind(this));
      return multiple ? results : results[0];
    }
  }]);

  return ArgumentParser;
}(); // BBB


core_parser_ArgumentParser.prototype.add_argument = core_parser_ArgumentParser.prototype.addArgument;
/* harmony default export */ var src_core_parser = (core_parser_ArgumentParser);
// CONCATENATED MODULE: ./node_modules/pat-tinymce/src/tinymce.js
function tinymce_createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = tinymce_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function tinymce_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return tinymce_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return tinymce_arrayLikeToArray(o, minLen); }

function tinymce_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function tinymce_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function tinymce_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { tinymce_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { tinymce_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

 // needed for ``await`` support



var plugin_map = {
  advlist: {
    deps: ["lists"]
  },
  anchor: {},
  autolink: {},
  autoresize: {},
  autosave: {},
  bbcode: {},
  charmap: {},
  code: {},
  codesample: {},
  //colorpicker: {}, // is now in core
  //contextmenu: {}, // is now in core
  directionality: {},
  emoticons: {
    extra_imports: ["js/emojiimages"]
  },
  fullpage: {},
  fullscreen: {},
  help: {},
  hr: {},
  //"image": {},
  //"imagetools": {},
  //"importcss": {},
  insertdatetime: {},
  //"legacyoutput": {}, // If included we're in HTML 3 compatibility mode.
  link: {},
  lists: {},
  media: {},
  nonbreaking: {},
  noneditable: {},
  pagebreak: {},
  paste: {},
  preview: {},
  print: {},
  //"quickbars": {},
  save: {},
  searchreplace: {},
  //"spellchecker": {},
  tabfocus: {},
  table: {},
  //"template": {},
  //textcolor: {}, // is now in core
  //"textpattern": {},
  toc: {},
  visualblocks: {},
  visualchars: {},
  wordcount: {}
};
var tinymce_parser = new src_core_parser("tinymce");
tinymce_parser.addArgument("inline", false);
tinymce_parser.addArgument("content-css", false);
tinymce_parser.add_argument("plugins", Object.keys(plugin_map), Object.keys(plugin_map), true);
/* harmony default export */ var tinymce = (patternslib_src_core_base.extend({
  name: "tinymce",
  trigger: ".pat-tinymce",
  plugins: {},
  init: function init() {
    var _this = this;

    return tinymce_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var TinyMCE, content_css_cors, _iterator, _step, plugin, plugin_dependencies, _iterator2, _step2, dep, _iterator3, _step3, imp, config;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this.options = tinymce_parser.parse(_this.el, _this.options);
              _context.next = 3;
              return __webpack_require__.e(/* import() */ 149).then(__webpack_require__.t.bind(null, 654, 7));

            case 3:
              TinyMCE = _context.sent;
              TinyMCE = TinyMCE.default; // UI, design, skin

              __webpack_require__.e(/* import() */ 172).then(__webpack_require__.t.bind(null, 655, 7));
              __webpack_require__.e(/* import() */ 173).then(__webpack_require__.t.bind(null, 656, 7));
              __webpack_require__.e(/* import() */ 166).then(__webpack_require__.t.bind(null, 657, 7));
              content_css_cors = false;

              if (!_this.options.inline && !_this.options.contentCss) {
                // In <iframe> mode and no content CSS load the default.
                // We're loading from a CDN to have it in reach for TinyMCE as
                // Webpack bundling makes it unavailable otherwise.
                _this.options.contentCss = "https://cdnjs.cloudflare.com/ajax/libs/tinymce/5.6.2/skins/content/default/content.min.css";
                content_css_cors = true;
              }

              _this.tinyel = _this.el;

              if (_this.options.inline && ["textarea", "input"].includes(_this.el.nodeName.toLowerCase())) {
                _this.tinyel = document.createElement("div");

                _this.tinyel.setAttribute("contenteditable", "");

                _this.tinyel.innerHTML = _this.el.value;

                _this.el.parentNode.insertBefore(_this.tinyel, _this.el);

                _this.el.setAttribute("hidden", "");
              } // load plugins


              _iterator = tinymce_createForOfIteratorHelper(_this.options.plugins);
              _context.prev = 13;

              _iterator.s();

            case 15:
              if ((_step = _iterator.n()).done) {
                _context.next = 27;
                break;
              }

              plugin = _step.value;
              _context.next = 19;
              return __webpack_require__(216)("./".concat(plugin));

            case 19:
              _this.plugins[plugin] = _context.sent;
              plugin_dependencies = plugin_map[plugin].deps || [];
              _iterator2 = tinymce_createForOfIteratorHelper(plugin_dependencies);

              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                  dep = _step2.value;

                  if (!_this.options.plugins.includes(dep)) {
                    // Extend the options with necessary plugin dependencies,
                    // if they are not yet in.
                    _this.options.plugins.push(dep);
                  }
                } // Extra imports

              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }

              _iterator3 = tinymce_createForOfIteratorHelper(plugin_map[plugin].extra_imports || []);

              try {
                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                  imp = _step3.value;
                  // Extra imports need to be relative to the plugin base folder
                  __webpack_require__(216)("./".concat(plugin, "/").concat(imp));
                }
              } catch (err) {
                _iterator3.e(err);
              } finally {
                _iterator3.f();
              }

            case 25:
              _context.next = 15;
              break;

            case 27:
              _context.next = 32;
              break;

            case 29:
              _context.prev = 29;
              _context.t0 = _context["catch"](13);

              _iterator.e(_context.t0);

            case 32:
              _context.prev = 32;

              _iterator.f();

              return _context.finish(32);

            case 35:
              config = {
                target: _this.tinyel,
                skin: false,
                inline: _this.options.inline,
                content_css: _this.options.contentCss,
                content_css_cors: content_css_cors,
                plugins: _this.options.plugins.join(" ")
              };
              _context.next = 38;
              return TinyMCE.init(config);

            case 38:
              _this.tinymce = _context.sent;
              // apparently it's returning the editor wrapped in a list
              _this.tinymce = _this.tinymce[0];

              if (_this.tinyel !== _this.el) {
                // Update <textarea> or <input>, if one of these were the
                // initializing elements.
                _this.tinymce.on("input", function () {
                  //this.el.value = this.tinymce.getContent();
                  // TODO: in inline mode `getContent` and source view seem to be
                  // broken.
                  _this.el.value = _this.tinyel.innerHTML;
                });
              }

            case 41:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[13, 29, 32, 35]]);
    }))();
  },
  destroy: function destroy() {
    if (this.tinymce) {
      if (this.tinyel !== this.el) {
        // destroy also inline editable
        // save back first.
        this.el.value = this.tinyel.innerHTML;
        this.tinyel.remove();
        this.el.removeAttribute("hidden");
      }

      this.tinymce.destroy();
      this.tinymce = null;
    }
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/autotoc/autotoc.js


/* harmony default export */ var autotoc = (core_base["a" /* default */].extend({
  name: "autotoc",
  trigger: ".pat-autotoc",
  parser: "mockup",
  defaults: {
    section: "section",
    levels: "h1,h2,h3",
    IDPrefix: "autotoc-item-",
    classTOCName: "autotoc-nav",
    classSectionName: "autotoc-section",
    classLevelPrefixName: "autotoc-level-",
    classActiveName: "active",
    scrollDuration: "slow",
    scrollEasing: "swing"
  },
  init: function init() {
    var self = this;
    self.$toc = jquery_js_exposed_default()("<nav/>").addClass(self.options.classTOCName);

    if (self.options.prependTo) {
      self.$toc.prependTo(self.options.prependTo);
    } else if (self.options.appendTo) {
      self.$toc.appendTo(self.options.appendTo);
    } else {
      self.$toc.prependTo(self.$el);
    }

    if (self.options.className) {
      self.$el.addClass(self.options.className);
    }

    jquery_js_exposed_default()(self.options.section, self.$el).addClass(self.options.classSectionName);
    var asTabs = self.$el.hasClass("autotabs");
    var activeId = null;
    jquery_js_exposed_default()(self.options.levels, self.$el).each(function (i) {
      var $level = jquery_js_exposed_default()(this),
          id = $level.prop("id") ? $level.prop("id") : $level.parents(self.options.section).prop("id");

      if (!id || jquery_js_exposed_default()("#" + id).length > 0) {
        id = self.options.IDPrefix + self.name + "-" + i;
      }

      if (window.location.hash === "#" + id) {
        activeId = id;
      }

      if (activeId === null && $level.hasClass(self.options.classActiveName)) {
        activeId = id;
      }

      $level.data("navref", id);
      jquery_js_exposed_default()("<a/>").appendTo(self.$toc).text($level.text()).attr("id", id).attr("href", "#" + id).addClass(self.options.classLevelPrefixName + self.getLevel($level)).on("click", function (e, options) {
        e.stopPropagation();
        e.preventDefault();

        if (!options) {
          options = {
            doScroll: true,
            skipHash: false
          };
        }

        var $el = jquery_js_exposed_default()(this);
        self.$toc.children("." + self.options.classActiveName).removeClass(self.options.classActiveName);
        self.$el.children("." + self.options.classActiveName).removeClass(self.options.classActiveName);
        jquery_js_exposed_default()(e.target).addClass(self.options.classActiveName);
        $level.parents(self.options.section).addClass(self.options.classActiveName);

        if (options.doScroll !== false && self.options.scrollDuration && $level && !asTabs) {
          jquery_js_exposed_default()("body,html").animate({
            scrollTop: $level.offset().top
          }, self.options.scrollDuration, self.options.scrollEasing);
        }

        if (self.$el.parents(".plone-modal").length !== 0) {
          self.$el.trigger("resize.plone-modal.patterns");
        }

        jquery_js_exposed_default()(this).trigger("clicked");

        if (!options.skipHash) {
          if (window.history && window.history.pushState) {
            window.history.pushState({}, "", "#" + $el.attr("id"));
          }
        }
      });
      $level.data("autotoc-trigger-id", id);
    });

    if (activeId) {
      jquery_js_exposed_default()("a#" + activeId).trigger("click", {
        doScroll: true,
        skipHash: true
      });
    } else {
      self.$toc.find("a").first().trigger("click", {
        doScroll: false,
        skipHash: true
      });
    }
  },
  getLevel: function getLevel($el) {
    var elementLevel = 0;
    jquery_js_exposed_default.a.each(this.options.levels.split(","), function (level, levelSelector) {
      if ($el.filter(levelSelector).length === 1) {
        elementLevel = level + 1;
        return false;
      }
    });
    return elementLevel;
  }
}));
// EXTERNAL MODULE: ./node_modules/mockup/src/pat/backdrop/backdrop.js
var backdrop = __webpack_require__(131);

// EXTERNAL MODULE: ./node_modules/patternslib/src/core/logging.js
var src_core_logging = __webpack_require__(28);

// EXTERNAL MODULE: ./node_modules/mockup/src/core/utils.js
var mockup_src_core_utils = __webpack_require__(8);

// CONCATENATED MODULE: ./node_modules/mockup/src/pat/contentloader/contentloader.js






var contentloader_log = src_core_logging["a" /* default */].getLogger("pat-contentloader");
/* harmony default export */ var contentloader = (core_base["a" /* default */].extend({
  name: "contentloader",
  trigger: ".pat-contentloader",
  parser: "mockup",
  defaults: {
    url: null,
    content: null,
    trigger: "click",
    target: null,
    template: null,
    dataType: "html"
  },
  init: function init() {
    var that = this;

    if (that.options.url === "el" && that.$el[0].tagName === "A") {
      that.options.url = that.$el.attr("href");
    }

    that.$el.removeClass("loading-content");
    that.$el.removeClass("content-load-error");

    if (that.options.trigger === "immediate") {
      that._load();
    } else {
      that.$el.on(that.options.trigger, function (e) {
        e.preventDefault();

        that._load();
      });
    }
  },
  _load: function _load() {
    var that = this;
    that.$el.addClass("loading-content");

    if (that.options.url) {
      that.loadRemote();
    } else {
      that.loadLocal();
    }
  },
  loadRemote: function loadRemote() {
    var that = this;
    jquery_js_exposed_default.a.ajax({
      url: that.options.url,
      dataType: that.options.dataType,
      success: function success(data) {
        var $el;

        if (that.options.dataType === "html") {
          if (data.indexOf("<html") !== -1) {
            data = mockup_src_core_utils["a" /* default */].parseBodyTag(data);
          }

          $el = jquery_js_exposed_default()("<div>" + data + "</div>"); // jQuery starts to search at the first child element.
        } else if (that.options.dataType.indexOf("json") !== -1) {
          // must have template defined with json
          if (data.constructor === Array && data.length === 1) {
            // normalize json if it makes sense since some json returns as array with one item
            data = data[0];
          }

          try {
            $el = jquery_js_exposed_default()(index_all["default"].template(that.options.template)(data));
          } catch (e) {
            that.$el.removeClass("loading-content");
            that.$el.addClass("content-load-error");
            contentloader_log.warn("error rendering template. pat-contentloader will not work");
            return;
          }
        }

        if (that.options.content !== null) {
          $el = $el.find(that.options.content);
        }

        that.loadLocal($el);
      },
      error: function error() {
        that.$el.removeClass("loading-content");
        that.$el.addClass("content-load-error");
      }
    });
  },
  loadLocal: function loadLocal($content) {
    var that = this;

    if (!$content && that.options.content === null) {
      that.$el.removeClass("loading-content");
      that.$el.addClass("content-load-error");
      contentloader_log.warn("No selector configured");
      return;
    }

    var $target = that.$el;

    if (that.options.target !== null) {
      $target = jquery_js_exposed_default()(that.options.target);

      if ($target.length === 0) {
        that.$el.removeClass("loading-content");
        that.$el.addClass("content-load-error");
        contentloader_log.warn("No target nodes found");
        return;
      }
    }

    if (!$content) {
      $content = jquery_js_exposed_default()(that.options.content).clone();
    }

    if ($content.length) {
      $content.show();
      $target.replaceWith($content);
      registry["a" /* default */].scan($content);
    } else {
      // empty target node instead of removing it.
      // allows for subsequent content loader calls to work sucessfully.
      $target.empty();
    }

    that.$el.removeClass("loading-content");
    that.emit("loading-done");
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/cookietrigger/cookietrigger.js


/* harmony default export */ var cookietrigger = (core_base["a" /* default */].extend({
  name: "cookietrigger",
  trigger: ".pat-cookietrigger",
  parser: "mockup",
  isCookiesEnabled: function isCookiesEnabled() {
    /* Test whether cookies are enabled by attempting to set a cookie
     * and then change its value set test cookie.
     */
    var c = "areYourCookiesEnabled=0";
    document.cookie = c;
    var dc = document.cookie; // cookie not set?  fail

    if (dc.indexOf(c) === -1) {
      return 0;
    } // change test cookie


    c = "areYourCookiesEnabled=1";
    document.cookie = c;
    dc = document.cookie; // cookie not changed?  fail

    if (dc.indexOf(c) === -1) {
      return 0;
    } // delete cookie


    document.cookie = "areYourCookiesEnabled=; expires=Thu, 01-Jan-70 00:00:01 GMT";
    return 1;
  },
  showIfCookiesDisabled: function showIfCookiesDisabled() {
    /* Show the element on which this pattern is defined if cookies are
     * disabled.
     */
    if (this.isCookiesEnabled()) {
      dom["a" /* default */].hide(this.el);
    } else {
      dom["a" /* default */].show(this.el);
    }
  },
  init: function init() {
    this.showIfCookiesDisabled();
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/datatables/datatables.js
function datatables_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function datatables_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { datatables_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { datatables_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }


 // needed for ``await`` support


/* harmony default export */ var datatables = (core_base["a" /* default */].extend({
  name: "datatables",
  trigger: ".pat-datatables",
  parser: "mockup",
  table: null,
  defaults: {// Default values for attributes
  },
  init: function init() {
    var _this = this;

    return datatables_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return __webpack_require__.e(/* import() */ 0).then(__webpack_require__.t.bind(null, 599, 7));

            case 2:
              _context.next = 4;
              return Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(180)]).then(__webpack_require__.t.bind(null, 600, 7));

            case 4:
              _context.next = 6;
              return Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(13)]).then(__webpack_require__.t.bind(null, 601, 7));

            case 6:
              _context.next = 8;
              return Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(13), __webpack_require__.e(168)]).then(__webpack_require__.t.bind(null, 658, 7));

            case 8:
              _context.next = 10;
              return Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(13), __webpack_require__.e(181)]).then(__webpack_require__.t.bind(null, 659, 7));

            case 10:
              _context.next = 12;
              return Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(13), __webpack_require__.e(182)]).then(__webpack_require__.t.bind(null, 660, 7));

            case 12:
              _context.next = 14;
              return Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(13), __webpack_require__.e(183)]).then(__webpack_require__.t.bind(null, 661, 7));

            case 14:
              _context.next = 16;
              return Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(59)]).then(__webpack_require__.t.bind(null, 622, 7));

            case 16:
              _context.next = 18;
              return Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(59), __webpack_require__.e(169)]).then(__webpack_require__.t.bind(null, 662, 7));

            case 18:
              _context.next = 20;
              return Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(60)]).then(__webpack_require__.t.bind(null, 623, 7));

            case 20:
              _context.next = 22;
              return Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(60), __webpack_require__.e(170)]).then(__webpack_require__.t.bind(null, 663, 7));

            case 22:
              _context.next = 24;
              return Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(184)]).then(__webpack_require__.t.bind(null, 605, 7));

            case 24:
              _context.next = 26;
              return Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(150)]).then(__webpack_require__.t.bind(null, 664, 7));

            case 26:
              _context.next = 28;
              return Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(185)]).then(__webpack_require__.t.bind(null, 606, 7));

            case 28:
              _context.next = 30;
              return Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(151)]).then(__webpack_require__.t.bind(null, 665, 7));

            case 30:
              _context.next = 32;
              return Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(61)]).then(__webpack_require__.t.bind(null, 624, 7));

            case 32:
              _context.next = 34;
              return Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(61), __webpack_require__.e(171)]).then(__webpack_require__.t.bind(null, 666, 7));

            case 34:
              jquery_js_exposed_default()(_this.el).DataTable(_this.options);

            case 35:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  }
}));
// EXTERNAL MODULE: ./node_modules/mockup/src/core/i18n-wrapper.js
var i18n_wrapper = __webpack_require__(3);

// CONCATENATED MODULE: ./node_modules/mockup/src/pat/pickadate/pickadate.js
function pickadate_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function pickadate_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { pickadate_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { pickadate_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

 // needed for ``await`` support






/* harmony default export */ var pickadate = (core_base["a" /* default */].extend({
  name: "pickadate",
  trigger: ".pat-pickadate",
  parser: "mockup",
  defaults: {
    separator: " ",
    date: {
      selectYears: true,
      selectMonths: true,
      formatSubmit: "yyyy-mm-dd",
      format: "yyyy-mm-dd",
      labelMonthNext: Object(i18n_wrapper["a" /* default */])("Next month"),
      labelMonthPrev: Object(i18n_wrapper["a" /* default */])("Previous month"),
      labelMonthSelect: Object(i18n_wrapper["a" /* default */])("Select a month"),
      labelYearSelect: Object(i18n_wrapper["a" /* default */])("Select a year"),
      // hide buttons
      clear: false,
      close: false,
      today: false
    },
    time: {
      clear: false // hide button

    },
    today: Object(i18n_wrapper["a" /* default */])("Today"),
    clear: Object(i18n_wrapper["a" /* default */])("Clear"),
    timezone: null,
    autoSetTimeOnDateChange: "+[0,0]",
    classWrapperName: "pattern-pickadate-wrapper",
    classSeparatorName: "pattern-pickadate-separator",
    classDateName: "pattern-pickadate-date",
    classDateWrapperName: "pattern-pickadate-date-wrapper",
    classTimeName: "pattern-pickadate-time",
    classTimeWrapperName: "pattern-pickadate-time-wrapper",
    classTimezoneName: "pattern-pickadate-timezone",
    classTimezoneWrapperName: "pattern-pickadate-timezone-wrapper",
    classClearName: "pattern-pickadate-clear",
    classNowName: "pattern-pickadate-now",
    placeholderDate: Object(i18n_wrapper["a" /* default */])("Enter date..."),
    placeholderTime: Object(i18n_wrapper["a" /* default */])("Enter time..."),
    placeholderTimezone: Object(i18n_wrapper["a" /* default */])("Enter timezone...")
  },
  parseTimeOffset: function parseTimeOffset(timeOffset) {
    var op = undefined;

    if (timeOffset.indexOf("+") === 0) {
      op = "+";
      timeOffset = timeOffset.split("+")[1];
    } else if (timeOffset.indexOf("-") === 0) {
      op = "-";
      timeOffset = timeOffset.split("-")[1];
    }

    try {
      timeOffset = JSON.parse(timeOffset);
    } catch (e) {
      timeOffset = undefined;
    }

    if (timeOffset === false) {
      return false;
    } else if (timeOffset === true || Array.isArray(timeOffset) !== true) {
      return [0, 0];
    }

    var hours = parseInt(timeOffset[0], 10) || 0,
        mins = parseInt(timeOffset[1], 10) || 0;

    if (op === "+" || op === "-") {
      var offset = new Date(),
          curHours = offset.getHours(),
          curMins = offset.getMinutes();

      if (op === "+") {
        hours = curHours + hours;

        if (hours > 23) {
          hours = 23;
        }

        mins = curMins + mins;

        if (mins > 59) {
          mins = 59;
        }
      } else if (op === "-") {
        hours = curHours - hours;

        if (hours < 0) {
          hours = 0;
        }

        mins = curMins - mins;

        if (mins < 0) {
          mins = 0;
        }
      }
    }

    return [hours, mins];
  },
  init: function () {
    var _init = pickadate_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var self, value, dateValue, timeValue, PatternSelect2, defaultTimezone, isInList;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              __webpack_require__.e(/* import() */ 154).then(__webpack_require__.t.bind(null, 667, 7));
              __webpack_require__.e(/* import() */ 155).then(__webpack_require__.t.bind(null, 668, 7));
              __webpack_require__.e(/* import() */ 156).then(__webpack_require__.t.bind(null, 669, 7));
              _context.next = 5;
              return __webpack_require__.e(/* import() */ 58).then(__webpack_require__.t.bind(null, 607, 7));

            case 5:
              _context.next = 7;
              return Promise.all(/* import() */[__webpack_require__.e(58), __webpack_require__.e(187)]).then(__webpack_require__.t.bind(null, 670, 7));

            case 7:
              _context.next = 9;
              return Promise.all(/* import() */[__webpack_require__.e(58), __webpack_require__.e(188)]).then(__webpack_require__.t.bind(null, 671, 7));

            case 9:
              self = this, value = self.$el.val().split(" "), dateValue = value[0] || "", timeValue = value[1] || "";

              if (mockup_src_core_utils["a" /* default */].bool(self.options.date) === false) {
                self.options.date = false;
              }

              if (mockup_src_core_utils["a" /* default */].bool(self.options.time) === false) {
                self.options.time = false;
              }

              self.options.autoSetTimeOnDateChange = self.parseTimeOffset(self.options.autoSetTimeOnDateChange);

              if (self.options.date === false) {
                timeValue = value[0];
              }

              dom["a" /* default */].hide(self.$el[0]);
              self.$wrapper = jquery_js_exposed_default()("<div/>").addClass(self.options.classWrapperName).insertAfter(self.$el);

              if (self.options.date !== false) {
                self.$date = jquery_js_exposed_default()('<input type="text"/>').attr("placeholder", self.options.placeholderDate).attr("data-value", dateValue).addClass(self.options.classDateName).appendTo(jquery_js_exposed_default()("<div/>").addClass(self.options.classDateWrapperName).appendTo(self.$wrapper)).pickadate(jquery_js_exposed_default.a.extend(true, {}, self.options.date, {
                  onSet: function onSet(e) {
                    if (e.select !== undefined) {
                      self.$date.attr("data-value", e.select);

                      if (self.options.autoSetTimeOnDateChange !== false && self.$time) {
                        if (!self.$time.pickatime("picker").get("select")) {
                          self.$time.pickatime("picker").set("select", self.options.autoSetTimeOnDateChange);
                        }
                      }

                      if (self.options.time === false || self.$time.attr("data-value") !== "") {
                        self.updateValue.call(self);
                      }
                    }

                    if (e.hasOwnProperty("clear")) {
                      self.$el.val("");
                      self.$date.attr("data-value", "");
                    }
                  }
                }));
              }

              if (self.options.time !== false) {
                self.options.time.formatSubmit = "HH:i";
                self.$time = jquery_js_exposed_default()('<input type="text"/>').attr("placeholder", self.options.placeholderTime).attr("data-value", timeValue).addClass(self.options.classTimeName).appendTo(jquery_js_exposed_default()("<div/>").addClass(self.options.classTimeWrapperName).appendTo(self.$wrapper)).pickatime(jquery_js_exposed_default.a.extend(true, {}, self.options.time, {
                  onSet: function onSet(e) {
                    if (e.select !== undefined) {
                      self.$time.attr("data-value", e.select);

                      if (self.options.date === false || self.$date.attr("data-value") !== "") {
                        self.updateValue.call(self);
                      }
                    }

                    if (e.hasOwnProperty("clear")) {
                      self.$el.val("");
                      self.$time.attr("data-value", "");
                    }
                  }
                })); // XXX: bug in pickatime
                // work around pickadate bug loading 00:xx as value

                if (typeof timeValue === "string" && timeValue.substring(0, 2) === "00") {
                  self.$time.pickatime("picker").set("select", timeValue.split(":"));
                  self.$time.attr("data-value", timeValue);
                }
              }

              if (self.options.date !== false && self.options.time !== false && self.options.timezone) {
                self.$separator = jquery_js_exposed_default()("<span/>").addClass(self.options.classSeparatorName).html(self.options.separator === " " ? "&nbsp;" : self.options.separator).appendTo(self.$wrapper);
              }

              if (!(self.options.timezone !== null)) {
                _context.next = 30;
                break;
              }

              self.$timezone = jquery_js_exposed_default()('<input type="text"/>').addClass(self.options.classTimezoneName).appendTo(jquery_js_exposed_default()("<div/>").addClass(self.options.classTimezoneWrapperName).appendTo(self.$wrapper));
              _context.next = 23;
              return Promise.resolve(/* import() */).then(__webpack_require__.bind(null, 52));

            case 23:
              PatternSelect2 = _context.sent;
              PatternSelect2 = PatternSelect2.default;
              new PatternSelect2(self.$timezone, jquery_js_exposed_default.a.extend(true, {
                placeholder: self.options.placeholderTimezone,
                width: "10em"
              }, self.options.timezone, {
                multiple: false
              }));
              self.$timezone.on("change", function (e) {
                if (e.val !== undefined) {
                  self.$timezone.attr("data-value", e.val);

                  if ((self.options.date === false || self.$date.attr("data-value") !== "") && (self.options.time === false || self.$time.attr("data-value") !== "")) {
                    self.updateValue.call(self);
                  }
                }
              });
              defaultTimezone = self.options.timezone.default; // if timezone has a default value included

              if (defaultTimezone) {
                // the timezone list contains the default value
                self.options.timezone.data.some(function (obj) {
                  isInList = obj.text === self.options.timezone.default ? true : false;
                  return isInList;
                });

                if (isInList) {
                  self.$timezone.attr("data-value", defaultTimezone);
                  self.$timezone.parent().find(".select2-chosen").text(defaultTimezone);
                }
              } // if data contains only one timezone this value will be chosen
              // and the timezone dropdown list will be disabled and


              if (self.options.timezone.data.length === 1) {
                self.$timezone.attr("data-value", self.options.timezone.data[0].text);
                self.$timezone.parent().find(".select2-chosen").text(self.options.timezone.data[0].text);
                self.$timezone.select2("enable", false);
              }

            case 30:
              if (mockup_src_core_utils["a" /* default */].bool(self.options.today)) {
                self.$now = jquery_js_exposed_default()('<button type="button" class="btn btn-xs btn-info" title="' + self.options.today + '"><span class="glyphicon glyphicon-time"></span></button>').addClass(self.options.classNowName).on("click", function (e) {
                  e.preventDefault();
                  var now = new Date();

                  if (self.$date) {
                    self.$date.data("pickadate").set("select", now);
                  }

                  if (self.$time) {
                    self.$time.data("pickatime").set("select", now);
                  }

                  self.emit("updated");
                }).appendTo(self.$wrapper);
              }

              if (mockup_src_core_utils["a" /* default */].bool(self.options.clear)) {
                self.$clear = jquery_js_exposed_default()('<button type="button" class="btn btn-xs btn-danger" title="' + self.options.clear + '"><span class="glyphicon glyphicon-trash"></span></button>').addClass(self.options.classClearName).on("click", function (e) {
                  e.preventDefault();

                  if (self.$date) {
                    self.$date.data("pickadate").clear();
                  }

                  if (self.$time) {
                    self.$time.data("pickatime").clear();
                  }

                  self.emit("updated");
                }).appendTo(self.$wrapper);
              }

            case 32:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function init() {
      return _init.apply(this, arguments);
    }

    return init;
  }(),
  updateValue: function updateValue() {
    var self = this,
        value = "";

    if (self.options.date !== false) {
      var date = self.$date.data("pickadate").component,
          dateValue = self.$date.data("pickadate").get("select"),
          formatDate = date.formats.toString;

      if (dateValue) {
        value += formatDate.apply(date, [self.options.date.formatSubmit, dateValue]);
      }
    }

    if (self.options.date !== false && self.options.time !== false) {
      value += " ";
    }

    if (self.options.time !== false) {
      var time = self.$time.data("pickatime").component,
          timeValue = self.$time.data("pickatime").get("select"),
          formatTime = time.formats.toString;

      if (timeValue) {
        value += formatTime.apply(time, ["HH:i", timeValue]);
      }
    }

    if (self.options.timezone !== null) {
      var timezone = " " + self.$timezone.attr("data-value");

      if (timezone) {
        value += timezone;
      }
    }

    self.$el.val(value);
    self.emit("updated");
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/eventedit/eventedit.js



/* harmony default export */ var eventedit = (core_base["a" /* default */].extend({
  name: "eventedit",
  trigger: ".pat-eventedit",
  parser: "mockup",
  defaults: {
    errorClass: "error"
  },
  init: function init() {
    var self = this,
        $el = self.$el,
        jq_open_end,
        jq_end,
        jq_start;
    var jq_whole_day, jq_time;
    jq_whole_day = self.aOrB(jquery_js_exposed_default()("#formfield-form-widgets-IEventBasic-whole_day input", $el), jquery_js_exposed_default()("#archetypes-fieldname-wholeDay input#wholeDay", $el));
    jq_time = self.aOrB(jquery_js_exposed_default()("#formfield-form-widgets-IEventBasic-start .pattern-pickadate-time-wrapper, #formfield-form-widgets-IEventBasic-end .pattern-pickadate-time-wrapper", $el), jquery_js_exposed_default()("#archetypes-fieldname-startDate .pattern-pickadate-time-wrapper, #archetypes-fieldname-endDate .pattern-pickadate-time-wrapper", $el));

    if (jq_whole_day.length > 0 && jq_time.length > 0) {
      jq_whole_day.bind("change", function (e) {
        self.showHideWidget(jq_time, e.target.checked, true);
      });
      self.showHideWidget(jq_time, jq_whole_day.get(0).checked, false);
    } // OPEN END INIT


    jq_open_end = self.aOrB(jquery_js_exposed_default()("#formfield-form-widgets-IEventBasic-open_end input", $el), jquery_js_exposed_default()("#archetypes-fieldname-openEnd input#openEnd", $el));
    jq_end = self.aOrB(jquery_js_exposed_default()("#formfield-form-widgets-IEventBasic-end", $el), jquery_js_exposed_default()("#archetypes-fieldname-endDate", $el));

    if (jq_open_end.length > 0) {
      jq_open_end.bind("change", function (e) {
        self.showHideWidget(jq_end, e.target.checked, true);
      });
      self.showHideWidget(jq_end, jq_open_end.get(0).checked, false);
    } // START/END SETTING/VALIDATION


    jq_start = self.aOrB(jquery_js_exposed_default()("#formfield-form-widgets-IEventBasic-start", $el), jquery_js_exposed_default()("#archetypes-fieldname-startDate", $el));
    jq_start.each(function () {
      jquery_js_exposed_default()(this).on("change", ".picker__input", function () {
        self.updateEndDate();
      });
    });
    jq_end.each(function () {
      jquery_js_exposed_default()(this).on("change", ".picker__input", function () {
        self.validateEndDate();
      });
    });
  },
  aOrB: function aOrB(a, b) {
    /* Return element a or element b, depending on which is available.
     * Parameter a and b: CSS selectors.
     * Returns: a jQuery object.
     */
    var ret;

    if (jquery_js_exposed_default()(a).length > 0) {
      ret = a;
    } else {
      ret = b;
    }

    return jquery_js_exposed_default()(ret);
  },
  getDateTime: function getDateTime(datetimewidget) {
    var date, time, datetime;
    date = jquery_js_exposed_default()('.pattern-pickadate-date-wrapper input[name="_submit"]', datetimewidget).prop("value");
    date = date.split("-");
    time = jquery_js_exposed_default()('.pattern-pickadate-time-wrapper input[name="_submit"]', datetimewidget).prop("value") || "00:00";
    time = time.split(":"); // We can't just parse the ``date + 'T' + time`` string, because of
    // Chromium bug: https://code.google.com/p/chromium/issues/detail?id=145198
    // When passing date and time components, the passed date/time is
    // interpreted as local time and not UTC.

    datetime = new Date(parseInt(date[0], 10), parseInt(date[1], 10) - 1, // you know, javascript's month index starts with 0
    parseInt(date[2], 10), parseInt(time[0], 10), parseInt(time[1], 10));
    return datetime;
  },
  getTimeDelta: function getTimeDelta() {
    // Return time delta between the start and end dates in days
    var self = this,
        $el = self.$el,
        start_datetime,
        end_datetime;
    start_datetime = self.getDateTime(self.aOrB(jquery_js_exposed_default()("#formfield-form-widgets-IEventBasic-start", $el), jquery_js_exposed_default()("#archetypes-fieldname-startDate", $el)));
    end_datetime = self.getDateTime(self.aOrB(jquery_js_exposed_default()("#formfield-form-widgets-IEventBasic-end", $el), jquery_js_exposed_default()("#archetypes-fieldname-endDate", $el)));
    return (end_datetime - start_datetime) / 1000 / 60;
  },
  updateEndDate: function updateEndDate() {
    var self = this,
        $el = self.$el,
        jq_start,
        jq_end,
        start_date,
        new_end_date;
    jq_start = self.aOrB(jquery_js_exposed_default()("#formfield-form-widgets-IEventBasic-start", $el), jquery_js_exposed_default()("#archetypes-fieldname-startDate", $el));
    jq_end = self.aOrB(jquery_js_exposed_default()("#formfield-form-widgets-IEventBasic-end", $el), jquery_js_exposed_default()("#archetypes-fieldname-endDate", $el));
    start_date = self.getDateTime(jq_start);
    new_end_date = new Date(start_date.getTime());
    new_end_date.setMinutes(start_date.getMinutes() + self.getTimeDelta());

    if (new_end_date && !isNaN(new_end_date.getTime())) {
      jquery_js_exposed_default()(".pattern-pickadate-date", jq_end).pickadate("picker").set("select", new_end_date);
      jquery_js_exposed_default()(".pattern-pickadate-time", jq_end).pickatime("picker").set("select", new_end_date);
    }
  },
  validateEndDate: function validateEndDate() {
    var self = this,
        $el = self.$el,
        jq_start,
        jq_end,
        start_datetime,
        end_datetime;
    jq_start = self.aOrB(jquery_js_exposed_default()("#formfield-form-widgets-IEventBasic-start", $el), jquery_js_exposed_default()("#archetypes-fieldname-startDate", $el));
    jq_end = self.aOrB(jquery_js_exposed_default()("#formfield-form-widgets-IEventBasic-end", $el), jquery_js_exposed_default()("#archetypes-fieldname-endDate", $el));
    start_datetime = self.getDateTime(jq_start);
    end_datetime = self.getDateTime(jq_end);

    if (end_datetime < start_datetime) {
      jq_end.addClass(self.options.errorClass);
    } else {
      jq_end.removeClass(self.options.errorClass);
    }
  },
  showHideWidget: function showHideWidget(widget, hide, fade) {
    var $widget = jquery_js_exposed_default()(widget);

    if (hide === true) {
      if (fade === true) {
        $widget.fadeOut();
      } else {
        $widget.hide();
      }
    } else {
      if (fade === true) {
        $widget.fadeIn();
      } else {
        $widget.show();
      }
    }
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/formautofocus/formautofocus.js


/* harmony default export */ var formautofocus = (core_base["a" /* default */].extend({
  name: "formautofocus",
  trigger: ".pat-formautofocus",
  parser: "mockup",
  defaults: {
    condition: "div.error",
    target: "div.error :input:not(.formTabs):visible:first",
    always: ":input:not(.formTabs):visible:first"
  },
  init: function init() {
    if (jquery_js_exposed_default()(this.options.condition, this.$el).length !== 0) {
      jquery_js_exposed_default()(this.options.target, this.$el).focus();
    } else {
      jquery_js_exposed_default()(this.options.always, this.$el).focus();
    }
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/formunloadalert/formunloadalert.js



/* harmony default export */ var formunloadalert = (core_base["a" /* default */].extend({
  name: "formunloadalert",
  trigger: ".pat-formunloadalert",
  parser: "mockup",
  _changed: false,
  // Stores a listing of raised changes by their key
  _suppressed: false,
  // whether or not warning should be suppressed
  defaults: {
    message: Object(i18n_wrapper["a" /* default */])("Discard changes? If you click OK, " + "any changes you have made will be lost."),
    // events on which to check for changes
    changingEvents: "change keyup paste",
    // fields on which to check for changes
    changingFields: "input,select,textarea,fileupload"
  },
  init: function init() {
    var self = this; // if this is not a form just return

    if (!self.$el.is("form")) {
      return;
    }

    jquery_js_exposed_default()(self.options.changingFields, self.$el).on(self.options.changingEvents, function (evt) {
      self._changed = true;
    });
    var $modal = self.$el.parents(".plone-modal");

    if ($modal.length !== 0) {
      $modal.data("patternPloneModal").on("hide", function (e) {
        var modal = $modal.data("patternPloneModal");

        if (modal) {
          modal._suppressHide = self._handleUnload.call(self, e);
        }
      });
    } else {
      jquery_js_exposed_default()(window).on("beforeunload", function (e) {
        return self._handleUnload(e);
      });
    }

    self.$el.on("submit", function (e) {
      self._suppressed = true;
    });
  },
  _handleUnload: function _handleUnload(e) {
    var self = this;

    if (self._suppressed) {
      self._suppressed = false;
      return undefined;
    }

    if (self._changed) {
      var msg = self.options.message;

      self._handleMsg(e, msg);

      jquery_js_exposed_default()(window).trigger("messageset");
      return msg;
    }
  },
  _handleMsg: function _handleMsg(e, msg) {
    (e || window.event).returnValue = msg;
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/livesearch/livesearch.js




/* harmony default export */ var livesearch = (core_base["a" /* default */].extend({
  name: "livesearch",
  trigger: ".pat-livesearch",
  parser: "mockup",
  timeout: null,
  active: false,
  results: null,
  selectedItem: -1,
  resultsClass: "livesearch-results",
  defaults: {
    ajaxUrl: null,
    defaultSortOn: "",
    perPage: 7,
    quietMillis: 350,
    minimumInputLength: 4,
    inputSelector: 'input[type="text"]',
    itemTemplate: '<li class="search-result <%- state %>">' + '<h4 class="title"><a href="<%- url %>"><%- title %></a></h4>' + '<p class="description"><%- description %></p>' + "</li>"
  },
  doSearch: function doSearch(page) {
    var self = this;
    self.active = true;
    self.render();
    self.$el.addClass("searching");
    var query = self.$el.serialize();

    if (page === undefined) {
      page = 1;
    }

    var sort_on = function () {
      var parameters = location.search,
          sorton_position = parameters.indexOf("sort_on");

      if (sorton_position === -1) {
        // return default sort
        var $searchResults = jquery_js_exposed_default()("#search-results");

        if ($searchResults.length > 0) {
          return $searchResults.attr("data-default-sort");
        }

        return self.options.defaultSortOn;
      } // cut string before sort_on parameter


      var sort_on = parameters.substring(sorton_position); // cut other parameters

      sort_on = sort_on.split("&")[0]; // get just the value

      sort_on = sort_on.split("=")[1];
      return sort_on;
    }();

    jquery_js_exposed_default.a.ajax({
      url: self.options.ajaxUrl + "?" + query + "&page=" + page + "&perPage=" + self.options.perPage + "&sort_on=" + sort_on,
      dataType: "json"
    }).done(function (data) {
      self.results = data;
      self.page = page; // maybe odd here.. but we're checking to see if the user
      // has typed while a search was being performed. Perhap another search if so

      if (query !== self.$el.serialize()) {
        self.doSearch();
      }
    }).fail(function () {
      self.results = {
        items: [{
          url: "",
          title: Object(i18n_wrapper["a" /* default */])("Error"),
          description: Object(i18n_wrapper["a" /* default */])("There was an error searching…"),
          state: "error",
          error: false
        }],
        total: 1
      };
      self.page = 1;
    }).always(function () {
      self.active = false;
      self.selectedItem = -1;
      self.$el.removeClass("searching");
      self.render();
    });
  },
  render: function render() {
    var self = this;
    self.$results.empty();
    /* find a status message */

    if (self.active) {
      self.$results.append(jquery_js_exposed_default()('<li class="searching">' + Object(i18n_wrapper["a" /* default */])("searching…") + "</li>"));
    } else if (self.results === null) {
      // no results gathered yet
      self.$results.append(jquery_js_exposed_default()('<li class="no-results no-search">' + Object(i18n_wrapper["a" /* default */])("enter search phrase") + "</li>"));
    } else if (self.results.total === 0) {
      self.$results.append(jquery_js_exposed_default()('<li class="no-results">' + Object(i18n_wrapper["a" /* default */])("no results found") + "</li>"));
    } else {
      self.$results.append(jquery_js_exposed_default()('<li class="results-summary">' + Object(i18n_wrapper["a" /* default */])("found") + " " + self.results.total + " " + Object(i18n_wrapper["a" /* default */])("results") + "</li>"));
    }

    if (self.results !== null) {
      var template = index_all["default"].template(self.options.itemTemplate);

      index_all["default"].each(self.results.items, function (item, index) {
        var $el = jquery_js_exposed_default()(template(jquery_js_exposed_default.a.extend({
          _t: i18n_wrapper["a" /* default */]
        }, item)));
        $el.attr("data-url", item.url).on("click", function () {
          if (!item.error) {
            window.location = item.url;
          }
        });

        if (index === self.selectedItem) {
          $el.addClass("selected");
        }

        self.$results.append($el);
      });

      var nav = [];

      if (self.page > 1) {
        var $prev = jquery_js_exposed_default()('<a href="#" class="prev">' + Object(i18n_wrapper["a" /* default */])("Previous") + "</a>");
        $prev.click(function (e) {
          self.disableHiding = true;
          e.preventDefault();
          self.doSearch(self.page - 1);
        });
        nav.push($prev);
      }

      if (self.page * self.options.perPage < self.results.total) {
        var $next = jquery_js_exposed_default()('<a href="#" class="next">' + Object(i18n_wrapper["a" /* default */])("Next") + "</a>");
        $next.click(function (e) {
          self.disableHiding = true;
          e.preventDefault();
          self.doSearch(self.page + 1);
        });
        nav.push($next);
      }

      if (nav.length > 0) {
        var $li = jquery_js_exposed_default()('<li class="load-more"><div class="page">' + self.page + "</div></li>");
        $li.prepend(nav);
        self.$results.append($li);
      }
    }

    self.position();
  },
  position: function position() {
    /* we are positioning directly below the
     input box, same width */
    var self = this;
    self.$el.addClass("livesearch-active");
    var pos = self.$input.position();
    self.$results.width(self.$el.outerWidth());
    self.$results.css({
      top: pos.top + self.$input.outerHeight(),
      left: pos.left
    });
    self.$results.show();
  },
  hide: function hide() {
    this.$results.hide();
    this.$el.removeClass("livesearch-active");
  },
  init: function init() {
    var self = this;
    self.$input = self.$el.find(self.options.inputSelector);
    self.$input.off("focusout").on("focusout", function () {
      /* we put this in a timer so click events still
      get trigger on search results */
      setTimeout(function () {
        /* hack, look above, to handle dealing with clicks
        unfocusing element */
        if (!self.disableHiding) {
          self.hide();
        } else {
          self.disableHiding = false; // and refocus elemtn

          self.$input.focus();
        }
      }, 200);
    }).off("focusin").on("focusin", function () {
      if (!self.onceFocused) {
        /* Case: field already filled out but no reasons
        present yet, do ajax search and grab some results */
        self.onceFocused = true;

        if (self.$input.val().length >= self.options.minimumInputLength) {
          self.doSearch();
        }
      } else if (!self.$results.is(":visible")) {
        self.render();
      }
    }).attr("autocomplete", "off").off("keyup").on("keyup", function (e) {
      var code = e.keyCode || e.which; // first off, we're capturing esc presses

      if (code === 27) {
        self.$input.val("");
        self.hide();
        return;
      } // then, we're capturing up, down and enter key presses


      if (self.results && self.results.items && self.results.items.length > 0) {
        if (code === 13) {
          /* enter key, check to see if there is a selected item */
          if (self.selectedItem !== -1) {
            window.location = self.results.items[self.selectedItem].url;
          }

          return;
        } else if (code === 38) {
          /* up key */
          if (self.selectedItem !== -1) {
            self.selectedItem -= 1;
            self.render();
          }

          return;
        } else if (code === 40) {
          /* down key */
          if (self.selectedItem < self.results.items.length) {
            self.selectedItem += 1;
            self.render();
          }

          return;
        }
      }
      /* then, we handle timeouts for doing ajax search */


      if (self.timeout !== null) {
        clearTimeout(self.timeout);
        self.timeout = null;
      }

      if (self.active) {
        return;
      }

      if (self.$input.val().length >= self.options.minimumInputLength) {
        self.timeout = setTimeout(function () {
          self.doSearch();
        }, self.options.quietMillis);
      } else {
        self.results = null;
        self.render();
      }
    });
    jquery_js_exposed_default()("#sorting-options a").click(function (e) {
      e.preventDefault();
      self.onceFocused = false;
    });
    /* create result dom */

    self.$results = jquery_js_exposed_default()('<ul class="' + self.resultsClass + '"></ul>').hide().insertAfter(self.$input);
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/markspeciallinks/markspeciallinks.js


/* harmony default export */ var markspeciallinks = (core_base["a" /* default */].extend({
  name: "markspeciallinks",
  trigger: ".pat-markspeciallinks",
  parser: "mockup",
  defaults: {
    external_links_open_new_window: false,
    mark_special_links: true
  },
  init: function init() {
    var self = this,
        $el = self.$el; // first make external links open in a new window, afterwards do the
    // normal plone link wrapping in only the content area

    var elonw, msl, url, protocols, contentarea, res;

    if (typeof self.options.external_links_open_new_window === "string") {
      elonw = self.options.external_links_open_new_window.toLowerCase() === "true";
    } else if (typeof self.options.external_links_open_new_window === "boolean") {
      elonw = self.options.external_links_open_new_window;
    }

    if (typeof self.options.mark_special_links === "string") {
      msl = self.options.mark_special_links.toLowerCase() === "true";
    } else if (typeof self.options.mark_special_links === "boolean") {
      msl = self.options.mark_special_links;
    }

    url = window.location.protocol + "//" + window.location.host;
    protocols = /^(mailto|ftp|news|irc|h323|sip|callto|https|feed|webcal)/;
    contentarea = $el;

    if (elonw) {
      // all http links (without the link-plain class), not within this site
      contentarea.find('a[href^="http"]:not(.link-plain):not([href^="' + url + '"])').attr("target", "_blank").attr("rel", "noopener");
    }

    if (msl) {
      // All links with an http href (without the link-plain class), not within this site,
      // and no img children should be wrapped in a link-external span
      contentarea.find('a[href^="http:"]:not(.link-plain):not([href^="' + url + '"]):not(:has(img))').before('<i class="glyphicon link-external"></i>'); // All links without an http href (without the link-plain class), not within this site,
      // and no img children should be wrapped in a link-[protocol] span

      contentarea.find('a[href]:not([href^="http:"]):not(.link-plain):not([href^="' + url + '"]):not(:has(img)):not([href^="#"])').each(function () {
        // those without a http link may have another interesting protocol
        // wrap these in a link-[protocol] span
        res = protocols.exec(jquery_js_exposed_default()(this).attr("href"));

        if (res) {
          var iconclass = "glyphicon link-" + res[0];
          jquery_js_exposed_default()(this).before('<i class="' + iconclass + '"></i>');
        }
      });
    }
  }
}));
// EXTERNAL MODULE: ./node_modules/backbone/backbone.js
var backbone = __webpack_require__(20);
var backbone_default = /*#__PURE__*/__webpack_require__.n(backbone);

// CONCATENATED MODULE: ./node_modules/mockup/src/core/router.js
/* Pattern router
 */



var regexEscape = function regexEscape(s) {
  return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
};

var Router = backbone_default.a.Router.extend({
  actions: [],
  redirects: {},
  addRoute: function addRoute(patternName, id, callback, context, pathExp, expReplace) {
    if (index_all["default"].findWhere(this.patterns, {
      patternName: patternName,
      id: id
    }) === undefined) {
      this.actions.push({
        patternName: patternName,
        id: id,
        callback: callback,
        context: context,
        pathExp: pathExp,
        expReplace: expReplace
      });
    }

    var regex = new RegExp("(" + regexEscape(patternName) + ":" + regexEscape(id) + ")");
    this.route(regex, "handleRoute");
  },
  addRedirect: function addRedirect(pathExp, destination) {
    this.redirects[pathExp] = destination;
  },
  handleRoute: function handleRoute(pattern) {
    var parts = pattern.split(":");
    var patternName = parts[0];
    var id = parts[1];

    var action = index_all["default"].findWhere(this.actions, {
      patternName: patternName,
      id: id
    });

    if (action) {
      action.callback.call(action.context);
    }
  },
  redirect: function redirect() {
    var path = window.parent.location.pathname,
        newPath,
        regex,
        hash;

    index_all["default"].some(this.actions, function (action) {
      if (action.pathExp) {
        regex = new RegExp(action.pathExp);

        if (path.match(regex)) {
          hash = "!/" + action.patternName + ":" + action.id;
          var replaceWith = "";

          if (action.expReplace) {
            replaceWith = action.expReplace;
          }

          newPath = path.replace(regex, replaceWith);
          return true;
        }
      }
    }, this);

    if (hash === undefined) {
      for (var pathExp in this.redirects) {
        regex = new RegExp(pathExp);

        if (path.match(regex)) {
          hash = "!/" + this.redirects[pathExp];
          newPath = path.replace(regex, "");
          break;
        }
      }
    }

    if (hash !== undefined) {
      this._changeLocation.apply(this, [newPath, hash]);
    }
  },
  _changeLocation: function _changeLocation(path, hash) {
    window.parent.location.hash = hash;
    window.parent.location.pathname = path;
  },
  start: function start() {
    backbone_default.a.history.start();
  },
  reset: function reset() {
    this.actions = [];
  }
});
/* harmony default export */ var router = (Router);
// EXTERNAL MODULE: ./node_modules/mockup/src/core/i18n.js
var i18n = __webpack_require__(112);

// EXTERNAL MODULE: ./node_modules/patternslib/src/pat/inject/inject.js + 2 modules
var inject = __webpack_require__(264);

// CONCATENATED MODULE: ./node_modules/patternslib/src/pat/modal/modal.js
function modal_createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = modal_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function modal_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return modal_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return modal_arrayLikeToArray(o, minLen); }

function modal_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function modal_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function modal_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { modal_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { modal_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }






var modal_parser = new parser["a" /* default */]("modal");
modal_parser.addArgument("class");
modal_parser.addArgument("closing", ["close-button"], ["close-button", "outside"], true);
modal_parser.addArgument("close-text", "Close");
modal_parser.addArgument("panel-header-content", ":first:not(.header)");
/* harmony default export */ var modal = (core_base["a" /* default */].extend({
  name: "modal",
  jquery_plugin: true,
  // div's are turned into modals
  // links, forms and subforms inject modals
  trigger: "div.pat-modal, a.pat-modal, form.pat-modal, .pat-modal.pat-subform",
  init: function init($el, opts, trigger) {
    var _this = this;

    return modal_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!window.__patternslib_import_styles) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return __webpack_require__.e(/* import() */ 153).then(__webpack_require__.t.bind(null, 672, 7));

            case 3:
              _this.options = modal_parser.parse(_this.$el, opts);

              if (trigger && trigger.type === "injection") {
                jquery_js_exposed_default.a.extend(_this.options, modal_parser.parse(jquery_js_exposed_default()(trigger.element), {}, false, false));
              }

              if (_this.$el.is("div")) {
                _this._init_div1();
              } else {
                _this._init_inject1();
              }

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  _init_inject1: function _init_inject1() {
    var opts = {
      target: "#pat-modal",
      class: "pat-modal" + (this.options["class"] ? " " + this.options["class"] : "")
    };

    if (this.options.url) {
      opts.url = this.options.url;
    }

    if (this.options.trigger) {
      opts.trigger = this.options.trigger;
    } // if $el is already inside a modal, do not detach #pat-modal,
    // because this would unnecessarily close the modal itself


    if (!this.$el.closest("#pat-modal")) {
      jquery_js_exposed_default()("#pat-modal").detach();
    }

    this.$el.on("pat-inject-missingSource pat-inject-missingTarget", function () {
      jquery_js_exposed_default()("#pat-modal").detach();
    });
    inject["a" /* default */].init(this.$el, opts);
  },
  _init_div1: function _init_div1() {
    var $header = jquery_js_exposed_default()("<div class='header' />");

    if (this.options.closing.indexOf("close-button") !== -1) {
      jquery_js_exposed_default()("<button type='button' class='close-panel'>" + this.options.closeText + "</button>").appendTo($header);
    } // We cannot handle text nodes here


    var $children;

    if (this.options.panelHeaderContent === "none") {
      $children = this.$el.children();
    } else {
      $children = this.$el.children(":last, :not(" + this.options.panelHeaderContent + ")");
    }

    if ($children.length) {
      $children.wrapAll("<div class='panel-content' />");
    } else {
      this.$el.append("<div class='panel-content' />");
    }

    this.$el.children(".panel-content").before($header);
    this.$el.children(this.options.panelHeaderContent).prependTo($header); // Restore focus in case the active element was a child of $el and
    // the focus was lost during the wrapping.
    // Only if we have an activeElement, as IE10/11 can have undefined as activeElement

    if (document.activeElement) {
      document.activeElement.focus();
    }

    this._init_handlers();

    this.resize();
    this.setPosition();
    jquery_js_exposed_default()("body").addClass("modal-active");
  },
  _init_handlers: function _init_handlers() {
    jquery_js_exposed_default()(document).on("click.pat-modal", "#pat-modal .close-panel[type!=submit]", this.destroy.bind(this));
    jquery_js_exposed_default()(document).on("click.pat-modal", ".pat-modal .close-panel[type!=submit]", this.destroy.bind(this));
    jquery_js_exposed_default()(document).on("click.pat-modal", "#pat-modal .close-panel[type=submit]", this.destroy_inject.bind(this));
    jquery_js_exposed_default()(document).on("click.pat-modal", ".pat-modal .close-panel[type=submit]", this.destroy_inject.bind(this));
    jquery_js_exposed_default()(document).on("keyup.pat-modal", this._onKeyUp.bind(this));

    if (this.options.closing.indexOf("outside") !== -1) {
      jquery_js_exposed_default()(document).on("click.pat-modal", this._onPossibleOutsideClick.bind(this));
    }

    jquery_js_exposed_default()(window).on("resize.pat-modal-position", utils["a" /* default */].debounce(this.resize.bind(this), 400));
    jquery_js_exposed_default()(document).on("pat-inject-content-loaded.pat-modal-position", "#pat-modal", utils["a" /* default */].debounce(this.resize.bind(this), 400));
    jquery_js_exposed_default()(document).on("patterns-injected.pat-modal-position", "#pat-modal,div.pat-modal", utils["a" /* default */].debounce(this.resize.bind(this), 400));
    jquery_js_exposed_default()(document).on("pat-update.pat-modal-position", "#pat-modal,div.pat-modal", utils["a" /* default */].debounce(this.resize.bind(this), 50));
  },
  _onPossibleOutsideClick: function _onPossibleOutsideClick(ev) {
    if (this.$el.has(ev.target)) {
      this.destroy();
    }
  },
  _onKeyUp: function _onKeyUp(ev) {
    if (ev.which === 27) {
      this.destroy();
    }
  },
  getTallestChild: function getTallestChild() {
    var $tallest_child;

    var _iterator = modal_createForOfIteratorHelper(jquery_js_exposed_default()("*", this.$el)),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var child = _step.value;
        var $child = jquery_js_exposed_default()(child);

        if (typeof $tallest_child === "undefined") {
          $tallest_child = $child;
        } else if ($child.outerHeight(true) > $tallest_child.outerHeight(true)) {
          $tallest_child = $child;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return $tallest_child;
  },
  setPosition: function setPosition() {
    this.$el.css("top", (jquery_js_exposed_default()(window).innerHeight() - this.$el.height()) / 2);
  },
  resize: function resize() {
    // reset the height before setting a new one
    this.$el.removeClass("max-height").css("height", "");
    var panel_content_elem = this.$el.find(".panel-content");
    var header_elem = this.$el.find(".header");
    var modal_height = panel_content_elem.outerHeight(true) + header_elem.outerHeight(true);

    if (this.$el.height() < modal_height) {
      this.$el.addClass("max-height").css({
        height: modal_height + "px"
      });
      this.setPosition();
    } // XXX: This is a hack. When you have a modal inside a
    // modal.max-height, the CSS of the outermost modal affects the
    // innermost .panel-body. By redrawing here, it's fixed.
    //
    // I think ideally the CSS needs to be fixed here, but I need to
    // discuss with Cornelis first.


    if (this.$el.parent().closest(".pat-modal").length > 0) {
      utils["a" /* default */].redraw(this.$el.find(".panel-body"));
    }
  },
  destroy: function destroy() {
    // if working without injection, destroy right away.
    jquery_js_exposed_default()(document).off(".pat-modal");
    this.$el.remove();
    jquery_js_exposed_default()("body").removeClass("modal-active");
    jquery_js_exposed_default()("body").removeClass("modal-panel");
  },
  destroy_inject: function destroy_inject() {
    var _this2 = this;

    if (this.$el.find("form").hasClass("pat-inject")) {
      // if pat-inject in modal form, listen to patterns-inject-triggered and destroy first
      // once that has been triggered
      var destroy_handler = function destroy_handler() {
        jquery_js_exposed_default()(document).off(".pat-modal");

        _this2.$el.remove();

        jquery_js_exposed_default()("body").removeClass("modal-active");
        jquery_js_exposed_default()("body").removeClass("modal-panel");
        jquery_js_exposed_default()("body").off("patterns-inject-triggered", destroy_handler);
      };

      jquery_js_exposed_default()("body").on("patterns-inject-triggered", destroy_handler);
    } else {
      // if working without injection, destroy right away.
      jquery_js_exposed_default()(document).off(".pat-modal");
      this.$el.remove();
      jquery_js_exposed_default()("body").removeClass("modal-active");
      jquery_js_exposed_default()("body").removeClass("modal-panel");
    }
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/modal/modal.js









/* harmony default export */ var modal_modal = (modal.extend({
  name: "plone-modal",
  trigger: ".pat-plone-modal"
})); //export default Base.extend({
//    name: "plone-modal",
//    trigger: ".pat-plone-modal",
//    parser: "mockup",
//    createModal: null,
//    $model: null,
//    defaults: {
//        width: "",
//        height: "",
//        margin: 20,
//        position: "center middle", // format: '<horizontal> <vertical>' -- allowed values: top, bottom, left, right, center, middle
//        triggers: [],
//        zIndexSelector: ".plone-modal-wrapper,.plone-modal-backdrop",
//        backdrop: "body", // Element to initiate the Backdrop on.
//        backdropOptions: {
//            zIndex: "1040",
//            opacity: "0.85",
//            className: "plone-modal-backdrop",
//            classActiveName: "plone-backdrop-active",
//            closeOnEsc: true,
//            closeOnClick: true,
//        },
//        title: null,
//        titleSelector: "h1:first",
//        buttons: '.formControls > input[type="submit"], .formControls > button',
//        content: "#content",
//        automaticallyAddButtonActions: true,
//        loadLinksWithinModal: true,
//        prependContent: ".portalMessage, #global_statusmessage",
//        onRender: null,
//        templateOptions: {
//            className: "plone-modal fade",
//            classDialog: "plone-modal-dialog",
//            classModal: "plone-modal-content",
//            classHeaderName: "plone-modal-header",
//            classBodyName: "plone-modal-body",
//            classFooterName: "plone-modal-footer",
//            classWrapperName: "plone-modal-wrapper",
//            classWrapperInnerName: "modal-wrapper-inner",
//            classActiveName: "in",
//            classPrependName: "", // String, css class to be applied to the wrapper of the prepended content
//            classContentName: "", // String, class name to be applied to the content of the modal, useful for modal specific styling
//            template:
//                "" +
//                '<div class="<%= options.className %>">' +
//                '  <div class="<%= options.classDialog %>" role="dialog" <% if (title) { %>aria-labelledby="plone-modal-title" <% } %> tabindex="-1">' +
//                '    <div class="<%= options.classModal %>">' +
//                '      <div class="<%= options.classHeaderName %>">' +
//                '        <a class="plone-modal-close" aria-label="Close modal" title="Close modal" href="#">&times;</a>' +
//                '        <% if (title) { %><h2 class="plone-modal-title" id="plone-modal-title" tabindex="0"><%= title %></h2><% } %>' +
//                "      </div>" +
//                '      <div class="<%= options.classBodyName %>">' +
//                '        <div class="<%= options.classPrependName %>"><%= prepend %></div> ' +
//                '        <div class="<%= options.classContentName %>"><%= content %></div>' +
//                "      </div>" +
//                '      <div class="<%= options.classFooterName %>"> ' +
//                "        <% if (buttons) { %><%= buttons %><% } %>" +
//                "      </div>" +
//                "    </div>" +
//                "  </div>" +
//                "</div>",
//        },
//        actions: {},
//        actionOptions: {
//            eventType: "click",
//            disableAjaxFormSubmit: false,
//            target: null,
//            ajaxUrl: null, // string, or function($el, options) that returns a string
//            modalFunction: null, // String, function name on self to call
//            isForm: false,
//            timeout: 5000,
//            displayInModal: true,
//            reloadWindowOnClose: true,
//            error: ".portalMessage.error, .alert-danger",
//            formFieldError: ".field.error",
//            onSuccess: null,
//            onError: null,
//            onFormError: null,
//            onTimeout: null,
//            redirectOnResponse: false,
//            redirectToUrl: function ($action, response, options) {
//                var reg;
//                reg = /<body.*data-view-url=[\"'](.*)[\"'].*/im.exec(response);
//                if (reg && reg.length > 1) {
//                    // view url as data attribute on body (Plone 5)
//                    return reg[1].split('"')[0];
//                }
//                reg = /<body.*data-base-url=[\"'](.*)[\"'].*/im.exec(response);
//                if (reg && reg.length > 1) {
//                    // Base url as data attribute on body (Plone 5)
//                    return reg[1].split('"')[0];
//                }
//                reg = /<base.*href=[\"'](.*)[\"'].*/im.exec(response);
//                if (reg && reg.length > 1) {
//                    // base tag available (Plone 4)
//                    return reg[1];
//                }
//                return "";
//            },
//        },
//        routerOptions: {
//            id: null,
//            pathExp: null,
//        },
//        form: function (actions) {
//            var self = this;
//            var $modal = self.$modal;
//
//            if (self.options.automaticallyAddButtonActions) {
//                actions[self.options.buttons] = {};
//            }
//            actions.a = {};
//
//            $.each(actions, function (action, options) {
//                var actionKeys = _.union(_.keys(self.options.actionOptions), [
//                    "templateOptions",
//                ]);
//                var actionOptions = $.extend(
//                    true,
//                    {},
//                    self.options.actionOptions,
//                    _.pick(options, actionKeys)
//                );
//                options.templateOptions = $.extend(
//                    true,
//                    options.templateOptions,
//                    self.options.templateOptions
//                );
//
//                var patternKeys = _.union(_.keys(self.options.actionOptions), [
//                    "actions",
//                    "actionOptions",
//                ]);
//                var patternOptions = $.extend(
//                    true,
//                    _.omit(options, patternKeys),
//                    self.options
//                );
//
//                $(
//                    action,
//                    $("." + options.templateOptions.classBodyName, $modal)
//                ).each(function (action) {
//                    var $action = $(this);
//                    $action.on(actionOptions.eventType, function (e) {
//                        e.stopPropagation();
//                        e.preventDefault();
//
//                        self.loading.show(false);
//
//                        // handle event on $action using a function on self
//                        if (actionOptions.modalFunction !== null) {
//                            self[actionOptions.modalFunction]();
//                            // handle event on input/button using jquery.form library
//                        } else if (
//                            $.nodeName($action[0], "input") ||
//                            $.nodeName($action[0], "button") ||
//                            options.isForm === true
//                        ) {
//                            self.options.handleFormAction.apply(self, [
//                                $action,
//                                actionOptions,
//                                patternOptions,
//                            ]);
//                            // handle event on link with jQuery.ajax
//                        } else if (
//                            options.ajaxUrl !== null ||
//                            $.nodeName($action[0], "a")
//                        ) {
//                            self.options.handleLinkAction.apply(self, [
//                                $action,
//                                actionOptions,
//                                patternOptions,
//                            ]);
//                        }
//                    });
//                });
//            });
//        },
//        handleFormAction: function ($action, options, patternOptions) {
//            var self = this;
//
//            // pass action that was clicked when submiting form
//            var extraData = {};
//            extraData[$action.attr("name")] = $action.attr("value");
//
//            var $form;
//
//            if ($.nodeName($action[0], "form")) {
//                $form = $action;
//            } else {
//                $form = $action.parents("form:not(.disableAutoSubmit)");
//            }
//
//            var url;
//            if (options.ajaxUrl !== null) {
//                if (typeof options.ajaxUrl === "function") {
//                    url = options.ajaxUrl.apply(self, [$action, options]);
//                } else {
//                    url = options.ajaxUrl;
//                }
//            } else {
//                url = $action.parents("form").attr("action");
//            }
//
//            if (options.disableAjaxFormSubmit) {
//                if ($action.attr("name") && $action.attr("value")) {
//                    $form.append(
//                        $(
//                            '<input type="hidden" name="' +
//                                $action.attr("name") +
//                                '" value="' +
//                                $action.attr("value") +
//                                '" />'
//                        )
//                    );
//                }
//                $form.trigger("submit");
//                return;
//            }
//            // We want to trigger the form submit event but NOT use the default
//            $form.on("submit", function (e) {
//                e.preventDefault();
//            });
//            $form.trigger("submit");
//
//            self.loading.show(false);
//            $form.ajaxSubmit({
//                timeout: options.timeout,
//                data: extraData,
//                url: url,
//                error: function (xhr, textStatus, errorStatus) {
//                    self.loading.hide();
//                    if (textStatus === "timeout" && options.onTimeout) {
//                        options.onTimeout.apply(self, xhr, errorStatus);
//                        // on "error", "abort", and "parsererror"
//                    } else if (options.onError) {
//                        if (typeof options.onError === "string") {
//                            window[options.onError](
//                                xhr,
//                                textStatus,
//                                errorStatus
//                            );
//                        } else {
//                            options.onError(xhr, textStatus, errorStatus);
//                        }
//                    } else {
//                        // window.alert(_t('There was an error submitting the form.'));
//                        console.log(
//                            "error happened",
//                            textStatus,
//                            " do something"
//                        );
//                    }
//                    self.emit("formActionError", [
//                        xhr,
//                        textStatus,
//                        errorStatus,
//                    ]);
//                },
//                success: function (response, state, xhr, form) {
//                    self.loading.hide();
//                    // if error is found (NOTE: check for both the portal errors
//                    // and the form field-level errors)
//                    if (
//                        $(options.error, response).length !== 0 ||
//                        $(options.formFieldError, response).length !== 0
//                    ) {
//                        if (options.onFormError) {
//                            if (typeof options.onFormError === "string") {
//                                window[options.onFormError](
//                                    self,
//                                    response,
//                                    state,
//                                    xhr,
//                                    form
//                                );
//                            } else {
//                                options.onFormError(
//                                    self,
//                                    response,
//                                    state,
//                                    xhr,
//                                    form
//                                );
//                            }
//                        } else {
//                            self.redraw(response, patternOptions);
//                        }
//                        return;
//                    }
//
//                    if (options.redirectOnResponse === true) {
//                        if (typeof options.redirectToUrl === "function") {
//                            window.parent.location.href = options.redirectToUrl.apply(
//                                self,
//                                [$action, response, options]
//                            );
//                        } else {
//                            window.parent.location.href = options.redirectToUrl;
//                        }
//                        return; // cut out right here since we're changing url
//                    }
//
//                    if (options.onSuccess) {
//                        if (typeof options.onSuccess === "string") {
//                            window[options.onSuccess](
//                                self,
//                                response,
//                                state,
//                                xhr,
//                                form
//                            );
//                        } else {
//                            options.onSuccess(self, response, state, xhr, form);
//                        }
//                    }
//
//                    if (options.displayInModal === true) {
//                        self.redraw(response, patternOptions);
//                    } else {
//                        $action.trigger("destroy.plone-modal.patterns");
//                        // also calls hide
//                        if (options.reloadWindowOnClose) {
//                            self.reloadWindow();
//                        }
//                    }
//                    self.emit("formActionSuccess", [
//                        response,
//                        state,
//                        xhr,
//                        form,
//                    ]);
//                },
//            });
//        },
//        handleLinkAction: function ($action, options, patternOptions) {
//            var self = this;
//            var url;
//            if ($action.hasClass("pat-plone-modal")) {
//                // if link is a modal pattern, do not reload the page
//                return;
//            }
//
//            // Figure out URL
//            if (options.ajaxUrl) {
//                if (typeof options.ajaxUrl === "function") {
//                    url = options.ajaxUrl.apply(self, [$action, options]);
//                } else {
//                    url = options.ajaxUrl;
//                }
//            } else {
//                url = $action.attr("href");
//            }
//
//            // Non-ajax link (I know it says "ajaxUrl" ...)
//            if (options.displayInModal === false) {
//                if ($action.attr("target") === "_blank") {
//                    window.open(url, "_blank");
//                    self.loading.hide();
//                } else {
//                    window.location = url;
//                }
//                return;
//            }
//
//            // ajax version
//            $.ajax({
//                url: url,
//            })
//                .fail(function (xhr, textStatus, errorStatus) {
//                    if (textStatus === "timeout" && options.onTimeout) {
//                        options.onTimeout(self.$modal, xhr, errorStatus);
//
//                        // on "error", "abort", and "parsererror"
//                    } else if (options.onError) {
//                        options.onError(xhr, textStatus, errorStatus);
//                    } else {
//                        window.alert(_t("There was an error loading modal."));
//                    }
//                    self.emit("linkActionError", [
//                        xhr,
//                        textStatus,
//                        errorStatus,
//                    ]);
//                })
//                .done(function (response, state, xhr) {
//                    self.redraw(response, patternOptions);
//                    if (options.onSuccess) {
//                        if (typeof options.onSuccess === "string") {
//                            window[options.onSuccess](
//                                self,
//                                response,
//                                state,
//                                xhr
//                            );
//                        } else {
//                            options.onSuccess(self, response, state, xhr);
//                        }
//                    }
//
//                    self.emit("linkActionSuccess", [response, state, xhr]);
//                })
//                .always(function () {
//                    self.loading.hide();
//                });
//        },
//        render: function (options) {
//            var self = this;
//
//            self.emit("before-render");
//
//            if (!self.$raw) {
//                return;
//            }
//            var $raw = self.$raw.clone();
//            // fix for IE9 bug (see http://bugs.jquery.com/ticket/10550)
//            $("input:checked", $raw).each(function () {
//                if (this.setAttribute) {
//                    this.setAttribute("checked", "checked");
//                }
//            });
//
//            // Object that will be passed to the template
//            var tplObject = {
//                title: "",
//                prepend: "<div />",
//                content: "",
//                buttons: '<div class="pattern-modal-buttons"></div>',
//                options: options.templateOptions,
//            };
//
//            // setup the Title
//            if (options.title === null) {
//                var $title = $(options.titleSelector, $raw);
//                tplObject.title = $title.html();
//                $(options.titleSelector, $raw).remove();
//            } else {
//                tplObject.title = options.title;
//            }
//
//            // Grab items to to insert into the prepend area
//            if (options.prependContent) {
//                tplObject.prepend = $("<div />")
//                    .append($(options.prependContent, $raw).clone())
//                    .html();
//                $(options.prependContent, $raw).remove();
//            }
//
//            // Filter out the content if there is a selector provided
//            if (options.content) {
//                tplObject.content = $(options.content, $raw).html();
//            } else {
//                tplObject.content = $raw.html();
//            }
//
//            // Render html
//            self.$modal = $(
//                _.template(self.options.templateOptions.template)(tplObject)
//            );
//            self.$modalDialog = $(
//                "> ." + self.options.templateOptions.classDialog,
//                self.$modal
//            );
//            self.$modalContent = $(
//                "> ." + self.options.templateOptions.classModal,
//                self.$modalDialog
//            );
//
//            // In most browsers, when you hit the enter key while a form element is focused
//            // the browser will trigger the form 'submit' event.  Google Chrome also does this,
//            // but not when when the default submit button is hidden with 'display: none'.
//            // The following code will work around this issue:
//            $("form", self.$modal).on("keydown", function (event) {
//                // ignore keys which are not enter, and ignore enter inside a textarea.
//                if (
//                    event.keyCode !== 13 ||
//                    event.target.nodeName === "TEXTAREA"
//                ) {
//                    return;
//                }
//                event.preventDefault();
//                $(
//                    "input[type=submit], button[type=submit], button:not(type)",
//                    this
//                )
//                    .eq(0)
//                    .trigger("click");
//            });
//
//            // Setup buttons
//            $(options.buttons, self.$modal).each(function () {
//                var $button = $(this);
//                $button
//                    .on("click", function (e) {
//                        e.stopPropagation();
//                        e.preventDefault();
//                    })
//                    .clone()
//                    .appendTo($(".pattern-modal-buttons", self.$modal))
//                    .off("click")
//                    .on("click", function (e) {
//                        e.stopPropagation();
//                        e.preventDefault();
//                        $button.trigger("click");
//                    });
//                $button.hide();
//            });
//
//            self.emit("before-events-setup");
//
//            // Wire up events
//            $(
//                ".plone-modal-header > a.plone-modal-close, .plone-modal-footer > a.plone-modal-close",
//                self.$modal
//            )
//                .off("click")
//                .on("click", function (e) {
//                    e.stopPropagation();
//                    e.preventDefault();
//                    $(e.target).trigger("destroy.plone-modal.patterns");
//                });
//
//            // form
//            if (options.form) {
//                options.form.apply(self, [options.actions]);
//            }
//
//            self.$modal
//                .addClass(self.options.templateOptions.className)
//                .on("destroy.plone-modal.patterns", function (e) {
//                    e.stopPropagation();
//                    self.hide();
//                })
//                .on("resize.plone-modal.patterns", function (e) {
//                    e.stopPropagation();
//                    e.preventDefault();
//                    self.positionModal();
//                })
//                .appendTo(self.$wrapperInner);
//
//            if (self.options.loadLinksWithinModal) {
//                self.$modal.on("click", function (e) {
//                    e.stopPropagation();
//                    if ($.nodeName(e.target, "a")) {
//                        e.preventDefault();
//                        // TODO: open links inside modal
//                        // and slide modal body
//                    }
//                    self.$modal.trigger("modal-click");
//                });
//            }
//            self.$modal.data("pattern-" + self.name, self);
//            self.emit("after-render");
//            if (options.onRender) {
//                if (typeof options.onRender === "string") {
//                    window[options.onRender](self);
//                } else {
//                    options.onRender(self);
//                }
//            }
//        },
//    },
//    reloadWindow: function () {
//        window.parent.location.reload();
//    },
//    init: function () {
//        var self = this;
//        self.options.loadLinksWithinModal = $.parseJSON(
//            self.options.loadLinksWithinModal
//        );
//        console.log(self.options.routerOptions.id);
//        console.log(self.options.routerOptions.id);
//        // Router
//        if (self.options.routerOptions.id !== null) {
//            Router.addRoute(
//                "modal",
//                self.options.routerOptions.id,
//                function () {
//                    this.show();
//                },
//                self,
//                self.options.routerOptions.pathExp,
//                self.options.routerOptions.expReplace
//            );
//        }
//
//        if (self.options.backdropOptions.closeOnEsc === true) {
//            $(document).on("keydown", function (e, data) {
//                if (
//                    self.$el.is(
//                        "." + self.options.templateOptions.classActiveName
//                    )
//                ) {
//                    if (e.keyCode === 27) {
//                        // ESC key pressed
//                        self.hide();
//                    }
//                }
//            });
//        }
//
//        $(window.parent).resize(function () {
//            self.positionModal();
//        });
//
//        if (self.options.triggers) {
//            $.each(self.options.triggers, function (i, item) {
//                var e = item.substring(0, item.indexOf(" "));
//                var selector = item.substring(item.indexOf(" "), item.length);
//                $(selector || self.$el).on(e, function (e) {
//                    e.stopPropagation();
//                    e.preventDefault();
//                    self.show();
//                });
//            });
//        }
//
//        if (self.$el.is("a")) {
//            if (self.$el.attr("href") && !self.options.image) {
//                if (
//                    !self.options.target &&
//                    self.$el.attr("href").substr(0, 1) === "#" &&
//                    self.$el.attr("href").length > 1
//                ) {
//                    self.options.target = self.$el.attr("href");
//                    self.options.content = "";
//                }
//                if (
//                    !self.options.ajaxUrl &&
//                    self.$el.attr("href").substr(0, 1) !== "#"
//                ) {
//                    self.options.ajaxUrl = function () {
//                        // Resolve ``href`` attribute later, when modal is shown.
//                        return self.$el.attr("href");
//                    };
//                }
//            }
//            self.$el.on("click", function (e) {
//                e.stopPropagation();
//                e.preventDefault();
//                self.show();
//            });
//        }
//        self.initModal();
//    },
//
//    createAjaxModal: function () {
//        var self = this;
//        self.emit("before-ajax");
//        self.loading.show();
//
//        var ajaxUrl = self.options.ajaxUrl;
//        if (typeof ajaxUrl === "function") {
//            ajaxUrl = ajaxUrl.apply(self, [self.options]);
//        }
//
//        self.ajaxXHR = $.ajax({
//            url: ajaxUrl,
//            type: self.options.ajaxType,
//        })
//            .done(function (response, textStatus, xhr) {
//                self.ajaxXHR = undefined;
//                self.$raw = $("<div />").append(
//                    $(utils.parseBodyTag(response))
//                );
//                self.emit("after-ajax", self, textStatus, xhr);
//                self._show();
//            })
//            .fail(function (xhr, textStatus, errorStatus) {
//                var options = self.options.actionOptions;
//                if (textStatus === "timeout" && options.onTimeout) {
//                    options.onTimeout(self.$modal, xhr, errorStatus);
//                } else if (options.onError) {
//                    options.onError(xhr, textStatus, errorStatus);
//                } else {
//                    window.alert(_t("There was an error loading modal."));
//                    self.hide();
//                }
//                self.emit("linkActionError", [xhr, textStatus, errorStatus]);
//            })
//            .always(function () {
//                self.loading.hide();
//            });
//    },
//
//    createTargetModal: function () {
//        var self = this;
//        self.$raw = $(self.options.target).clone();
//        self._show();
//    },
//
//    createBasicModal: function () {
//        var self = this;
//        self.$raw = $("<div/>").html(self.$el.clone());
//        self._show();
//    },
//
//    createHtmlModal: function () {
//        var self = this;
//        var $el = $(self.options.html);
//        self.$raw = $el;
//        self._show();
//    },
//
//    createImageModal: function () {
//        var self = this;
//        self.$wrapper.addClass("image-modal");
//        var src = self.$el.attr("href");
//        var srcset = self.$el.attr("data-modal-srcset") || "";
//        var title = $.trim(self.$el.context.innerText) || "Image";
//        // XXX aria?
//        self.$raw = $(
//            "<div><h1>" +
//                title +
//                '</h1><div id="content"><div class="modal-image"><img src="' +
//                src +
//                '" srcset="' +
//                srcset +
//                '" /></div></div></div>'
//        );
//        self._show();
//    },
//
//    initModal: function () {
//        var self = this;
//        if (self.options.ajaxUrl) {
//            self.createModal = self.createAjaxModal;
//        } else if (self.options.target) {
//            self.createModal = self.createTargetModal;
//        } else if (self.options.html) {
//            self.createModal = self.createHtmlModal;
//        } else if (self.options.image) {
//            self.createModal = self.createImageModal;
//        } else {
//            self.createModal = self.createBasicModal;
//        }
//    },
//
//    findPosition: function (
//        horpos,
//        vertpos,
//        margin,
//        modalWidth,
//        modalHeight,
//        wrapperInnerWidth,
//        wrapperInnerHeight
//    ) {
//        var returnpos = {};
//        var absTop, absBottom, absLeft, absRight;
//        absRight = absLeft = absTop = absLeft = "auto";
//
//        // -- HORIZONTAL POSITION -----------------------------------------------
//        if (horpos === "left") {
//            absLeft = margin + "px";
//            // if the width of the wrapper is smaller than the modal, and thus the
//            // screen is smaller than the modal, force the left to simply be 0
//            if (modalWidth > wrapperInnerWidth) {
//                absLeft = "0px";
//            }
//            returnpos.left = absLeft;
//        } else if (horpos === "right") {
//            absRight = margin + "px";
//            // if the width of the wrapper is smaller than the modal, and thus the
//            // screen is smaller than the modal, force the right to simply be 0
//            if (modalWidth > wrapperInnerWidth) {
//                absRight = "0px";
//            }
//            returnpos.right = absRight;
//            returnpos.left = "auto";
//        }
//        // default, no specified location, is to center
//        else {
//            absLeft = wrapperInnerWidth / 2 - modalWidth / 2 - margin + "px";
//            // if the width of the wrapper is smaller than the modal, and thus the
//            // screen is smaller than the modal, force the left to simply be 0
//            if (modalWidth > wrapperInnerWidth) {
//                absLeft = "0px";
//            }
//            returnpos.left = absLeft;
//        }
//
//        // -- VERTICAL POSITION -------------------------------------------------
//        if (vertpos === "top") {
//            absTop = margin + "px";
//            // if the height of the wrapper is smaller than the modal, and thus the
//            // screen is smaller than the modal, force the top to simply be 0
//            if (modalHeight > wrapperInnerHeight) {
//                absTop = "0px";
//            }
//            returnpos.top = absTop;
//        } else if (vertpos === "bottom") {
//            absBottom = margin + "px";
//            // if the height of the wrapper is smaller than the modal, and thus the
//            // screen is smaller than the modal, force the bottom to simply be 0
//            if (modalHeight > wrapperInnerHeight) {
//                absBottom = "0px";
//            }
//            returnpos.bottom = absBottom;
//            returnpos.top = "auto";
//        } else {
//            // default case, no specified location, is to center
//            absTop = wrapperInnerHeight / 2 - modalHeight / 2 - margin + "px";
//            // if the height of the wrapper is smaller than the modal, and thus the
//            // screen is smaller than the modal, force the top to simply be 0
//            if (modalHeight > wrapperInnerHeight) {
//                absTop = "0px";
//            }
//            returnpos.top = absTop;
//        }
//        return returnpos;
//    },
//
//    modalInitialized: function () {
//        var self = this;
//        return self.$modal !== null && self.$modal !== undefined;
//    },
//
//    activateFocusTrap: function () {
//        var self = this;
//        var inputsBody = self.$modal
//            .find("." + self.options.templateOptions.classBodyName)
//            .first()
//            .find("select, input[type!=hidden], textarea, button, a");
//        var inputsFooter = self.$modal
//            .find("." + self.options.templateOptions.classFooterName)
//            .first()
//            .find("select, input[type!=hidden], textarea, button, a");
//        var inputs = [];
//        for (var i = 0; i < inputsBody.length; i++) {
//            if ($(inputsBody[i]).is(":visible")) {
//                inputs.push(inputsBody[i]);
//            }
//        }
//        for (var j = 0; j < inputsFooter.length; j++) {
//            if ($(inputsFooter[j]).is(":visible")) {
//                inputs.push(inputsFooter[j]);
//            }
//        }
//
//        if (inputs.length === 0) {
//            inputs = self.$modal.find(".plone-modal-title");
//        }
//        var firstInput = inputs[0];
//        var lastInput = inputs[inputs.length - 1];
//        var closeInput = self.$modal.find(".plone-modal-close").first();
//        $(document).on(
//            "keydown",
//            "." + self.options.templateOptions.classDialog,
//            function (e) {
//                if (e.which === 9) {
//                    e.preventDefault();
//
//                    var $target = $(e.target);
//                    var currentIndex = $.inArray($target[0], inputs);
//                    if (currentIndex >= 0 && currentIndex < inputs.length) {
//                        var nextIndex = currentIndex + (e.shiftKey ? -1 : 1);
//                        if (nextIndex < 0 || nextIndex >= inputs.length) {
//                            closeInput.focus();
//                        } else {
//                            inputs[nextIndex].focus();
//                        }
//                    } else if (e.shiftKey) {
//                        lastInput.focus();
//                    } else {
//                        firstInput.focus();
//                    }
//                }
//            }
//        );
//        if (self.options.backdropOptions.closeOnClick === true) {
//            self.$modal.on("click", function (e) {
//                if (
//                    !$(e.target).closest(
//                        "." + self.options.templateOptions.classModal
//                    ).length
//                ) {
//                    self.hide();
//                }
//            });
//        }
//
//        self.$modal.find(".plone-modal-title").focus();
//    },
//
//    positionModal: function () {
//        /* re-position modal at any point.
//         *
//         * Uses:
//         *  options.margin
//         *  options.width
//         *  options.height
//         *  options.position
//         */
//        var self = this;
//        // modal isn't initialized
//        if (!self.modalInitialized()) {
//            return;
//        }
//        // clear out any previously set styling
//        self.$modal.removeAttr("style");
//
//        // if backdrop wrapper is set on body, then wrapper should have height of
//        // the window, so we can do scrolling of inner wrapper
//        if (self.$wrapper.parent().is("body")) {
//            self.$wrapper.height($(window.parent).height());
//        }
//
//        var margin =
//            typeof self.options.margin === "function"
//                ? self.options.margin()
//                : self.options.margin;
//        self.$modal.css({
//            position: "absolute",
//            padding: margin,
//        });
//        self.$modalDialog.css({
//            margin: "0",
//            padding: "0",
//            width: self.options.width, // defaults to "", which doesn't override other css
//            height: self.options.height, // defaults to "", which doesn't override other css
//        });
//        self.$modalContent.css({
//            width: self.options.width, // defaults to "", which doesn't override other css
//        });
//
//        var posopt = self.options.position.split(" "),
//            horpos = posopt[0],
//            vertpos = posopt[1];
//        var modalWidth = self.$modalDialog.outerWidth(true);
//        var modalHeight = self.$modalDialog.outerHeight(true);
//        var wrapperInnerWidth = self.$wrapperInner.width();
//        var wrapperInnerHeight = self.$wrapperInner.height();
//        var pos = self.findPosition(
//            horpos,
//            vertpos,
//            margin,
//            modalWidth,
//            modalHeight,
//            wrapperInnerWidth,
//            wrapperInnerHeight
//        );
//        for (var key in pos) {
//            self.$modalDialog.css(key, pos[key]);
//        }
//    },
//
//    render: function (options) {
//        var self = this;
//        self.emit("render");
//        self.options.render.apply(self, [options]);
//        self.emit("rendered");
//    },
//
//    show: function () {
//        var self = this;
//        self.backdrop = self.createBackdrop();
//        self.createModal();
//    },
//
//    createBackdrop: function () {
//        var self = this,
//            backdrop = new Backdrop(
//                self.$el.parents(self.options.backdrop),
//                self.options.backdropOptions
//            ),
//            zIndex = 1041;
//
//        $(self.options.zIndexSelector).each(function () {
//            zIndex = Math.max(
//                zIndex,
//                parseInt($(this).css("zIndex")) + 1 || 1041
//            );
//        });
//
//        self.$wrapper = $("<div/>")
//            .hide()
//            .css({
//                "z-index": zIndex,
//                "overflow-y": "auto",
//                "position": "fixed",
//                "height": "100%",
//                "width": "100%",
//                "bottom": "0",
//                "left": "0",
//                "right": "0",
//                "top": "0",
//            })
//            .addClass(self.options.templateOptions.classWrapperName)
//            .insertBefore(backdrop.$backdrop)
//            .on("click", function (e) {
//                if (self.options.backdropOptions.closeOnClick) {
//                    e.stopPropagation();
//                    e.preventDefault();
//                    backdrop.hide();
//                }
//            });
//        backdrop.on("hidden", function (e) {
//            if (
//                self.$modal !== undefined &&
//                self.$modal.hasClass(
//                    self.options.templateOptions.classActiveName
//                )
//            ) {
//                self.hide();
//            }
//        });
//        self.loading = new utils.Loading({
//            backdrop: backdrop,
//        });
//        self.$wrapperInner = $("<div/>")
//            .addClass(self.options.classWrapperInnerName)
//            .css({
//                position: "absolute",
//                bottom: "0",
//                left: "0",
//                right: "0",
//                top: "0",
//            })
//            .appendTo(self.$wrapper);
//        return backdrop;
//    },
//
//    _show: function () {
//        var self = this;
//        self.render.apply(self, [self.options]);
//        self.emit("show");
//        self.backdrop.show();
//        self.$wrapper.show();
//        self.loading.hide();
//        self.$el.addClass(self.options.templateOptions.classActiveName);
//        self.$modal.addClass(self.options.templateOptions.classActiveName);
//        registry.scan(self.$modal);
//        self.positionModal();
//        $(window.parent).on("resize.plone-modal.patterns", function () {
//            self.positionModal();
//        });
//        $("body").addClass("plone-modal-open");
//        self.emit("shown");
//        self.activateFocusTrap();
//    },
//    hide: function () {
//        var self = this;
//        if (self.ajaxXHR) {
//            self.ajaxXHR.abort();
//        }
//        self.emit("hide");
//        if (self._suppressHide) {
//            if (!window.confirm(self._suppressHide)) {
//                return;
//            }
//        }
//        self.loading.hide();
//        self.$el.removeClass(self.options.templateOptions.classActiveName);
//        if (self.$modal !== undefined) {
//            self.$modal.remove();
//            self.initModal();
//        }
//        self.$wrapper.remove();
//        if ($(".plone-modal", $("body")).length < 1) {
//            self._suppressHide = undefined;
//            self.backdrop.hide();
//            $("body").removeClass("plone-modal-open");
//            $(window.parent).off("resize.plone-modal.patterns");
//        }
//        self.emit("hidden");
//        self.$el.focus();
//    },
//
//    redraw: function (response, options) {
//        var self = this;
//        self.emit("beforeDraw");
//        self.$modal.remove();
//        self.$raw = $("<div />").append($(utils.parseBodyTag(response)));
//        self.render.apply(self, [options || self.options]);
//        self.$modal.addClass(self.options.templateOptions.classActiveName);
//        self.positionModal();
//        registry.scan(self.$modal);
//        self.emit("afterDraw");
//    },
//});
// EXTERNAL MODULE: ./node_modules/moment/moment.js
var moment = __webpack_require__(79);
var moment_default = /*#__PURE__*/__webpack_require__.n(moment);

// CONCATENATED MODULE: ./node_modules/mockup/src/pat/moment/moment.js




var currentLanguage = new i18n["a" /* default */]().currentLanguage;
var localeLoaded = false;
var patMomentInstances = []; // From https://github.com/moment/moment/blob/3147fbc/src/test/moment/format.js#L463-L468

var MOMENT_LOCALES = "ar-sa ar-tn ar az be bg bn bo br bs ca cs cv cy da de-at de dv el " + "en-au en-ca en-gb en-ie en-nz eo es et eu fa fi fo fr-ca fr-ch fr fy " + "gd gl he hi hr hu hy-am id is it ja jv ka kk km ko lb lo lt lv me mk ml " + "mr ms-my ms my nb ne nl nn pl pt-br pt ro ru se si sk sl sq sr-cyrl " + "sr sv sw ta te th tl-ph tlh tr tzl tzm-latn tzm uk uz vi zh-cn zh-tw";

function isLangSupported(lang) {
  return MOMENT_LOCALES.split(" ").indexOf(lang) !== -1;
}

function lazyLoadMomentLocale() {
  var LANG_FALLBACK = "en";

  if (currentLanguage === LANG_FALLBACK) {
    // English locale is built-in, no need to load, so let's exit early
    // to avoid computing fallback, which happens at every loaded page
    localeLoaded = true;
    return;
  } // Format language as expect by Moment.js, neither POSIX (like TinyMCE) nor IETF


  var lang = currentLanguage.replace("_", "-").toLowerCase(); // Use language code as fallback, otherwise built-in English locale

  lang = isLangSupported(lang) ? lang : lang.split("-")[0];
  lang = isLangSupported(lang) ? lang : LANG_FALLBACK;

  if (lang === LANG_FALLBACK) {
    localeLoaded = true;
    return;
  } //require(["moment-url/" + lang], function () {
  //    localeLoaded = true;
  //    for (var i = 0; i < patMomentInstances.length; i++) {
  //        var patMoment = patMomentInstances[i];
  //        patMoment.init();
  //    }
  //    patMomentInstances = [];
  //});

}

lazyLoadMomentLocale();
/* harmony default export */ var moment_moment = (core_base["a" /* default */].extend({
  name: "moment",
  trigger: ".pat-moment",
  parser: "mockup",
  moment_i18n_map: {
    no: "nb"
  },
  // convert Plone language codes to moment codes.
  defaults: {
    // selector of elements to format dates for
    selector: null,
    // also available options are relative, calendar
    format: "LLL",
    setTitle: false
  },
  convert: function convert($el) {
    var self = this;
    var date = $el.attr("data-date");

    if (!date) {
      date = jquery_js_exposed_default.a.trim($el.html());

      if (date && date !== "None") {
        $el.attr("data-date", date);
      }
    }

    if (!date || date === "None") {
      return;
    }

    if (currentLanguage in self.moment_i18n_map) {
      currentLanguage = self.moment_i18n_map[currentLanguage];
    }

    moment_default.a.locale([currentLanguage, "en"]);
    date = moment_default()(date);

    if (!date.isValid()) {
      return;
    }

    if (self.options.setTitle) {
      $el.attr("title", date.format("LLLL"));
    }

    if (self.options.format === "relative") {
      date = date.fromNow();
    } else if (self.options.format === "calendar") {
      date = date.calendar();
    } else {
      date = date.format(self.options.format);
    }

    if (date) {
      $el.html(date);
    }
  },
  init: function init() {
    var self = this;

    if (!localeLoaded) {
      // The locale has not finished to load yet, we will execute the init
      // again once the locale is loaded.
      patMomentInstances.push(self);
      return;
    }

    if (self.options.selector) {
      self.$el.find(self.options.selector).each(function () {
        self.convert(jquery_js_exposed_default()(this));
      });
    } else {
      self.convert(self.$el);
    }
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/navigationmarker/navigationmarker.js


/* harmony default export */ var navigationmarker = (core_base["a" /* default */].extend({
  name: "navigationmarker",
  trigger: ".pat-navigationmarker",
  parser: "mockup",
  init: function init() {
    var self = this;
    var href = document.querySelector('head link[rel="canonical"]').href || window.location.href;
    jquery_js_exposed_default()("a", this.$el).each(function () {
      var navlink = this.href.replace("/view", "");

      if (href.indexOf(navlink) !== -1) {
        var parent = jquery_js_exposed_default()(this).parent(); // check the input-openers within the path

        var check = parent.find("> input");

        if (check.length) {
          check[0].checked = true;
        } // set "inPath" to all nav items which are within the current path
        // check if parts of navlink are in canonical url parts


        var hrefParts = href.split("/");
        var navParts = navlink.split("/");
        var inPath = false;

        for (var i = 0, size = navParts.length; i < size; i++) {
          // The last path-part must match.
          inPath = false;

          if (navParts[i] === hrefParts[i]) {
            inPath = true;
          }
        }

        if (inPath) {
          parent.addClass("inPath");
        } // set "current" to the current selected nav item, if it is in the navigation structure.


        if (href === navlink) {
          parent.addClass("current");
        }
      }
    });
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/passwordstrength/passwordstrength.js



function loadScript(src) {
  var s,
      i,
      scripts = document.getElementsByTagName("script"); // Check script element doesn't already exist

  for (i = 0; i < scripts.length; i++) {
    if (scripts[i].src.indexOf(src) !== -1) {
      return;
    }
  } // If not, add it to page


  s = document.createElement("script");
  s.type = "text/javascript";
  s.async = true;
  s.src = src;
  scripts[0].parentNode.insertBefore(s, scripts[0]);
}

function jsDiv() {
  return jquery_js_exposed_default()(document.createElement("div"));
}

/* harmony default export */ var passwordstrength = (core_base["a" /* default */].extend({
  name: "passwordstrength",
  trigger: ".pat-passwordstrength",
  parser: "mockup",
  defaults: {
    zxcvbn: "//cdnjs.cloudflare.com/ajax/libs/zxcvbn/1.0/zxcvbn.js"
  },
  init: function init() {
    var self = this,
        $pwfield = this.$el,
        $pwmeter = jsDiv().append([jsDiv(), jsDiv(), jsDiv(), jsDiv()]);

    function setLevel() {
      var score = 0;

      if (typeof window.zxcvbn !== "function") {
        // No zxcvbn yet, try and load it
        loadScript(self.options.zxcvbn);
      } else if ($pwfield[0].value.length > 0) {
        // Run zxcvbn, supplying the value of any other widgets in the form
        score = Math.max(1, window.zxcvbn($pwfield[0].value, [].map.call(($pwfield[0].form || {
          elements: []
        }).elements, function (inp) {
          if (inp === $pwfield[0]) {
            return null;
          }

          return inp.value || null;
        }).filter(function (x) {
          return x;
        })).score);
      }

      $pwmeter.attr("class", "pat-passwordstrength-meter level-" + score);
    }

    $pwfield.after($pwmeter);
    $pwfield.on("keyup", function (e) {
      var timeoutId = 0;
      clearTimeout(timeoutId);
      timeoutId = setTimeout(setLevel, 500);
    });
    setLevel();
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/preventdoublesubmit/preventdoublesubmit.js



/* harmony default export */ var preventdoublesubmit = (core_base["a" /* default */].extend({
  name: "preventdoublesubmit",
  trigger: ".pat-preventdoublesubmit",
  parser: "mockup",
  defaults: {
    message: Object(i18n_wrapper["a" /* default */])("You already clicked the submit button. " + "Do you really want to submit this form again?"),
    guardClassName: "submitting",
    optOutClassName: "allowMultiSubmit"
  },
  init: function init() {
    var self = this; // if this is not a form just return

    if (!self.$el.is("form")) {
      return;
    }

    jquery_js_exposed_default()(":submit", self.$el).click(function (e) {
      // mark the button as clicked
      jquery_js_exposed_default()(":submit").removeAttr("clicked");
      jquery_js_exposed_default()(this).attr("clicked", "clicked"); // if submitting and no opt-out guardClassName is found
      // pop up confirmation dialog

      if (jquery_js_exposed_default()(this).hasClass(self.options.guardClassName) && !jquery_js_exposed_default()(this).hasClass(self.options.optOutClassName)) {
        return self._confirm.call(self);
      }

      jquery_js_exposed_default()(this).addClass(self.options.guardClassName);
    });
  },
  _confirm: function _confirm(e) {
    return window.confirm(this.options.message);
  }
}));
// EXTERNAL MODULE: ./node_modules/mockup/src/pat/select2/select2.js
var select2 = __webpack_require__(52);

// EXTERNAL MODULE: ./node_modules/mockup/src/pat/relateditems/relateditems.js + 6 modules
var relateditems = __webpack_require__(135);

// CONCATENATED MODULE: ./node_modules/mockup/src/pat/querystring/querystring.js








var Criteria = function Criteria() {
  this.init.apply(this, arguments);
};

Criteria.prototype = {
  defaults: {
    indexWidth: "20em",
    remove: "",
    classBetweenDtName: "querystring-criteria-betweendt",
    classWrapperName: "querystring-criteria-wrapper",
    classIndexName: "querystring-criteria-index",
    classOperatorName: "querystring-criteria-operator",
    classValueName: "querystring-criteria-value",
    classRemoveName: "querystring-criteria-remove",
    classResultsName: "querystring-criteria-results",
    classClearName: "querystring-criteria-clear",
    classDepthName: "querystring-criteria-depth"
  },
  init: function init($el, options, indexes, index, operator, value, baseUrl, patternDateOptions, patternAjaxSelectOptions, patternRelateditemsOptions) {
    var self = this;
    self.options = jquery_js_exposed_default.a.extend(true, {}, self.defaults, options);
    self.indexes = indexes;
    self.indexGroups = {};
    self.baseUrl = baseUrl;
    self.advanced = false;
    self.initial = value; // create wrapper criteria and append it to DOM

    self.$wrapper = jquery_js_exposed_default()("<div/>").addClass(self.options.classWrapperName).appendTo($el); // Sub widgets options

    self.patternDateOptions = patternDateOptions || {};
    self.patternAjaxSelectOptions = patternAjaxSelectOptions || {};
    self.patternRelateditemsOptions = patternRelateditemsOptions || {}; // Defaults

    self.patternAjaxSelectOptions = jquery_js_exposed_default.a.extend({
      width: "250px"
    }, self.patternAjaxSelectOptions);
    self.patternRelateditemsOptions = jquery_js_exposed_default.a.extend({
      vocabularyUrl: self.baseUrl + "@@getVocabulary?name=plone.app.vocabularies.Catalog&field=relatedItems",
      width: "400px"
    }, self.patternRelateditemsOptions); // Force set

    self.patternRelateditemsOptions["maximumSelectionSize"] = 1; // Remove button

    self.$remove = jquery_js_exposed_default()("<div>" + self.options.remove + "</div>").addClass(self.options.classRemoveName).appendTo(self.$wrapper).on("click", function (e) {
      self.remove();
    }); // Index selection

    self.$index = jquery_js_exposed_default()("<select><option></option></select>").attr("placeholder", Object(i18n_wrapper["a" /* default */])("Select criteria")); // list of indexes

    jquery_js_exposed_default.a.each(self.indexes, function (value, options) {
      if (options.enabled) {
        if (!self.indexGroups[options.group]) {
          self.indexGroups[options.group] = jquery_js_exposed_default()("<optgroup/>").attr("label", options.group).appendTo(self.$index);
        }

        self.indexGroups[options.group].append(jquery_js_exposed_default()("<option/>").attr("value", value).html(options.title));
      }
    }); // attach index select to DOM

    self.$wrapper.append(jquery_js_exposed_default()("<div/>").addClass(self.options.classIndexName).append(self.$index)); // add blink (select2)

    new select2["default"](self.$index, {
      width: self.options.indexWidth,
      placeholder: Object(i18n_wrapper["a" /* default */])("Select criteria")
    });
    self.$index.on("change", function (e) {
      self.removeValue();
      self.createOperator(e.val);
      self.createClear();
      self.trigger("index-changed");
    });

    if (typeof index !== "undefined") {
      self.$index.select2("val", index);
      self.createOperator(index, operator, value);
      self.createClear();
    }

    self.trigger("create-criteria");
  },
  appendOperators: function appendOperators(index) {
    var self = this;
    self.$operator = jquery_js_exposed_default()("<select/>");

    if (self.indexes[index]) {
      index_all["default"].each(self.indexes[index].operations, function (value) {
        var options = self.indexes[index].operators[value];
        jquery_js_exposed_default()("<option/>").attr("value", value).html(options.title).appendTo(self.$operator);
      });
    } // attach operators select to DOM


    self.$wrapper.append(jquery_js_exposed_default()("<div/>").addClass(self.options.classOperatorName).append(self.$operator)); // add blink (select2)

    new select2["default"](self.$operator, {
      width: "10em"
    });
    self.$operator.on("change", function (e) {
      self.createValue(index);
      self.createClear();
      self.trigger("operator-changed");
    });
  },
  convertPathOperators: function convertPathOperators(oval) {
    var self = this;

    if (self.advanced) {
      return oval;
    } //This allows us to use the same query operation for multiple dropdown options.


    oval = oval.replace("advanced", "relativePath").replace("path", "relativePath");
    return oval;
  },
  createPathOperators: function createPathOperators() {
    var self = this;

    if (self.advanced) {
      self.resetPathOperators();
      return;
    }

    var newOperator = "plone.app.querystring.operation.string.advanced";

    if (typeof self.indexes.path.operators[newOperator] === "undefined") {
      self.indexes.path.operations.push(newOperator);
      self.indexes.path.operators[newOperator] = {
        title: "Advanced",
        widget: "AdvancedPathWidget",
        description: "Enter a custom path string",
        operation: "plone.app.querystring.queryparser._relativePath"
      };
    }

    jquery_js_exposed_default.a.each(self.indexes.path.operators, function (key, value) {
      var options = value;

      if (key.indexOf("absolute") > 0) {
        options.title = "Custom";
      } else if (key.indexOf("relative") > 0) {
        options.title = "Parent (../)";
      } else if (key.indexOf("advanced") > 0) {
        options.title = "Advanced Mode";
      } else {
        options.title = "Current (./)";
        options.widget = "RelativePathWidget";
      }
    });
  },
  resetPathOperators: function resetPathOperators() {
    var self = this;
    jquery_js_exposed_default.a.each(self.indexes.path.operators, function (key, value) {
      var options = value;

      if (key.indexOf("absolute") > 0) {
        options.title = "Absolute Path";
      } else if (key.indexOf("relative") > 0) {
        options.title = "Relative Path";
      } else if (key.indexOf("advanced") > 0) {
        options.title = "Simple Mode";
      } else {
        options.title = "Navigation Path";
        options.widget = "ReferenceWidget";
      }
    });
    return;
  },
  createOperator: function createOperator(index, operator, value) {
    var self = this;
    self.removeOperator();
    self.createPathOperators(); // We must test if we have a "simple" path or an "advanced" one and change the widgets accordingly

    if (index === "path" && value && value !== ".::1" && value !== "..::1" && !value.match(/^[0-9a-f\-]{32,36}::-?[0-9]+$/)) {
      self.advanced = true;
      self.resetPathOperators();
    }

    self.appendOperators(index);

    if (typeof operator === "undefined") {
      operator = self.$operator.select2("val");
    }

    self.$operator.select2("val", operator);
    self.createValue(index, value);
    self.trigger("create-operator");
  },
  createValue: function createValue(index, value) {
    var self = this,
        widget = self.indexes[index].operators[self.$operator.val()].widget,
        $wrapper = jquery_js_exposed_default()("<div/>").addClass(self.options.classValueName).appendTo(self.$wrapper);
    self.removeValue();

    var createDepthSelect = function createDepthSelect(selected) {
      var select = "<div class='depth-select-box'>" + "<label for='depth-select'>Depth</label>" + "<select name='depth-select' class='" + self.options.classDepthName + "'>" + "<option value='-1' selected='selected'>Unlimited</option>";

      for (var i = 0; i <= 10; i += 1) {
        select += "<option value=" + i + " ";

        if ("" + i === selected) {
          select += "selected='selected' ";
        }

        select += ">" + i + "</option>";
      }

      select += "</select>" + "</div>";
      return jquery_js_exposed_default()(select).change(function () {
        self.trigger("depth-changed");
      });
    };

    if (widget === "StringWidget") {
      self.$value = jquery_js_exposed_default()('<input type="text"/>').addClass(self.options.classValueName + "-" + widget).val(value).appendTo($wrapper).change(function () {
        self.trigger("value-changed");
      });
    } else if (widget === "DateWidget") {
      self.$value = jquery_js_exposed_default()('<input type="text"/>').addClass(self.options.classValueName + "-" + widget).attr("data-pat-pickadate", JSON.stringify(self.patternDateOptions)) // have to pass as attributes otherwise time bool will overwritten to an object by the mockupParser
      .val(value).appendTo($wrapper).patternPickadate().on("updated.pickadate.patterns", function () {
        self.trigger("value-changed");
      });
    } else if (widget === "DateRangeWidget") {
      var startwrap = jquery_js_exposed_default()("<span/>").appendTo($wrapper);
      var val1 = "";
      var val2 = "";

      if (value) {
        val1 = value[0] ? value[0] : "";
        val2 = value[1] ? value[1] : "";
      }

      var startdt = jquery_js_exposed_default()('<input type="text"/>').addClass(self.options.classValueName + "-" + widget).addClass(self.options.classValueName + "-" + widget + "-start").attr("data-pat-pickadate", JSON.stringify(self.patternDateOptions)).val(val1).appendTo(startwrap).patternPickadate().on("updated.pickadate.patterns", function () {
        self.trigger("value-changed");
      });
      $wrapper.append(jquery_js_exposed_default()("<span/>").html(Object(i18n_wrapper["a" /* default */])("to")).addClass(self.options.classBetweenDtName));
      var endwrap = jquery_js_exposed_default()("<span/>").appendTo($wrapper);
      var enddt = jquery_js_exposed_default()('<input type="text"/>').addClass(self.options.classValueName + "-" + widget).addClass(self.options.classValueName + "-" + widget + "-end").attr("data-pat-pickadate", JSON.stringify(self.patternDateOptions)).val(val2).appendTo(endwrap).patternPickadate().on("updated.pickadate.patterns", function () {
        self.trigger("value-changed");
      });
      self.$value = [startdt, enddt];
    } else if (widget === "RelativeDateWidget") {
      self.$value = jquery_js_exposed_default()('<input type="text"/>').after(jquery_js_exposed_default()("<span/>").html(Object(i18n_wrapper["a" /* default */])("days"))).addClass(self.options.classValueName + "-" + widget).val(value).appendTo($wrapper).change(function () {
        self.trigger("value-changed");
      });
    } else if (widget === "AdvancedPathWidget") {
      if (self.advanced) {
        self.advanced = false;
      } else {
        self.advanced = true;
      }

      self.createPathOperators();
      self.removeOperator();
      self.appendOperators(index);
      self.createValue(index);
    } else if (widget === "RelativePathWidget") {
      if (self.advanced) {
        self.$value = jquery_js_exposed_default()('<input type="text"/>').addClass(self.options.classValueName + "-" + widget).appendTo($wrapper).val(value).change(function () {
          self.trigger("value-changed");
        });
      } else {
        //These 2 hard-coded values correspond to the "Current (./)" and "Parent (../)" options
        //under the location index.
        if (!value) {
          value = ".::1";

          if (self.$operator.val().indexOf("relativePath") > 0) {
            value = "..::1";
          }
        } else {
          if (value === ".::1") {
            self.$operator.select2("val", "plone.app.querystring.operation.string.path");
          }
        }

        self.$value = jquery_js_exposed_default()('<input type="hidden"/>').addClass(self.options.classValueName + "-" + widget).appendTo($wrapper).val(value);
      }
    } else if (widget === "ReferenceWidget") {
      if (self.advanced) {
        self.$value = jquery_js_exposed_default()('<input type="text"/>').addClass(self.options.classValueName + "-" + widget).val(value).appendTo($wrapper).change(function () {
          self.trigger("value-changed");
        });
      } else {
        var pathAndDepth = ["", -1];

        if (typeof value !== "undefined") {
          pathAndDepth = value.split("::");
        }

        self.$value = jquery_js_exposed_default()('<input type="text"/>').addClass(self.options.classValueName + "-" + widget).appendTo($wrapper).val(pathAndDepth[0]).patternRelateditems(self.patternRelateditemsOptions).change(function () {
          self.trigger("value-changed");
        });
        self.$value.parent().after(createDepthSelect(pathAndDepth[1]));
        self.$value.parents("." + self.options.classValueName).addClass("break-line");
      }
    } else if (widget === "MultipleSelectionWidget") {
      self.$value = jquery_js_exposed_default()("<select/>").prop("multiple", true).addClass(self.options.classValueName + "-" + widget).appendTo($wrapper).change(function () {
        self.trigger("value-changed");
      });

      if (self.indexes[index]) {
        jquery_js_exposed_default.a.each(self.indexes[index].values, function (value, options) {
          jquery_js_exposed_default()("<option/>").attr("value", value).html(options.title).appendTo(self.$value);
        });
      }

      new select2["default"](self.$value, self.patternAjaxSelectOptions);
    }

    if (typeof value !== "undefined" && typeof self.$value !== "undefined") {
      if (jquery_js_exposed_default.a.isArray(self.$value)) {
        jquery_js_exposed_default.a.each(value, function (i, v) {
          self.$value[i].select2("val", v);
        });
      } else {
        var trimmedValue = value;

        if (typeof value === "string" && widget !== "RelativePathWidget") {
          trimmedValue = value.replace(/::-?[0-9]+/, "");
        }

        self.$value.select2("val", trimmedValue);
      }
    }

    self.trigger("create-value");
  },
  createClear: function createClear() {
    var self = this;
    self.removeClear();
    self.$clear = jquery_js_exposed_default()("<div/>").addClass(self.options.classClearName).appendTo(self.$wrapper);
  },
  remove: function remove() {
    var self = this;
    self.trigger("remove");
    self.$remove.remove();
    self.$index.parent().remove();
    self.removeOperator();
    self.removeValue();
    self.removeClear();
    self.$wrapper.remove();
  },
  removeClear: function removeClear() {
    var self = this;
    self.trigger("remove-clear");

    if (self.$clear) {
      self.$clear.remove();
    }
  },
  removeOperator: function removeOperator() {
    var self = this;
    self.trigger("remove-operator");

    if (self.$operator) {
      self.$operator.parent().remove();
    }
  },
  removeValue: function removeValue() {
    var self = this;
    self.trigger("remove-value");

    if (self.$value) {
      if (jquery_js_exposed_default.a.isArray(self.$value)) {
        // date ranges have 2 values
        self.$value[0].parents(".querystring-criteria-value").remove();
      } else {
        self.$value.parents(".querystring-criteria-value").remove();
      }
    }
  },
  // builds the parameters to go into the http querystring for requesting
  // results from the query builder
  buildQueryPart: function buildQueryPart() {
    var self = this; // index

    var ival = self.$index.select2("val");

    if (ival === "") {
      // no index selected, no query
      return "";
    }

    var istr = "query.i:records=" + ival; // operator

    if (typeof self.$operator === "undefined") {
      // no operator, no query
      return "";
    }

    var oval = self.$operator.val();

    if (ival === "path") {
      if (oval.indexOf("advanced") > 0) {
        return "";
      }

      oval = self.convertPathOperators(oval);
    }

    var ostr = "query.o:records=" + oval; // value(s)

    var vstrbase = "query.v:records=",
        vstrlistbase = "query.v:records:list=",
        vstr = [];

    if (typeof self.$value === "undefined") {
      vstr.push(vstrbase);
    } else if (jquery_js_exposed_default.a.isArray(self.$value)) {
      // handles only datepickers from the 'between' operator right now
      jquery_js_exposed_default.a.each(self.$value, function (i, v) {
        vstr.push(vstrlistbase + jquery_js_exposed_default()(this).val());
      });
    } else if (jquery_js_exposed_default.a.isArray(self.$value.val())) {
      // handles multible values
      jquery_js_exposed_default.a.each(self.$value.val(), function (i, v) {
        vstr.push(vstrlistbase + v);
      });
    } else {
      var str = vstrbase + self.$value.val();

      if (ival === "path" && self.$value.val() !== "") {
        str += self.getDepthString();
      } else if (typeof self.initial !== "undefined") {
        str = vstrbase + self.initial; //Sometimes the RelatedItemsWidget won't be loaded by this point.
        //This only should happen on the initial page load.

        delete self.initial;
      }

      vstr.push(str);
    }

    return istr + "&" + ostr + "&" + vstr.join("&");
  },
  getJSONListStr: function getJSONListStr() {
    var self = this; // index

    var ival = self.$index.select2("val");

    if (ival === "") {
      // no index selected, no query
      return "";
    } // operator


    if (typeof self.$operator === "undefined") {
      // no operator, no query
      return "";
    }

    var oval = self.$operator.val();

    if (ival === "path") {
      if (oval.indexOf("advanced") > 0) {
        //The advanced function is just a placeholder,
        //We don't want to send an actual query
        return "";
      }

      oval = self.convertPathOperators(oval);
    } // value(s)


    var varr = [];

    if (jquery_js_exposed_default.a.isArray(self.$value)) {
      // handles only datepickers from the 'between' operator right now
      jquery_js_exposed_default.a.each(self.$value, function (i, v) {
        varr.push(jquery_js_exposed_default()(this).val());
      });
    } else if (typeof self.$value !== "undefined") {
      var value = self.$value.val();

      if (ival === "path" && value) {
        var depth = self.getDepthString();

        if (depth) {
          value += depth;
        }
      }

      varr.push(value);
    }

    var vval;

    if (varr.length > 1) {
      vval = '["' + varr.join('","') + '"]';
    } else if (varr.length === 1) {
      vval = JSON.stringify(varr[0]);
    } else {
      vval = '""';
    }

    if (typeof self.indexes[ival].operators[oval] === "undefined") {
      return;
    }

    return '{"i":"' + ival + '", "o":"' + oval + '", "v":' + vval + "}";
  },
  getDepthString: function getDepthString() {
    var self = this,
        out = "",
        depth = jquery_js_exposed_default()("." + self.options.classDepthName).val();

    if (depth !== "" && typeof depth !== "undefined") {
      out += "::" + depth;
    }

    return out;
  },
  trigger: function trigger(name) {
    this.$wrapper.trigger(name + "-criteria.querystring.patterns", [this]);
  },
  on: function on(name, callback) {
    this.$wrapper.on(name + "-criteria.querystring.patterns", callback);
  }
};
/* harmony default export */ var querystring = (core_base["a" /* default */].extend({
  name: "querystring",
  trigger: ".pat-querystring",
  parser: "mockup",
  defaults: {
    indexes: [],
    classWrapperName: "querystring-wrapper",
    criteria: {},
    indexOptionsUrl: null,
    previewURL: "portal_factory/@@querybuilder_html_results",
    // base url to use to request preview information from
    previewCountURL: "portal_factory/@@querybuildernumberofresults",
    patternDateOptions: {},
    patternAjaxSelectOptions: {},
    patternRelateditemsOptions: {},
    classSortLabelName: "querystring-sort-label",
    classSortReverseName: "querystring-sortreverse",
    classSortReverseLabelName: "querystring-sortreverse-label",
    classPreviewCountWrapperName: "querystring-previewcount-wrapper",
    classPreviewResultsWrapperName: "querystring-previewresults-wrapper",
    classPreviewWrapperName: "querystring-preview-wrapper",
    classPreviewName: "querystring-preview",
    classPreviewTitleName: "querystring-preview-title",
    classPreviewDescriptionName: "querystring-preview-description",
    classSortWrapperName: "querystring-sort-wrapper",
    showPreviews: true
  },
  init: function init() {
    var self = this; // hide input element

    self.$el.hide(); // create wrapper for out criteria

    self.$wrapper = jquery_js_exposed_default()("<div/>");
    self.$el.after(self.$wrapper); // initialization can be detailed if by ajax

    self.initialized = false;

    if (self.options.indexOptionsUrl) {
      jquery_js_exposed_default.a.ajax({
        url: self.options.indexOptionsUrl,
        success: function success(data) {
          self.options.indexes = data.indexes;
          self.options["sortable_indexes"] = data["sortable_indexes"]; // jshint ignore:line

          self._init();
        },
        error: function error(xhr) {// XXX handle this...
        }
      });
    } else {
      self._init();
    }
  },
  _init: function _init() {
    var self = this;
    self.$criteriaWrapper = jquery_js_exposed_default()("<div/>").addClass(self.options.classWrapperName).appendTo(self.$wrapper);
    self.$sortWrapper = jquery_js_exposed_default()("<div/>").addClass(self.options.classSortWrapperName).appendTo(self.$wrapper);

    if (self.options.showPreviews === "false") {
      self.options.showPreviews = false;
    }

    if (self.options.showPreviews) {
      self.$previewWrapper = jquery_js_exposed_default()("<div/>").addClass(self.options.classPreviewWrapperName).appendTo(self.$wrapper); // preview title and description

      jquery_js_exposed_default()("<div/>").addClass(self.options.classPreviewTitleName).html(Object(i18n_wrapper["a" /* default */])("Preview")).appendTo(self.$previewWrapper);
      jquery_js_exposed_default()("<div/>").addClass(self.options.classPreviewDescriptionName).html(Object(i18n_wrapper["a" /* default */])("Preview of at most 10 items")).appendTo(self.$previewWrapper);
    }

    self.criterias = []; // create populated criterias

    if (self.$el.val()) {
      jquery_js_exposed_default.a.each(JSON.parse(self.$el.val()), function (i, item) {
        self.createCriteria(item.i, item.o, item.v);
      });
    } // add empty criteria which enables users to create new cr


    self.createCriteria(); // add sort/order fields

    self.createSort(); // add criteria preview pane to see results from criteria query

    if (self.options.showPreviews) {
      self.refreshPreviewEvent();
    }

    self.$el.trigger("initialized");
    self.initialized = true;
  },
  createCriteria: function createCriteria(index, operator, value) {
    var self = this,
        baseUrl = self.options.indexOptionsUrl.replace(/(@@.*)/g, ""),
        criteria = new Criteria(self.$criteriaWrapper, self.options.criteria, self.options.indexes, index, operator, value, baseUrl, self.options.patternDateOptions, self.options.patternAjaxSelectOptions, self.options.patternRelateditemsOptions);
    criteria.on("remove", function (e) {
      if (self.criterias[self.criterias.length - 1] === criteria) {
        self.createCriteria();
      }
    });
    criteria.on("index-changed", function (e) {
      if (self.criterias[self.criterias.length - 1] === criteria) {
        self.createCriteria();
      }
    }); //This prevents multiple requests from going off after making a single change

    var _doupdates = function _doupdates() {
      self.refreshPreviewEvent();
      self.updateValue();
    };

    var _updateTimeout = -1;

    var doupdates = function doupdates() {
      clearTimeout(_updateTimeout);
      _updateTimeout = setTimeout(_doupdates, 100);
    };

    criteria.on("remove", function (e, criteria) {
      if (self.criterias.indexOf(criteria) !== -1) {
        self.criterias.splice(self.criterias.indexOf(criteria), 1);
      }

      doupdates(e, criteria);
    });
    criteria.on("remove-clear", doupdates);
    criteria.on("remove-operator", doupdates);
    criteria.on("remove-value", doupdates);
    criteria.on("index-changed", doupdates);
    criteria.on("operator-changed", doupdates);
    criteria.on("create-criteria", doupdates);
    criteria.on("create-operator", doupdates);
    criteria.on("create-value", doupdates);
    criteria.on("value-changed", doupdates);
    criteria.on("depth-changed", doupdates);
    self.criterias.push(criteria);
  },
  createSort: function createSort() {
    var self = this; // elements that may exist already on the page
    // XXX do this in a way so it'll work with other forms will work
    // as long as they provide sort_on and sort_reversed fields in z3c form

    var existingSortOn = jquery_js_exposed_default()('[id$="-sort_on"]').filter('[id^="formfield-"]');
    var existingSortOrder = jquery_js_exposed_default()('[id$="-sort_reversed"]').filter('[id^="formfield-"]');
    jquery_js_exposed_default()("<span/>").addClass(self.options.classSortLabelName).html(Object(i18n_wrapper["a" /* default */])("Sort on")).appendTo(self.$sortWrapper);
    self.$sortOn = jquery_js_exposed_default()("<select/>").attr("name", "sort_on").appendTo(self.$sortWrapper).change(function () {
      self.refreshPreviewEvent.call(self);
      jquery_js_exposed_default()('[id$="sort_on"]', existingSortOn).val(jquery_js_exposed_default()(this).val());
    });
    self.$sortOn.append(jquery_js_exposed_default()('<option value="">' + Object(i18n_wrapper["a" /* default */])("No sorting") + "</option>")); // default no sorting

    for (var key in self.options["sortable_indexes"]) {
      // jshint ignore:line
      self.$sortOn.append(jquery_js_exposed_default()("<option/>").attr("value", key).html(self.options.indexes[key].title));
    }

    new select2["default"](self.$sortOn, {
      width: "150px"
    });
    self.$sortOrder = jquery_js_exposed_default()('<input type="checkbox" />').attr("name", "sort_reversed:boolean").change(function () {
      self.refreshPreviewEvent.call(self);

      if (jquery_js_exposed_default()(this).prop("checked")) {
        jquery_js_exposed_default()('.option input[type="checkbox"]', existingSortOrder).prop("checked", true);
      } else {
        jquery_js_exposed_default()('.option input[type="checkbox"]', existingSortOrder).prop("checked", false);
      }
    });
    jquery_js_exposed_default()("<span/>").addClass(self.options.classSortReverseName).appendTo(self.$sortWrapper).append(self.$sortOrder).append(jquery_js_exposed_default()("<span/>").html(Object(i18n_wrapper["a" /* default */])("Reversed Order")).addClass(self.options.classSortReverseLabelName)); // if the form already contains the sort fields, hide them! Their values
    // will be synced back and forth between the querystring's form elements

    if (existingSortOn.length >= 1 && existingSortOrder.length >= 1) {
      var reversed = jquery_js_exposed_default()('.option input[type="checkbox"]', existingSortOrder).prop("checked");
      var sortOn = jquery_js_exposed_default()('[id$="-sort_on"]', existingSortOn).val();

      if (reversed) {
        self.$sortOrder.prop("checked", true);
      }

      self.$sortOn.select2("val", sortOn);
      jquery_js_exposed_default()(existingSortOn).hide();
      jquery_js_exposed_default()(existingSortOrder).hide();
    }
  },
  refreshPreviewEvent: function refreshPreviewEvent(value) {
    var self = this;

    if (!self.options.showPreviews) {
      return; // cut out of this if there are no previews available
    }
    /* TEMPORARY */
    //if (typeof self._tmpcnt === 'undefined') { self._tmpcnt = 0; }
    //self._tmpcnt++;

    /* /TEMPORARY */


    if (typeof self._previewXhr !== "undefined") {
      self._previewXhr.abort();
    }
    /*
    if (typeof self._count_xhr !== 'undefined') {
    self._count_xhr.abort();
    }
    */


    if (typeof self.$previewPane !== "undefined") {
      self.$previewPane.remove();
    }

    var query = [],
        querypart;
    jquery_js_exposed_default.a.each(self.criterias, function (i, criteria) {
      var querypart = criteria.buildQueryPart();

      if (querypart !== "") {
        query.push(querypart);
      }
    });
    self.$previewPane = jquery_js_exposed_default()("<div/>").addClass(self.options.classPreviewName).appendTo(self.$previewWrapper);

    if (query.length <= 0) {
      jquery_js_exposed_default()("<div/>").addClass(self.options.classPreviewCountWrapperName).html("No results to preview").prependTo(self.$previewPane);
      return; // no query means nothing to send out requests for
    }

    query.push("sort_on=" + self.$sortOn.val());

    if (self.$sortOrder.prop("checked")) {
      query.push("sort_order=reverse");
    }
    /* TEMPORARY */
    //self.$previewPane.html(
    //    'refreshed ' + self._tmpcnt + ' times<br />'
    //    + (query.length > 1 ? query.join('<br />&') : query));

    /* /TEMPORARY */

    /*
    self._count_xhr = $.get(self.options.previewCountURL + '?' + query.join('&'))
      .done(function(data, stat) {
        $('<div/>')
          .addClass(self.options.classPreviewCountWrapperName)
          .html(data)
          .prependTo(self.$previewPane);
      });
    */


    self._previewXhr = jquery_js_exposed_default.a.get(self.options.previewURL + "?" + query.join("&")).done(function (data, stat) {
      jquery_js_exposed_default()("<div/>").addClass(self.options.classPreviewResultsWrapperName).html(data).appendTo(self.$previewPane);
    });
  },
  updateValue: function updateValue() {
    // updating the original input with json data in the form:
    // [
    //    {i:'index', o:'operator', v:'value'}
    // ]
    var self = this;
    var criteriastrs = [];
    jquery_js_exposed_default.a.each(self.criterias, function (i, criteria) {
      var jsonstr = criteria.getJSONListStr();

      if (jsonstr !== "") {
        criteriastrs.push(jsonstr);
      }
    });
    var existing = self.$el.val();
    var val = "[" + criteriastrs.join(",") + "]";
    self.$el.val(val);
    self.$el.trigger("change");
  }
}));
// EXTERNAL MODULE: ./node_modules/jquery.recurrenceinput.js/lib/jquery.tools.dateinput.js
var jquery_tools_dateinput = __webpack_require__(368);

// EXTERNAL MODULE: ./node_modules/jquery.recurrenceinput.js/lib/jquery.tools.overlay.js
var jquery_tools_overlay = __webpack_require__(369);

// EXTERNAL MODULE: ./node_modules/jquery.recurrenceinput.js/lib/jquery.tmpl.js
var jquery_tmpl = __webpack_require__(370);

// EXTERNAL MODULE: ./node_modules/jquery.recurrenceinput.js/src/jquery.recurrenceinput.js
var jquery_recurrenceinput = __webpack_require__(371);

// CONCATENATED MODULE: ./node_modules/mockup/src/pat/recurrence/recurrence.js

 // tmpl BEFORE recurrenceinput





/* harmony default export */ var recurrence = (core_base["a" /* default */].extend({
  name: "recurrence",
  trigger: ".pat-recurrence",
  parser: "mockup",
  defaults: {
    // just passed onto the widget
    language: "en",
    localization: null,
    configuration: {}
  },
  init: function init() {
    this.$el.addClass("recurrence-widget");

    if (this.options.localization) {
      jquery_js_exposed_default.a.tools.recurrenceinput.localize(this.options.language, this.options.localization);
    }

    jquery_js_exposed_default()(this.el).recurrenceinput(this.options.configuration);
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/sortable/sortable.js
function sortable_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function sortable_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { sortable_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { sortable_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

 // needed for ``await`` support



/* harmony default export */ var sortable = (core_base["a" /* default */].extend({
  name: "sortable",
  trigger: ".pat-sortable",
  parser: "mockup",
  defaults: {
    selector: "li",
    dragClass: "item-dragging",
    cloneClass: "dragging",
    drop: undefined // callback function or name of global function

  },
  init: function () {
    var _init = sortable_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var Sortable;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return __webpack_require__.e(/* import() */ 62).then(__webpack_require__.bind(null, 594));

            case 2:
              Sortable = _context.sent;
              Sortable = Sortable.default;
              new Sortable(this.$el[0], {
                draggable: this.options.selector,
                chosenClass: this.options.dragClass,
                dragClass: this.options.cloneClass,
                onEnd: function (e) {
                  var cb = this.options.drop;

                  if (!cb) {
                    return;
                  }

                  if (typeof cb === "string") {
                    cb = window[this.options.drop];
                  }

                  cb(jquery_js_exposed_default()(e.item), e.newIndex - e.oldIndex);
                }.bind(this)
              });

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function init() {
      return _init.apply(this, arguments);
    }

    return init;
  }()
}));
// EXTERNAL MODULE: ./node_modules/jquery.cookie/jquery.cookie.js
var jquery_cookie = __webpack_require__(218);

// EXTERNAL MODULE: ./node_modules/mockup/src/core/ui/views/container.js
var views_container = __webpack_require__(78);

// CONCATENATED MODULE: ./node_modules/mockup/src/core/ui/views/toolbar.js

/* harmony default export */ var toolbar = (views_container["a" /* default */].extend({
  tagName: "div",
  className: "navbar",
  idPrefix: "toolbar-"
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/core/ui/views/buttongroup.js


/* harmony default export */ var buttongroup = (views_container["a" /* default */].extend({
  tagName: "div",
  className: "btn-group",
  idPrefix: "btngroup-",
  disable: function disable() {
    index_all["default"].each(this.items, function (button) {
      button.disable();
    });
  },
  enable: function enable() {
    index_all["default"].each(this.items, function (button) {
      button.enable();
    });
  }
}));
// EXTERNAL MODULE: ./node_modules/mockup/src/core/ui/views/button.js
var views_button = __webpack_require__(51);

// EXTERNAL MODULE: ./node_modules/mockup/src/core/ui/views/base.js
var views_base = __webpack_require__(32);

// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/js/navigation.js
 // use a more primative class than Backbone.Model?

/* harmony default export */ var navigation = (backbone_default.a.Model.extend({
  initialize: function initialize(options) {
    this.options = options;
    this.app = options.app;
    this.model = options.model;
  },
  folderClicked: function folderClicked(e) {
    e.preventDefault(); // handler for folder, go down path and show in contents window.

    var self = this;
    self.app.setCurrentPath(self.model.attributes.path); // also switch to fix page in batch

    self.app.collection.goTo(self.app.collection.information.firstPage);
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/templates/actionmenu.xml
/* harmony default export */ var actionmenu = ("<% _.each(menuOptions.button, function(menuOption){ %>\n<a class=\"action <%- menuOption.name %> <%- menuOption.idx %> pat-tooltip <%- menuOption.css %>\"\n    href=\"<%- menuOption.url %>\"\n    title=\"<%- _t(menuOption.title) %>\"\n    aria-label=\"<%- _t(menuOption.title) %>\">\n  <% if (menuOption.iconCSS) { %>\n  <span class=\"<%- menuOption.iconCSS %>\"></span>\n  <% } else { %>\n  <%- _t(menuOption.title) %>\n  <% } %>\n</a>&nbsp;\n<% }); %>\n\n\n<% if (menuOptions.dropdown) { %>\n<a class=\"dropdown-toggle\"\n    data-toggle=\"dropdown\"\n    href=\"#\"\n    aria-haspopup=\"true\"\n    aria-expanded=\"true\"\n    id=\"<%- id %>\"\n    title='<%- _t(\"Actions\") %>'>\n  <span class=\"glyphicon glyphicon-cog\"></span><span class=\"caret\"></span>\n</a>\n<ul class=\"dropdown-menu pull-right\" aria-labelledby=\"<%- id %>\">\n  <% if (header) { %>\n    <li class=\"dropdown-header\"><%- header %></li>\n    <li class=\"divider\"></li>\n  <% } %>\n\n  <% _.each(menuOptions.dropdown, function(menuOption){ %>\n  <li>\n    <a class=\"action <%- menuOption.name %> <%- menuOption.idx %> <%- menuOption.css %>\"\n        href=\"<%- menuOption.url %>\">\n      <% if (menuOption.iconCSS) { %>\n      <span class=\"<%- menuOption.iconCSS %>\"></span>\n      <% } %>\n      <%- _t(menuOption.title) %>\n    </a>\n  </li>\n  <% }); %>\n</ul>\n<% } %>\n");
// EXTERNAL MODULE: ./node_modules/bootstrap/js/src/dropdown.js + 2 modules
var dropdown = __webpack_require__(262);

// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/js/actionmenu.js


var menuOptions = {
  "openItem": {
    url: "#",
    title: Object(i18n_wrapper["a" /* default */])("Open"),
    category: "button",
    iconCSS: "glyphicon glyphicon-eye-open",
    css: "",
    modal: false
  },
  "editItem": {
    url: "#",
    title: Object(i18n_wrapper["a" /* default */])("Edit"),
    category: "button",
    iconCSS: "glyphicon glyphicon-pencil",
    css: "",
    modal: false
  },
  "cutItem": {
    method: "cutClicked",
    url: "#",
    title: Object(i18n_wrapper["a" /* default */])("Cut"),
    category: "dropdown",
    iconCSS: "glyphicon glyphicon-scissors",
    css: "",
    modal: false
  },
  "copyItem": {
    method: "copyClicked",
    url: "#",
    title: Object(i18n_wrapper["a" /* default */])("Copy"),
    category: "dropdown",
    iconCSS: "glyphicon glyphicon-duplicate",
    css: "",
    modal: false
  },
  "pasteItem": {
    method: "pasteClicked",
    url: "#",
    title: Object(i18n_wrapper["a" /* default */])("Paste"),
    category: "dropdown",
    iconCSS: "glyphicon glyphicon-open-file",
    css: "",
    modal: false
  },
  "move-top": {
    method: "moveTopClicked",
    url: "#",
    title: Object(i18n_wrapper["a" /* default */])("Move to top of folder"),
    category: "dropdown",
    iconCSS: "glyphicon glyphicon-step-backward rright",
    css: "",
    modal: false
  },
  "move-bottom": {
    method: "moveBottomClicked",
    url: "#",
    title: Object(i18n_wrapper["a" /* default */])("Move to bottom of folder"),
    category: "dropdown",
    iconCSS: "glyphicon glyphicon-step-backward rleft",
    css: "",
    modal: false
  },
  "set-default-page": {
    method: "setDefaultPageClicked",
    url: "#",
    title: Object(i18n_wrapper["a" /* default */])("Set as default page"),
    category: "dropdown",
    iconCSS: "glyphicon glyphicon-ok-circle",
    css: "",
    modal: false
  },
  "selectAll": {
    method: "selectAll",
    url: "#",
    title: Object(i18n_wrapper["a" /* default */])("Select all contained items"),
    category: "dropdown",
    iconCSS: "glyphicon glyphicon-check",
    css: "",
    modal: false
  }
};

var actionmenu_ActionMenu = function ActionMenu(menu) {
  // If an explicit menu was specified as an option to AppView, this
  // constructor will not override that.
  if (menu.menuOptions !== null) {
    return menu.menuOptions;
  }

  var model = menu.model.attributes;
  var app = menu.app;

  var result = index_all["default"].clone(menuOptions);

  if (!(app.pasteAllowed() && model.is_folderish)) {
    delete result.pasteItem;
  }

  if (app.inQueryMode() || menu.options.canMove === false) {
    delete result["move-top"];
    delete result["move-bottom"];
  }

  if (app.defaultPageTypes.indexOf(model.portal_type) == -1 || !app.setDefaultPageUrl) {
    delete result["set-default-page"];
  }

  if (!model.is_folderish) {
    delete result.selectAll;
  }

  var typeToViewAction = app.options.typeToViewAction;
  var viewAction = typeToViewAction && typeToViewAction[model.portal_type] || "";
  result.openItem.url = model.getURL + viewAction;
  result.editItem.url = model.getURL + "/edit";
  return result;
};

/* harmony default export */ var js_actionmenu = (actionmenu_ActionMenu);
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/js/models/result.js

/* harmony default export */ var models_result = (backbone_default.a.Model.extend({
  defaults: function defaults() {
    return {
      is_folderish: false,
      review_state: "",
      getURL: ""
    };
  },
  uid: function uid() {
    return this.attributes.UID;
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/js/actions.js





 // use a more primative class than Backbone.Model?

/* harmony default export */ var actions = (backbone_default.a.Model.extend({
  initialize: function initialize(options) {
    this.options = options;
    this.app = options.app;
    this.model = options.model;
    this.selectedCollection = this.app.selectedCollection;
  },
  selectAll: function selectAll(e) {
    // This implementation is very specific to the default collection
    // with the reliance on its queryParser and queryHelper.  Custom
    // collection (Backbone.Paginator.requestPager implementation)
    // will have to come up with their own action for this.
    e.preventDefault();
    var self = this;
    var page = 1;
    var count = 0;

    var getPage = function getPage() {
      self.app.loading.show();
      jquery_js_exposed_default.a.ajax({
        url: self.app.collection.url,
        type: "GET",
        dataType: "json",
        data: {
          query: self.app.collection.queryParser({
            searchPath: self.model.attributes.path
          }),
          batch: JSON.stringify({
            page: page,
            size: 100
          }),
          attributes: JSON.stringify(self.app.collection.queryHelper.options.attributes)
        }
      }).done(function (data) {
        var items = self.app.collection.parse(data, count);
        count += items.length;

        index_all["default"].each(items, function (item) {
          self.app.selectedCollection.add(new models_result(item));
        });

        page += 1;

        if (data.total > count) {
          getPage();
        } else {
          self.app.loading.hide();
          self.app.tableView.render();
        }
      });
    };

    getPage();
  },
  doAction: function doAction(buttonName, successMsg, failMsg) {
    var self = this;
    jquery_js_exposed_default.a.ajax({
      url: self.app.buttons.get(buttonName).options.url,
      data: {
        selection: JSON.stringify([self.model.attributes.UID]),
        folder: self.model.attributes.path,
        _authenticator: mockup_src_core_utils["a" /* default */].getAuthenticator()
      },
      dataType: "json",
      type: "POST"
    }).done(function (data) {
      var msg;

      if (data.status === "success") {
        msg = Object(i18n_wrapper["a" /* default */])(successMsg + ' "' + self.model.attributes.Title + '"');
        self.app.collection.pager();
        self.app.updateButtons();
      } else {
        msg = Object(i18n_wrapper["a" /* default */])("Error " + failMsg + ' "' + self.model.attributes.Title + '"');
      }

      self.app.clearStatus();
      self.app.setStatus({
        text: msg,
        type: data.status || "warning"
      });
    });
  },
  cutClicked: function cutClicked(e) {
    var self = this;
    e.preventDefault();
    self.doAction("cut", Object(i18n_wrapper["a" /* default */])("Cut"), Object(i18n_wrapper["a" /* default */])("cutting"));
  },
  copyClicked: function copyClicked(e) {
    var self = this;
    e.preventDefault();
    self.doAction("copy", Object(i18n_wrapper["a" /* default */])("Copied"), Object(i18n_wrapper["a" /* default */])("copying"));
  },
  pasteClicked: function pasteClicked(e) {
    var self = this;
    e.preventDefault();
    self.doAction("paste", Object(i18n_wrapper["a" /* default */])("Pasted into"), Object(i18n_wrapper["a" /* default */])("Error pasting into"));
  },
  moveTopClicked: function moveTopClicked(e) {
    e.preventDefault();
    this.app.moveItem(this.model.attributes.id, "top");
  },
  moveBottomClicked: function moveBottomClicked(e) {
    e.preventDefault();
    this.app.moveItem(this.model.attributes.id, "bottom");
  },
  setDefaultPageClicked: function setDefaultPageClicked(e) {
    e.preventDefault();
    var self = this;
    jquery_js_exposed_default.a.ajax({
      url: self.app.getAjaxUrl(self.app.setDefaultPageUrl),
      type: "POST",
      data: {
        _authenticator: jquery_js_exposed_default()('[name="_authenticator"]').val(),
        id: this.model.attributes.id
      },
      success: function success(data) {
        self.app.ajaxSuccessResponse.apply(self.app, [data]);
      },
      error: function error(data) {
        self.app.ajaxErrorResponse.apply(self.app, [data]);
      }
    });
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/js/views/actionmenu.js
function actionmenu_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function actionmenu_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { actionmenu_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { actionmenu_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

 // needed for ``await`` support













/* harmony default export */ var views_actionmenu = (views_base["a" /* default */].extend({
  className: "btn-group actionmenu",
  template: index_all["default"].template(actionmenu),
  // Static menu options
  menuOptions: null,
  // Dynamic menu options
  eventConstructor: function eventConstructor(definition) {
    var method = definition.method;

    if (!method || !this.actions[method]) {
      return false;
    }

    return this.actions[method];
  },
  events: function events() {
    /* Backbone.view.events
     * Specify a set of DOM events, which will bound to methods on the view.
     */
    var self = this;
    var result = {};
    var menuOptionsCategorized = {};

    index_all["default"].each(self.menuOptions, function (menuOption, key) {
      // set a unique identifier to uniquely bind the events.
      var idx = mockup_src_core_utils["a" /* default */].generateId();
      menuOption.idx = idx;
      menuOption.name = key; // we want to add the action's key as class name to the output.

      var category = menuOption.category || "dropdown";

      if (menuOptionsCategorized[category] === undefined) {
        menuOptionsCategorized[category] = [];
      }

      menuOptionsCategorized[category].push(menuOption);
      menuOption.css = menuOption.css || "";

      if (menuOption.modal === true) {
        // add standard pat-plone-modal.
        // If you want another modal implementation, don't use modal=true but set the css option on action items.
        menuOption.css += " pat-plone-modal";
      } // Create event handler and add it to the results object.


      var e = self.eventConstructor(menuOption);

      if (e) {
        result["click a." + idx] = e;
      }
    }); // Abusing the loop above to also initialize menuOptionsCategorized


    self.menuOptionsCategorized = menuOptionsCategorized;
    return result;
  },
  initialize: function () {
    var _initialize = actionmenu_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(options) {
      var self;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              self = this;
              this.actions = new actions(options);
              views_base["a" /* default */].prototype.initialize.apply(self, [options]);
              self.options = options;
              self.selectedCollection = self.app.selectedCollection; // Then acquire the constructor method if specified, and
              // override those options here.  All definition done here so
              // that self.events() will return the right things.

              self.menuOptions = js_actionmenu(self);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function initialize(_x) {
      return _initialize.apply(this, arguments);
    }

    return initialize;
  }(),
  render: function render() {
    var self = this;
    self.$el.empty();
    var data = this.model.toJSON();
    data.header = self.options.header || null;
    data.menuOptions = self.menuOptionsCategorized;
    self.$el.html(self.template(jquery_js_exposed_default.a.extend({
      _t: i18n_wrapper["a" /* default */],
      id: mockup_src_core_utils["a" /* default */].generateId()
    }, data)));

    if (data.menuOptions.dropdown) {
      self.$dropdown = self.$(".dropdown-toggle");
      self.$dropdown.dropdown();
    }

    if (self.options.className) {
      self.$el.addClass(self.options.className);
    }

    registry["a" /* default */].scan(this.$el);
    return this;
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/templates/tablerow.xml
/* harmony default export */ var tablerow = ("<td class=\"selection\" data-order=\"<%- attributes['_sort'] %>\"><label for=\"select<%- attributes['_sort'] %>InputCheckbox\" class=\"hiddenStructure\" aria-label=\"<%- _t('Select') %>\"><%- _t('Select') %></label><input id=\"select<%- attributes['_sort'] %>InputCheckbox\" <% if(selected){ %> checked=\"checked\" <% } %> type=\"checkbox\"/></td>\n\n<td class=\"title\">\n  <div class=\"pull-left\">\n    <a href=\"<%- viewURL %>\"\n        class=\"manage state-<%- review_state %> contenttype-<%- contenttype %>\"\n        title=\"<%- portal_type %>\">\n        <% if(attributes[\"getMimeIcon\"] && contenttype == 'file'){ %>\n           <img class=\"mime-icon\" src=\"<%- getMimeIcon %>\"> <% } %>\n      <% if(Title){ %>\n        <%- Title %>\n      <% } else { %>\n        <em><%- id %></em>\n      <% } %>\n    </a>\n    <% if(expired){ %>\n      <span class=\"plone-item-expired\"><%- _t('Expired') %></span>\n    <% } %>\n    <% if(ineffective){ %>\n      <span class=\"plone-item-ineffective\"><%- _t('Before publishing date') %></span>\n    <% } %>\n    <% if(activeColumns.indexOf('Description') !== -1 && _.has(availableColumns, 'Description') && Description) { %>\n    <p class=\"Description\">\n      <small>\n        <%- Description %>\n      </small>\n    </p>\n    <% } %>\n  </div>\n  <% if(attributes[\"getIcon\"] && thumb_scale) { %>\n    <img class=\"thumb-<%- thumb_scale %> pull-right\" src=\"<%- getURL %>/@@images/image/<%- thumb_scale %>\">\n  <% } %>\n</td>\n\n<% _.each(activeColumns, function(column) { %>\n  <% if(column !== 'Description' && _.has(availableColumns, column)) { %>\n    <td class=\"<%- column %>\" data-order=\"<%- attributes[column] %>\"><%- attributes[column] %></td>\n  <% } %>\n<% }); %>\n\n<td class=\"actionmenu-container\"></td>\n");
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/js/views/tablerow.js
function tablerow_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function tablerow_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { tablerow_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { tablerow_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

 // needed for ``await`` support










/* harmony default export */ var views_tablerow = (backbone_default.a.View.extend({
  tagName: "tr",
  className: "itemRow",
  template: index_all["default"].template(tablerow),
  events: {
    "change input": "itemSelected",
    "click td.title a.manage": "itemClicked"
  },
  initialize: function initialize(options) {
    this.options = options;
    this.app = options.app;
    this.selectedCollection = this.app.selectedCollection;
    this.table = this.options.table;
    this.now = moment_default()();
  },
  expired: function expired(data) {
    if (!data.attributes.ExpirationDate) {
      return false;
    }

    var dt = moment_default()(data.attributes.ExpirationDate);
    return dt.diff(this.now, "seconds") < 0;
  },
  ineffective: function ineffective(data) {
    if (!data.attributes.EffectiveDate) {
      return false;
    }

    var dt = moment_default()(data.attributes.EffectiveDate);
    return dt.diff(this.now, "seconds") > 0;
  },
  render: function render() {
    var self = this;
    var data = this.model.toJSON();
    data.selected = false;

    if (this.selectedCollection.findWhere({
      UID: data.UID
    })) {
      data.selected = true;
    }

    data.attributes = self.model.attributes;
    data.activeColumns = self.app.activeColumns;
    data.availableColumns = self.app.availableColumns;
    data.portal_type = data.portal_type ? data.portal_type : "";
    data.contenttype = data.portal_type.toLowerCase().replace(/\.| /g, "-");
    data._authenticator = mockup_src_core_utils["a" /* default */].getAuthenticator();
    data.thumb_scale = self.app.thumb_scale;
    var viewAction = self.app.typeToViewAction && self.app.typeToViewAction[data.attributes.portal_type] || "";
    data.viewURL = data.attributes.getURL + viewAction;
    data._t = i18n_wrapper["a" /* default */];
    data.expired = this.expired(data);
    data.ineffective = this.ineffective(data);
    self.$el.html(self.template(data));
    var attrs = self.model.attributes;
    self.$el.addClass("state-" + attrs["review_state"]).addClass("type-" + attrs.portal_type); // jshint ignore:line

    if (attrs["is_folderish"]) {
      // jshint ignore:line
      self.$el.addClass("folder");
    }

    self.$el.attr("data-path", data.path);
    self.$el.attr("data-UID", data.UID);
    self.$el.attr("data-id", data.id);
    self.$el.attr("data-type", data.portal_type);
    self.$el.attr("data-folderish", data["is_folderish"]); // jshint ignore:line

    self.$el.removeClass("expired");
    self.$el.removeClass("ineffective");

    if (data.expired) {
      self.$el.addClass("expired");
    }

    if (data.ineffective) {
      self.$el.addClass("ineffective");
    }

    self.el.model = this.model;
    var canMove = !!self.app.options.moveUrl;
    self.menu = new views_actionmenu({
      app: self.app,
      model: self.model,
      menuOptions: self.app.menuOptions,
      canMove: canMove
    });
    jquery_js_exposed_default()(".actionmenu-container", self.$el).append(self.menu.render().el);
    return this;
  },
  itemClicked: function () {
    var _itemClicked = tablerow_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(e) {
      var keyEvent;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              /* check if this should just be opened in new window */
              keyEvent = this.app.keyEvent; // Resolve the correct handler based on these keys.
              // Default handlers live in ../navigation.js (bound to Nav)

              if (!(keyEvent && keyEvent.ctrlKey || !this.model.attributes.is_folderish)) {
                _context.next = 3;
                break;
              }

              return _context.abrupt("return", null);

            case 3:
              return _context.abrupt("return", navigation.folderClicked(e));

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function itemClicked(_x) {
      return _itemClicked.apply(this, arguments);
    }

    return itemClicked;
  }(),
  itemSelected: function itemSelected() {
    var checkbox = this.$("input")[0];

    if (checkbox.checked) {
      this.app.selectedCollection.add(this.model.clone());
    } else {
      this.app.selectedCollection.removeResult(this.model);
    }

    var selectedCollection = this.selectedCollection;
    /* check for shift click now */

    var keyEvent = this.app.keyEvent;

    if (keyEvent && keyEvent.shiftKey && this.app["last_selected"] && // jshint ignore:line
    this.app["last_selected"].parentNode !== null) {
      // jshint ignore:line
      var $el = jquery_js_exposed_default()(this.app["last_selected"]); // jshint ignore:line

      var lastCheckedIndex = $el.index();
      var thisIndex = this.$el.index();
      this.app.tableView.$('input[type="checkbox"]').each(function () {
        $el = jquery_js_exposed_default()(this);
        var index = $el.parents("tr").index();

        if (index > lastCheckedIndex && index < thisIndex || index < lastCheckedIndex && index > thisIndex) {
          this.checked = checkbox.checked;
          var $tr = jquery_js_exposed_default()(this).closest("tr.itemRow");

          if ($tr.length > 0) {
            var model = $tr[0].model;
            var existing = selectedCollection.getByUID(model.attributes.UID);

            if (this.checked) {
              if (!existing) {
                selectedCollection.add(model.clone());
              }
            } else if (existing) {
              selectedCollection.removeResult(existing);
            }
          }
        }
      });
    }

    this.app["last_selected"] = this.el; // jshint ignore:line
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/templates/table.xml
/* harmony default export */ var table = ("<div class=\"fc-breadcrumbs-container\">\n  <div class=\"fc-breadcrumbs\" colspan=\"<%- activeColumns.length + 3 %>\">\n    <a href=\"#\" title=\"<%- _t('Root') %>\" aria-label=\"<%- _t('Root') %>\" data-path=\"/\">\n      <span class=\"glyphicon glyphicon-home\" aria-hidden=\"true\"></span> /\n    </a>\n    <% _.each(pathParts, function(part, idx, list){\n      if(part){\n        if(idx > 0){ %>\n          /\n        <% } %>\n        <a href=\"#\" class=\"crumb\" data-path=\"<%- part %>\"><%- part %></a>\n      <% }\n    }); %>\n  </div>\n</div>\n\n<table class=\"pat-datatables table table-striped table-bordered\"\n       data-pat-datatables=\"<%- datatables_options %>\">\n  <thead>\n    <tr>\n      <th class=\"selection\"><label for=\"selectAllInputCheckbox\" class=\"hiddenStructure\" aria-label=\"<%- _t('Select all') %>\"><%- _t('Select all') %></label><input id=\"selectAllInputCheckbox\" type=\"checkbox\" class=\"select-all\" /></th>\n      <th class=\"title\"><%- _t('Title') %></th>\n      <% _.each(activeColumns, function(column){ %>\n        <% if(column !== 'Description' && _.has(availableColumns, column)) { %>\n          <th><%- availableColumns[column] %></th>\n        <% } %>\n      <% }); %>\n      <th class=\"actions\"><%- _t(\"Actions\") %></th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>\n");
// EXTERNAL MODULE: ./node_modules/bootstrap/js/src/util/index.js
var util = __webpack_require__(24);

// EXTERNAL MODULE: ./node_modules/bootstrap/js/src/dom/data.js
var dom_data = __webpack_require__(65);

// EXTERNAL MODULE: ./node_modules/bootstrap/js/src/dom/event-handler.js
var event_handler = __webpack_require__(25);

// EXTERNAL MODULE: ./node_modules/bootstrap/js/src/base-component.js
var base_component = __webpack_require__(138);

// CONCATENATED MODULE: ./node_modules/bootstrap/js/src/alert.js
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-beta2): alert.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */






/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const NAME = 'alert'
const DATA_KEY = 'bs.alert'
const EVENT_KEY = `.${DATA_KEY}`
const DATA_API_KEY = '.data-api'

const SELECTOR_DISMISS = '[data-bs-dismiss="alert"]'

const EVENT_CLOSE = `close${EVENT_KEY}`
const EVENT_CLOSED = `closed${EVENT_KEY}`
const EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`

const CLASS_NAME_ALERT = 'alert'
const CLASS_NAME_FADE = 'fade'
const CLASS_NAME_SHOW = 'show'

/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class alert_Alert extends base_component["a" /* default */] {
  // Getters

  static get DATA_KEY() {
    return DATA_KEY
  }

  // Public

  close(element) {
    const rootElement = element ? this._getRootElement(element) : this._element
    const customEvent = this._triggerCloseEvent(rootElement)

    if (customEvent === null || customEvent.defaultPrevented) {
      return
    }

    this._removeElement(rootElement)
  }

  // Private

  _getRootElement(element) {
    return Object(util["c" /* getElementFromSelector */])(element) || element.closest(`.${CLASS_NAME_ALERT}`)
  }

  _triggerCloseEvent(element) {
    return event_handler["a" /* default */].trigger(element, EVENT_CLOSE)
  }

  _removeElement(element) {
    element.classList.remove(CLASS_NAME_SHOW)

    if (!element.classList.contains(CLASS_NAME_FADE)) {
      this._destroyElement(element)
      return
    }

    const transitionDuration = Object(util["d" /* getTransitionDurationFromElement */])(element)

    event_handler["a" /* default */].one(element, 'transitionend', () => this._destroyElement(element))
    Object(util["b" /* emulateTransitionEnd */])(element, transitionDuration)
  }

  _destroyElement(element) {
    if (element.parentNode) {
      element.parentNode.removeChild(element)
    }

    event_handler["a" /* default */].trigger(element, EVENT_CLOSED)
  }

  // Static

  static jQueryInterface(config) {
    return this.each(function () {
      let data = dom_data["a" /* default */].getData(this, DATA_KEY)

      if (!data) {
        data = new alert_Alert(this)
      }

      if (config === 'close') {
        data[config](this)
      }
    })
  }

  static handleDismiss(alertInstance) {
    return function (event) {
      if (event) {
        event.preventDefault()
      }

      alertInstance.close(this)
    }
  }
}

/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */
event_handler["a" /* default */].on(document, EVENT_CLICK_DATA_API, SELECTOR_DISMISS, alert_Alert.handleDismiss(new alert_Alert()))

/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .Alert to jQuery only if jQuery is present
 */

Object(util["a" /* defineJQueryPlugin */])(NAME, alert_Alert)

/* harmony default export */ var src_alert = (alert_Alert);

// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/js/views/table.js











/* harmony default export */ var views_table = (views_base["a" /* default */].extend({
  tagName: "div",
  template: index_all["default"].template(table),
  initialize: function initialize(options) {
    var self = this;
    views_base["a" /* default */].prototype.initialize.apply(self, [options]);
    self.collection = self.app.collection;
    self.selectedCollection = self.app.selectedCollection;
    self.listenTo(self.collection, "sync", self.render);
    self.listenTo(self.selectedCollection, "remove", self.render);
    self.listenTo(self.selectedCollection, "reset", self.render);
    self.collection.pager();
    self.subsetIds = [];
    self.contextInfo = null;
    jquery_js_exposed_default()("body").on("context-info-loaded", function (event, data) {
      self.contextInfo = data;
      /* set default page info */

      self.setContextInfo();
    });
    self.dateColumns = ["ModificationDate", "EffectiveDate", "CreationDate", "ExpirationDate", "start", "end", "last_comment_date"];
  },
  events: {
    "click .fc-breadcrumbs a": "breadcrumbClicked",
    "change .select-all": "selectAll"
  },
  setContextInfo: function setContextInfo() {
    var self = this;
    var data = self.contextInfo;
    var $defaultPage = self.$('[data-id="' + data.defaultPage + '"]');

    if ($defaultPage.length > 0) {
      $defaultPage.addClass("default-page");
    }
    /* set breadcrumb title info */


    var crumbs = data.breadcrumbs;

    if (crumbs && crumbs.length) {
      var $crumbs = self.$(".fc-breadcrumbs a.crumb");

      index_all["default"].each(crumbs, function (crumb, idx) {
        $crumbs.eq(idx).html(crumb.title);
      });
    }
  },
  render: function render() {
    var self = this; // By default do not start sorted by any column
    // Ignore first column and the last one (activeColumns.length + 1)
    // Do not show paginator, search or information, we only want column sorting

    var datatables_options = {
      aaSorting: [],
      aoColumnDefs: [{
        bSortable: false,
        aTargets: [0, self.app.activeColumns.length + 2]
      }],
      paging: false,
      searching: false,
      info: false
    }; // If options were passed from the pattern, override these ones

    jquery_js_exposed_default.a.extend(datatables_options, self.app.options.datatables_options);
    self.$el.html(self.template({
      _t: i18n_wrapper["a" /* default */],
      pathParts: index_all["default"].filter(self.app.getCurrentPath().split("/").slice(1), function (val) {
        return val.length > 0;
      }),
      activeColumns: self.app.activeColumns,
      availableColumns: self.app.availableColumns,
      datatables_options: JSON.stringify(datatables_options)
    }));

    if (self.collection.length) {
      var container = self.$("tbody");
      self.collection.each(function (result) {
        self.dateColumns.map(function (col) {
          // empty column instead of displaying "None".
          if (result.attributes.hasOwnProperty(col) && (result.attributes[col] === "None" || !result.attributes[col])) {
            result.attributes[col] = "";
          }
        });
        var view = new views_tablerow({
          model: result,
          app: self.app,
          table: self
        }).render();
        container.append(view.el);
      });
    }

    self.moment = new moment_moment(self.$el, {
      selector: "." + self.dateColumns.join(",."),
      format: self.options.app.momentFormat
    });

    if (self.app.options.moveUrl) {
      self.addReordering();
    }

    self.storeOrder();
    registry["a" /* default */].scan(self.$el);
    self.$el.find("table").on("order.dt", function (e, settings, details) {
      var btn = jquery_js_exposed_default()('<button type="button" class="btn btn-danger btn-xs"></button>').text(Object(i18n_wrapper["a" /* default */])("Reset column sorting")).on("click", function (e) {
        // Use column 0 to restore ordering and then empty list so it doesn't
        // show the icon in the column header
        self.$el.find("table.pat-datatables").data("patternDatatables").table.order([0, "asc"]).draw().order([]).draw(); // Restore reordering by drag and drop

        self.addReordering(); // Clear the status message

        self.app.clearStatus();
      });
      self.app.setStatus({
        text: Object(i18n_wrapper["a" /* default */])("Notice: Drag and drop reordering is disabled when viewing the contents sorted by a column."),
        type: "warning"
      }, btn, false, "sorting_dndreordering_disabled");
      jquery_js_exposed_default()(".pat-datatables tbody").find("tr").off("drag");
      self.$el.removeClass("order-support");
    });
    return this;
  },
  breadcrumbClicked: function breadcrumbClicked(e) {
    e.preventDefault();
    var $el = jquery_js_exposed_default()(e.target);

    if ($el[0].tagName !== "A") {
      $el = $el.parent("a");
    }

    var path = "";
    jquery_js_exposed_default()($el.prevAll("a").get().reverse()).each(function () {
      var part = jquery_js_exposed_default()(this).attr("data-path");
      path += part;

      if (part !== "/") {
        path += "/";
      }
    });
    path += $el.attr("data-path");
    this.app.setCurrentPath(path);
    this.collection.currentPage = 1;
    this.collection.pager();
  },
  selectAll: function selectAll(e) {
    if (jquery_js_exposed_default()(e.target).is(":checked")) {
      jquery_js_exposed_default()('input[type="checkbox"]', this.$("tbody")).prop("checked", true).change();
    } else {
      /* delaying the re-rendering is much faster in this case */
      this.selectedCollection.remove(this.collection.models, {
        silent: true
      });
      this.selectedCollection.trigger("remove");
    }

    this.setContextInfo();
  },
  toggleSelectAll: function toggleSelectAll(e) {
    var $el = jquery_js_exposed_default()(e.target);

    if (!$el.is(":checked")) {
      this.$(".select-all").prop("checked", false);
    }
  },
  addReordering: function addReordering() {
    var self = this; // if we have a custom query going on, we do not allow sorting.

    if (self.app.inQueryMode()) {
      self.$el.removeClass("order-support");
      return;
    }

    self.$el.addClass("order-support");
    var dd = new sortable(self.$("tbody"), {
      selector: "tr",
      createDragItem: function createDragItem(pattern, $el) {
        var $tr = $el.clone();
        var $table = jquery_js_exposed_default()("<table><tbody></tbody></table>");
        jquery_js_exposed_default()("tbody", $table).append($tr);
        $table.addClass("structure-dragging").css({
          opacity: 0.85,
          position: "absolute"
        });
        $table.width($el.width());
        $table.height($el.height());
        $table.appendTo(document.body);
        return $table;
      },
      drop: function drop($el, delta) {
        if (delta !== 0) {
          self.app.moveItem($el.attr("data-id"), delta, self.subsetIds);
          self.storeOrder();
        }
      }
    });
  },
  storeOrder: function storeOrder() {
    var self = this;
    var subsetIds = [];
    self.$("tbody tr.itemRow").each(function () {
      subsetIds.push(jquery_js_exposed_default()(this).attr("data-id"));
    });
    self.subsetIds = subsetIds;
  }
}));
// EXTERNAL MODULE: ./node_modules/mockup/src/core/ui/views/popover.js + 1 modules
var views_popover = __webpack_require__(23);

// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/templates/selection_item.xml
/* harmony default export */ var selection_item = ("<span class=\"selected-item\">\n  <a href=\"#\" data-uid=\"<%- UID %>\" title=\"remove\" class=\"remove\">\n    <span class=\"glyphicon glyphicon-remove-circle\"></span>\n  </a>\n  <%- Title %>\n</span>\n");
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/js/views/selectionwell.js




/* harmony default export */ var selectionwell = (views_popover["a" /* default */].extend({
  className: "popover selected-items",
  title: index_all["default"].template('<input type="text" class="filter" placeholder="<%- _t("Filter") %>" />' + '<a href="#" class=" remove-all">' + '<span class="glyphicon glyphicon-remove-circle"></span> <%- _t("remove all") %></a>'),
  content: index_all["default"].template("<% collection.each(function(item) { %>" + "<%= item_template(item.toJSON()) %>" + "<% }); %>"),
  events: {
    "click a.remove": "itemRemoved",
    "keyup input.filter": "filterSelected",
    "click .remove-all": "removeAll"
  },
  initialize: function initialize(options) {
    views_popover["a" /* default */].prototype.initialize.apply(this, [options]);
    var self = this;
    var timeout = 0;
    this.listenTo(this.collection, "reset all add remove", function () {
      clearTimeout(timeout);
      timeout = setTimeout(function () {
        self.render();
      }, 50);
    });
    this.options["item_template"] = index_all["default"].template(selection_item); // jshint ignore:line
  },
  render: function render() {
    views_popover["a" /* default */].prototype.render.call(this);

    if (this.collection.length === 0) {
      this.$el.removeClass("active");
    }

    return this;
  },
  itemRemoved: function itemRemoved(e) {
    e.preventDefault();
    var uid = jquery_js_exposed_default()(e.currentTarget).data("uid");
    this.collection.removeByUID(uid);

    if (this.collection.length !== 0) {
      // re-rendering causes it to close, reopen
      this.show();
    }
  },
  filterSelected: function filterSelected(e) {
    var val = jquery_js_exposed_default()(e.target).val().toLowerCase();
    jquery_js_exposed_default()(".selected-item", this.$el).each(function () {
      var $el = jquery_js_exposed_default()(this);

      if ($el.text().toLowerCase().indexOf(val) === -1) {
        $el.hide();
      } else {
        $el.show();
      }
    });
  },
  removeAll: function removeAll(e) {
    e.preventDefault();
    this.collection.reset();
    this.hide();
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/js/views/generic-popover.js





/* harmony default export */ var generic_popover = (views_popover["a" /* default */].extend({
  events: {
    "click button.applyBtn": "applyButtonClicked",
    "click button.closeBtn": "toggle"
  },
  submitText: Object(i18n_wrapper["a" /* default */])("Apply"),
  initialize: function initialize(options) {
    var self = this;
    self.app = options.app;
    self.className = "popover " + options.id;
    self.title = options.form.title || options.title;
    self.submitText = options.form.submitText || Object(i18n_wrapper["a" /* default */])("Apply");
    self.submitContext = options.form.submitContext || "primary";
    self.data = {};
    self.options = options;
    self.setContent(options.form.template);
    views_popover["a" /* default */].prototype.initialize.apply(this, [options]);
  },
  setContent: function setContent(content) {
    var self = this;
    var html = "<form>" + content + "</form>";
    html += '<button class="btn btn-block btn-' + self.submitContext + ' applyBtn">' + self.submitText + " </button>";

    if (self.options.form.closeText) {
      html += '<button class="btn btn-block btn-default closeBtn">' + self.options.form.closeText + " </button>";
    }

    this.content = index_all["default"].template(html);
  },
  getTemplateOptions: function getTemplateOptions() {
    var self = this;
    var items = [];
    self.app.selectedCollection.each(function (item) {
      items.push(item.toJSON());
    });
    return jquery_js_exposed_default.a.extend({}, true, self.options, {
      items: items,
      data: self.data
    });
  },
  applyButtonClicked: function applyButtonClicked() {
    var self = this;
    var data = {};

    index_all["default"].each(self.$el.find("form").serializeArray(), function (param) {
      if (param.name in data) {
        data[param.name] += "," + param.value;
      } else {
        data[param.name] = param.value;
      }
    });

    self.app.buttonClickEvent(this.triggerView, data);
    self.hide();
  },
  afterRender: function afterRender() {
    var self = this;

    if (self.options.form.dataUrl) {
      self.$(".popover-content").html(Object(i18n_wrapper["a" /* default */])("Loading..."));
      self.app.loading.show();
      var url = self.app.getAjaxUrl(self.options.form.dataUrl);
      jquery_js_exposed_default.a.ajax({
        url: url,
        dataType: "json",
        type: "POST",
        cache: false,
        data: {
          selection: JSON.stringify(self.app.getSelectedUids()),
          transitions: true,
          render: "yes"
        }
      }).done(function (result) {
        self.data = result.data || result;
        self.renderContent();
        registry["a" /* default */].scan(self.$el);
      }).fail(function () {
        /* we temporarily set original html to a value here so we can
        render the updated content and then put the original back */
        var originalContent = self.content;
        self.setContent("<p>" + Object(i18n_wrapper["a" /* default */])("Error loading popover from server.") + "</p>", false);
        self.renderContent();
        self.content = originalContent;
      }).always(function () {
        self.app.loading.hide();
        self.position();
      });
    } else {
      registry["a" /* default */].scan(self.$el);
      self.position();
    }
  },
  toggle: function toggle(button, e) {
    views_popover["a" /* default */].prototype.toggle.apply(this, [button, e]);
    var self = this;

    if (!self.opened) {
      return;
    } else {
      this.$el.replaceWith(this.render().el);
      this.position();
    }
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/js/views/rearrange.js



/* harmony default export */ var rearrange = (views_popover["a" /* default */].extend({
  className: "popover rearrange",
  title: index_all["default"].template('<%- _t("Rearrange items in this folder") %>'),
  content: index_all["default"].template('<div class="form-group">' + '<label><%- _t("What to rearrange on") %></label>' + '<select name="rearrange_on" class="form-control">' + "<% _.each(rearrangeProperties, function(title, property) { %>" + '<option value="<%- property %>"><%- title %></option>' + "<% }); %>" + "</select>" + '<p class="help-block">' + '<b><%- _t("This permanently changes the order of items in this folder. This operation may take a long time depending on the size of the folder.") %></b>' + "</p>" + "</div>" + "<div>" + '<label> <input type="checkbox" name="reversed" /> <%- _t("Reverse") %></label>' + "</div>" + '<button class="btn btn-block btn-primary"><%- _t("Rearrange") %></button>'),
  events: {
    "click button": "rearrangeButtonClicked"
  },
  initialize: function initialize(options) {
    this.app = options.app;
    views_popover["a" /* default */].prototype.initialize.apply(this, [options]);
    this.options.rearrangeProperties = this.app.options.rearrange.properties;
  },
  render: function render() {
    views_popover["a" /* default */].prototype.render.call(this);
    this.$rearrangeOn = this.$('[name="rearrange_on"]');
    this.$reversed = this.$('[name="reversed"]');
    return this;
  },
  rearrangeButtonClicked: function rearrangeButtonClicked() {
    if (this.app.collection.queryHelper.getCurrentPath() === "/") {
      if (!window.confirm(Object(i18n_wrapper["a" /* default */])("Sorting the content on the base of the site " + "could affect your navigation order. " + "Are you certain you want to do this?"))) {
        return;
      }
    }

    var data = {
      rearrange_on: this.$rearrangeOn.val(),
      reversed: false
    };

    if (this.$reversed[0].checked) {
      data.reversed = true;
    }

    this.app.buttonClickEvent(this.triggerView, data);
    this.hide();
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/templates/selection_button.xml
/* harmony default export */ var selection_button = ("<span class=\"glyphicon glyphicon-list\"></span>\n<%- title %>\n<span class=\"label<% if (length > 0) { %> label-success<% } else { %> label-default<% } %>\">\n  <%- length %>\n</span>\n");
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/js/views/selectionbutton.js


/* harmony default export */ var selectionbutton = (views_button["a" /* default */].extend({
  collection: null,
  template: selection_button,
  initialize: function initialize(options) {
    views_button["a" /* default */].prototype.initialize.apply(this, [options]);
    var self = this;
    self.timeout = 0;

    if (this.collection !== null) {
      this.collection.on("add remove reset", function () {
        /* delay it */
        clearTimeout(self.timeout);
        self.timeout = setTimeout(function () {
          self.render();

          if (self.collection.length === 0) {
            self.$el.removeClass("active");
          }
        }, 50);
      }, this);
    }
  },
  serializedModel: function serializedModel() {
    var obj = {
      icon: "",
      title: this.options.title,
      length: 0
    };

    if (this.collection !== null) {
      obj.length = this.collection.length;
    }

    return obj;
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/templates/paging.xml
/* harmony default export */ var paging = ("  <ul class=\"pagination pagination-sm pagination-centered\">\n    <li class=\"<% if (currentPage === 1) { %>disabled<% } %>\">\n      <a href=\"#\" class=\"serverfirst\">\n        &laquo;\n      </a>\n    </li>\n    <li class=\"<% if (currentPage === 1) { %>disabled<% } %>\">\n      <a href=\"#\" class=\"serverprevious\">\n        &lt;\n      </a>\n    </li>\n    <% _.each(pages, function(p){ %>\n    <li class=\"<% if (currentPage == p) { %>active<% } else if ( p == '...' ) { %>disabled<% }%>\">\n      <a href=\"#\" class=\"page\"><%- p %></a>\n    </li>\n    <% }); %>\n    <li class=\"<% if (currentPage === totalPages) { %>disabled<% } %>\">\n      <a href=\"#\" class=\"servernext\">\n        &gt;\n      </a>\n    </li>\n    <li class=\"<% if (currentPage === totalPages) { %>disabled<% } %>\">\n      <a href=\"#\" class=\"serverlast\">\n        &raquo;\n      </a>\n    </li>\n  </ul>\n\n  <div class=\"pagination pagination-sm\"><%- _t(\"Show:\") %></div>\n  <ul class=\"pagination pagination-sm\">\n    <li class=\"serverhowmany serverhowmany15 <% if(perPage == 15){ %>disabled<% } %>\">\n      <a href=\"#\" class=\"\">15</a>\n    </li>\n    <li class=\"serverhowmany serverhowmany30 <% if(perPage == 30){ %>disabled<% } %>\">\n      <a href=\"#\" class=\"\">30</a>\n    </li>\n    <li class=\"serverhowmany serverhowmany50 <% if(perPage == 50){ %>disabled<% } %>\">\n      <a href=\"#\" class=\"\">50</a>\n    </li>\n    <li class=\"serverhowmany serverhowmany250 <% if(perPage == 250){ %>disabled<% } %>\">\n      <a href=\"#\" class=\"\">250</a>\n    </li>\n  </ul>\n\n  <div class=\"pagination pagination-sm\">\n    <%- _t(\"Page:\") %> <span class=\"current\"><%- currentPage %></span>\n    <%- _t(\"of\") %>\n    <span class=\"total\"><%- totalPages %></span>\n          <%- _t(\"shown\") %>\n  </div>\n");
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/js/views/paging.js





/* harmony default export */ var views_paging = (backbone_default.a.View.extend({
  events: {
    "click a.servernext": "nextResultPage",
    "click a.serverprevious": "previousResultPage",
    "click a.serverlast": "gotoLast",
    "click a.page": "gotoPage",
    "click a.serverfirst": "gotoFirst",
    "click a.serverpage": "gotoPage",
    "click .serverhowmany a": "changeCount"
  },
  tagName: "aside",
  template: index_all["default"].template(paging),
  maxPages: 7,
  initialize: function initialize(options) {
    this.options = options;
    this.app = this.options.app;
    this.collection = this.app.collection;
    this.collection.on("reset", this.render, this);
    this.collection.on("sync", this.render, this);
    this.$el.appendTo("#pagination");
  },
  render: function render() {
    var data = this.collection.info();
    data.pages = this.getPages(data);
    var html = this.template(jquery_js_exposed_default.a.extend({
      _t: i18n_wrapper["a" /* default */]
    }, data));
    this.$el.html(html);
    return this;
  },
  getPages: function getPages(data) {
    var totalPages = data.totalPages;

    if (!totalPages) {
      return [];
    }

    var currentPage = data.currentPage;
    var left = 1;
    var right = totalPages;

    if (totalPages > this.maxPages) {
      left = Math.max(1, Math.floor(currentPage - this.maxPages / 2));
      right = Math.min(left + this.maxPages, totalPages);

      if (right - left < this.maxPages) {
        left = left - Math.floor(this.maxPages / 2);
      }
    }

    var pages = [];

    for (var i = left; i <= right; i = i + 1) {
      pages.push(i);
    }
    /* add before and after */


    if (pages[0] > 1) {
      if (pages[0] > 2) {
        pages = ["..."].concat(pages);
      }

      pages = [1].concat(pages);
    }

    if (pages[pages.length - 1] < totalPages - 1) {
      if (pages[pages.length - 2] < totalPages - 2) {
        pages.push("...");
      }

      pages.push(totalPages);
    }

    return pages;
  },
  nextResultPage: function nextResultPage(e) {
    e.preventDefault();
    this.app.clearStatus();
    this.collection.requestNextPage();
  },
  previousResultPage: function previousResultPage(e) {
    e.preventDefault();
    this.app.clearStatus();
    this.collection.requestPreviousPage();
  },
  gotoFirst: function gotoFirst(e) {
    e.preventDefault();
    this.app.clearStatus();
    this.collection.goTo(this.collection.information.firstPage);
  },
  gotoLast: function gotoLast(e) {
    e.preventDefault();
    this.app.clearStatus();
    this.collection.goTo(this.collection.information.totalPages);
  },
  gotoPage: function gotoPage(e) {
    e.preventDefault();
    this.app.clearStatus();
    var page = jquery_js_exposed_default()(e.target).text();
    this.collection.goTo(page);
  },
  changeCount: function changeCount(e) {
    e.preventDefault();
    this.app.clearStatus();
    var per = jquery_js_exposed_default()(e.target).text();
    this.collection.howManyPer(per);
    this.app.setCookieSetting("perPage", per);
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/js/views/columns.js




/* harmony default export */ var columns = (views_popover["a" /* default */].extend({
  className: "popover attribute-columns",
  title: index_all["default"].template('<%- _t("Columns") %>'),
  content: index_all["default"].template('<label><%- _t("Select columns to show, drag and drop to reorder") %></label>' + "<ul>" + "</ul>" + '<button class="btn btn-block btn-success"><%- _t("Save") %></button>'),
  itemTemplate: index_all["default"].template("<li>" + "<label>" + '<input type="checkbox" value="<%- id %>"/>' + "<%- title %>" + "</label>" + "</li>"),
  events: {
    "click button": "applyButtonClicked"
  },
  initialize: function initialize(options) {
    this.app = options.app;
    views_popover["a" /* default */].prototype.initialize.apply(this, [options]);
  },
  afterRender: function afterRender() {
    var self = this;

    var objKeySortCmp = function objKeySortCmp(a, b) {
      // object key sort compare function
      var ca = self.app.availableColumns[a];
      var cb = self.app.availableColumns[b];

      if (ca < cb) {
        return -1;
      } else if (ca == cb) {
        return 0;
      } else {
        return 1;
      }
    };

    self.$container = self.$("ul");

    index_all["default"].each(self.app.activeColumns, function (id) {
      var $el = jquery_js_exposed_default()(self.itemTemplate({
        title: self.app.availableColumns[id],
        id: id
      }));
      $el.find("input")[0].checked = true;
      self.$container.append($el);
    });

    var availableKeys = index_all["default"].keys(index_all["default"].omit(self.app.availableColumns, self.app.activeColumns)).sort(objKeySortCmp);

    index_all["default"].each(availableKeys, function (id) {
      var $el = jquery_js_exposed_default()(self.itemTemplate({
        title: self.app.availableColumns[id],
        id: id
      }));
      self.$container.append($el);
    });

    var dd = new sortable(self.$container, {
      selector: "li"
    });
    return this;
  },
  applyButtonClicked: function applyButtonClicked() {
    var self = this;
    this.hide();
    self.app.activeColumns = [];
    self.$("input:checked").each(function () {
      self.app.activeColumns.push(jquery_js_exposed_default()(this).val());
    });
    self.app.setCookieSetting(self.app.activeColumnsCookie, this.app.activeColumns);
    self.app.tableView.render();
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/js/views/textfilter.js







/* harmony default export */ var textfilter = (views_base["a" /* default */].extend({
  tagName: "div",
  className: "navbar-search form-search ui-offset-parent",
  template: index_all["default"].template('<div class="input-group">' + '<label class="hiddenStructure" for="textFilterInput" aria-label="<%- _t("Search") %>"><%- _t("Search") %>"</label>' + '<input id="textFilterInput" type="text" class="form-control search-query" placeholder="<%- _t("Search") %>">' + '<span class="input-group-btn">' + "</span>" + "</div>"),
  popoverContent: index_all["default"].template('<input class="pat-querystring" />'),
  events: {
    "keyup .search-query": "filter"
  },
  term: null,
  timeoutId: null,
  keyupDelay: 300,
  statusKeyFilter: "textfilter_status_message_filter",
  statusKeySorting: "textfilter_status_message_sorting",
  initialize: function initialize(options) {
    views_base["a" /* default */].prototype.initialize.apply(this, [options]);
    this.app = this.options.app;
  },
  setFilterStatusMessage: function setFilterStatusMessage() {
    var clear_btn = jquery_js_exposed_default()('<button type="button" class="btn btn-primary btn-xs"></button>').text(Object(i18n_wrapper["a" /* default */])("Clear")).on("click", function () {
      this.clearFilter();
    }.bind(this));

    var statusTextFilter = Object(i18n_wrapper["a" /* default */])("This listing has filters applied. Not all items are shown.");

    this.app.setStatus({
      text: statusTextFilter,
      type: "success"
    }, clear_btn, true, this.statusKeyFilter);

    var statusTextSorting = Object(i18n_wrapper["a" /* default */])("Drag and drop reordering is disabled while filters are applied.");

    this.app.setStatus({
      text: statusTextSorting,
      type: "warning"
    }, null, true, this.statusKeySorting);
  },
  clearFilterStatusMessage: function clearFilterStatusMessage() {
    if (!this.term && !this.app.additionalCriterias.length) {
      this.app.clearStatus(this.statusKeyFilter);
      this.app.clearStatus(this.statusKeySorting);
    }
  },
  setTerm: function setTerm(term, set_input) {
    var term_el = this.$el[0].querySelector(".search-query");
    this.term = encodeURIComponent(term);

    if (set_input) {
      term_el.value = term;
    }

    this.app.collection.currentPage = 1;
    this.app.collection.pager();

    if (term) {
      term_el.classList.add("has-filter");
      this.setFilterStatusMessage();
    } else {
      var hasquery = false;

      try {
        var qu = this.$queryString.val();

        if (qu && JSON.parse(qu).length > 0) {
          hasquery = true;
        }
      } finally {
        if (!hasquery) {
          term_el.classList.remove("has-filter");
          this.clearFilterStatusMessage();
        }
      }
    }
  },
  setQuery: function setQuery(query, set_input) {
    var query_string = null;
    var query_obj = null;

    try {
      if (typeof query === "string") {
        query_obj = JSON.parse(query);
        query_string = query;
      } else {
        query_string = JSON.stringify(query);
        query_obj = query;
      }
    } catch (e) {
      query_obj = [];
      query_string = "[]";
    }

    if (set_input) {
      this.$queryString.val(query_string); // TODO clear query string form
      // this.queryString._init();
    }

    this.app.additionalCriterias = query_obj;
    this.app.collection.currentPage = 1;
    this.app.collection.pager();

    if (query_obj.length) {
      this.button.$el[0].classList.add("has-filter");
      this.setFilterStatusMessage();
    } else if (!this.term) {
      this.button.$el[0].classList.remove("has-filter");
      this.clearFilterStatusMessage();
    }
  },
  clearTerm: function clearTerm() {
    this.setTerm("", true);
  },
  clearFilter: function clearFilter() {
    this.setTerm("", true);
    this.setQuery([], true);
  },
  render: function render() {
    this.$el.html(this.template({
      _t: i18n_wrapper["a" /* default */]
    }));
    this.button = new views_button["a" /* default */]({
      title: Object(i18n_wrapper["a" /* default */])("Filter"),
      icon: "filter",
      extraClasses: ["btn-queryfilter"]
    });
    this.popover = new views_popover["a" /* default */]({
      triggerView: this.button,
      id: "structure-query",
      title: index_all["default"].template(Object(i18n_wrapper["a" /* default */])("Filter")),
      content: this.popoverContent,
      placement: "left"
    });
    this.$(".input-group-btn").append(this.button.render().el);
    this.$el.append(this.popover.render().el);
    this.popover.$el.addClass("query");
    this.$queryString = this.popover.$("input.pat-querystring");
    this.queryString = new querystring(this.$queryString, {
      indexOptionsUrl: this.app.options.indexOptionsUrl,
      showPreviews: false
    });
    var self = this;
    self.queryString.$el.on("change", function () {
      if (self.timeoutId) {
        clearTimeout(self.timeoutId);
      }

      self.timeoutId = setTimeout(function () {
        self.setQuery(self.$queryString.val(), false);
      }, this.keyupDelay);
    });
    self.queryString.$el.on("initialized", function () {
      self.queryString.$sortOn.on("change", function () {
        self.app["sort_on"] = self.queryString.$sortOn.val(); // jshint ignore:line

        self.app.collection.currentPage = 1;
        self.app.collection.pager();
      });
      self.queryString.$sortOrder.change(function () {
        if (self.queryString.$sortOrder[0].checked) {
          self.app["sort_order"] = "reverse"; // jshint ignore:line
        } else {
          self.app["sort_order"] = "ascending"; // jshint ignore:line
        }

        self.app.collection.currentPage = 1;
        self.app.collection.pager();
      });
    });
    return this;
  },
  filter: function filter(event) {
    var self = this;

    if (self.timeoutId) {
      clearTimeout(self.timeoutId);
    }

    self.timeoutId = setTimeout(function () {
      var term_el = jquery_js_exposed_default()(event.currentTarget);
      self.setTerm(term_el.val(), false);
    }, this.keyupDelay);
  }
}));
// EXTERNAL MODULE: ./node_modules/mockup/src/pat/structure/js/views/upload.js
var upload = __webpack_require__(265);

// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/js/collections/selected.js


/* harmony default export */ var collections_selected = (backbone_default.a.Collection.extend({
  model: models_result,
  removeResult: function removeResult(model) {
    return this.removeByUID(model.uid());
  },
  removeByUID: function removeByUID(uid) {
    var found = this.getByUID(uid);

    if (found) {
      this.remove(found);
    }

    return found;
  },
  getByUID: function getByUID(uid) {
    return this.findWhere({
      UID: uid
    });
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/templates/status.xml
/* harmony default export */ var templates_status = ("<div class=\"alert alert-<%- type %> status fc-status\">\n  <strong class=\"fc-status-label\"><%- label %></strong>\n  <span class=\"fc-status-text\"><%- text %></span>&nbsp;<% // &nbsp; to get correct height for empty alerts %>\n</div>\n");
// EXTERNAL MODULE: ./node_modules/backbone.paginator/lib/backbone.paginator.js
var backbone_paginator = __webpack_require__(372);

// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/js/collections/result.js






/* harmony default export */ var collections_result = (backbone_default.a.Paginator.requestPager.extend({
  model: models_result,
  initialize: function initialize(models, options) {
    this.options = options;
    this.view = options.view;
    this.url = options.url;
    this.queryHelper = mockup_src_core_utils["a" /* default */].QueryHelper(jquery_js_exposed_default.a.extend(true, {}, this.view.options, {
      attributes: this.view.options.queryHelperAttributes
    }));

    this.queryParser = function (options) {
      var self = this;

      if (options === undefined) {
        options = {};
      }

      var term = null;

      if (self.view.toolbar) {
        term = self.view.toolbar.get("filter").term;
      }

      var sortOn = self.view.sort_on; // jshint ignore:line

      var sortOrder = self.view.sort_order; // jshint ignore:line

      if (!sortOn) {
        sortOn = "getObjPositionInParent";
      }

      return JSON.stringify({
        criteria: self.queryHelper.getCriterias(term, jquery_js_exposed_default.a.extend({}, options, {
          additionalCriterias: self.view.additionalCriterias
        })),
        sort_on: sortOn,
        sort_order: sortOrder
      });
    }; // check and see if a hash is provided for initial path


    if (window.location.hash.substring(0, 2) === "#/") {
      this.queryHelper.currentPath = window.location.hash.substring(1);
    }

    backbone_default.a.Paginator.requestPager.prototype.initialize.apply(this, [models, options]);
  },
  getCurrentPath: function getCurrentPath() {
    return this.queryHelper.getCurrentPath();
  },
  setCurrentPath: function setCurrentPath(path) {
    this.queryHelper.currentPath = path;
  },
  pager: function pager() {
    this.trigger("pager");
    backbone_default.a.Paginator.requestPager.prototype.pager.apply(this, []);
  },
  paginator_core: {
    // the type of the request (GET by default)
    type: "GET",
    // the type of reply (jsonp by default)
    dataType: "json",
    url: function url() {
      return this.url;
    }
  },
  paginator_ui: {
    // the lowest page index your API allows to be accessed
    firstPage: 1,
    // which page should the paginator start from
    // (also, the actual page the paginator is on)
    currentPage: 1,
    // how many items per page should be shown
    perPage: 15
  },
  // server_api are query parameters passed directly (currently GET
  // parameters).  These are currently generated using following
  // functions.  Renamed to queryParams in Backbone.Paginator 2.0.
  server_api: {
    query: function query() {
      return this.queryParser();
    },
    batch: function batch() {
      this.queryHelper.options.batchSize = this.perPage;
      return JSON.stringify(this.queryHelper.getBatch(this.currentPage));
    },
    attributes: function attributes() {
      return JSON.stringify(this.queryHelper.options.attributes);
    }
  },
  parse: function parse(response, baseSortIdx) {
    if (baseSortIdx === undefined) {
      baseSortIdx = 0;
    }

    this.totalRecords = response.total;
    var results = response.results; // XXX manually set sort order here since backbone will otherwise
    // do arbitrary sorting?

    index_all["default"].each(results, function (item, idx) {
      item._sort = idx;
    });

    return results;
  },
  comparator: "_sort"
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/js/views/app.js
function app_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function app_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { app_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { app_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

 // needed for ``await`` support























var app_log = src_core_logging["a" /* default */].getLogger("pat-structure");
/* harmony default export */ var views_app = (views_base["a" /* default */].extend({
  tagName: "div",
  statusTemplate: index_all["default"].template(templates_status),
  statusMessages: [],
  sort_on: "getObjPositionInParent",
  sort_order: "ascending",
  additionalCriterias: [],
  cookieSettingPrefix: "_fc_",
  buttons: null,
  textfilter: null,
  forms: [],
  pasteAllowed: function pasteAllowed() {
    return !!jquery_js_exposed_default.a.cookie("__cp");
  },
  initialize: function () {
    var _initialize = app_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(options) {
      var self, timeout;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              self = this;
              views_base["a" /* default */].prototype.initialize.apply(self, [options]);
              self.loading = new mockup_src_core_utils["a" /* default */].Loading();
              self.loading.show();
              /* close popovers when clicking away */

              jquery_js_exposed_default()(document).click(function (e) {
                var $el = jquery_js_exposed_default()(e.target);

                if (!$el.is(":visible") || $el.css("visibility") === "hidden" || $el.css("opacity") === "0") {
                  // ignore this, fake event trigger to element that is not visible
                  return;
                }

                if ($el.is("a") || $el.parent().is("a")) {
                  return;
                }

                var $popover = jquery_js_exposed_default()(".popover:visible");

                if ($popover.length > 0 && !jquery_js_exposed_default.a.contains($popover[0], $el[0])) {
                  var popover = $popover.data("component");

                  if (popover) {
                    popover.hide();
                  }
                }
              });
              self.collection = new collections_result([], {
                // Due to default implementation need to poke at things in here,
                // view is passed.
                view: self,
                url: self.options.collectionUrl
              });
              self.setAllCookieSettings();
              self.selectedCollection = new collections_selected();
              self.tableView = new views_table({
                app: self
              });
              self.pagingView = new views_paging({
                app: self
              });
              /* initialize buttons */

              self.setupButtons();
              self.wellView = new selectionwell({
                collection: self.selectedCollection,
                triggerView: self.toolbar.get("selected-items"),
                app: self,
                id: "selected-items"
              });
              self.toolbar.get("selected-items").disable();
              self.buttons.disable();
              timeout = 0;
              self.selectedCollection.on("add remove reset", function ()
              /*modal, collection*/
              {
                /* delay rendering since this can happen in batching */
                clearTimeout(timeout);
                timeout = setTimeout(function () {
                  self.updateButtons();
                }, 100);
              }, self);
              self.collection.on("sync", function () {
                if (self.contextInfoUrl) {
                  jquery_js_exposed_default.a.ajax({
                    url: self.getAjaxUrl(self.contextInfoUrl),
                    dataType: "json",
                    success: function success(data) {
                      jquery_js_exposed_default()("body").trigger("context-info-loaded", [data]);
                    },
                    error: function error(response) {
                      // XXX handle error?
                      if (response.status === 404) {
                        app_log.info("context info url not found");
                      }
                    }
                  });
                }

                self.loading.hide();
              });
              self.collection.on("pager", function () {
                self.loading.show();
                self.updateButtons(); // the remaining calls are related to window.pushstate.
                // abort if feature unavailable.

                if (!(window.history && window.history.pushState)) {
                  return;
                } // undo the flag set by popState to prevent the push state
                // from being triggered here, and early abort out of the
                // function to not execute the folowing pushState logic.


                if (self.doNotPushState) {
                  self.doNotPushState = false;
                  return;
                }

                var path = self.getCurrentPath();
                var url;

                if (path === "/") {
                  path = "";
                }
                /* maintain history here */


                if (self.options.pushStateUrl) {
                  // permit an extra slash in pattern, but strip that if there
                  // as path always will be prefixed with a `/`
                  var pushStateUrl = self.options.pushStateUrl.replace("/{path}", "{path}");
                  url = pushStateUrl.replace("{path}", path);
                  window.history.pushState(null, null, url);
                } else if (self.options.urlStructure) {
                  // fallback to urlStructure specification
                  url = self.options.urlStructure.base + path + self.options.urlStructure.appended;
                  window.history.pushState(null, null, url);
                }

                if (self.options.traverseView) {
                  // flag specifies that the context view implements a traverse
                  // view (i.e. IPublishTraverse) and the path is a virtual path
                  // of some kind - use the base object instead for that by not
                  // specifying a path.
                  path = ""; // TODO figure out whether the following event after this is
                  // needed at all.
                }

                jquery_js_exposed_default()("body").trigger("structure-url-changed", [path]);
              });

              if ((self.options.pushStateUrl || self.options.urlStructure) && mockup_src_core_utils["a" /* default */].featureSupport.history()) {
                jquery_js_exposed_default()(window).bind("popstate", function () {
                  /* normalize this url first... */
                  var win = mockup_src_core_utils["a" /* default */].getWindow();
                  var url = win.location.href;
                  var base, appended;

                  if (url.indexOf("?") !== -1) {
                    url = url.split("?")[0];
                  }

                  if (url.indexOf("#") !== -1) {
                    url = url.split("#")[0];
                  }

                  if (self.options.pushStateUrl) {
                    var tmp = self.options.pushStateUrl.split("{path}");
                    base = tmp[0];
                    appended = tmp[1];
                  } else {
                    base = self.options.urlStructure.base;
                    appended = self.options.urlStructure.appended;
                  } // take off the base url


                  var path = url.substring(base.length);

                  if (path.substring(path.length - appended.length) === appended) {
                    /* check that it ends with appended value */
                    path = path.substring(0, path.length - appended.length);
                  }

                  if (!path) {
                    path = "/";
                  }

                  self.setCurrentPath(path);
                  jquery_js_exposed_default()("body").trigger("structure-url-changed", [path]); // since this next call causes state to be pushed...

                  self.doNotPushState = true;
                  self.collection.goTo(self.collection.information.firstPage);
                });
                /* detect key events */

                jquery_js_exposed_default()(document).bind("keyup keydown", function (e) {
                  self.keyEvent = e;
                });
              }

              self.togglePasteBtn();

            case 20:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function initialize(_x) {
      return _initialize.apply(this, arguments);
    }

    return initialize;
  }(),
  updateButtons: function updateButtons() {
    var self = this;

    if (self.selectedCollection.length) {
      self.toolbar.get("selected-items").enable();
      self.buttons.enable();
    } else {
      this.toolbar.get("selected-items").disable();
      self.buttons.disable();
    }

    self.togglePasteBtn();
  },
  togglePasteBtn: function togglePasteBtn() {
    var self = this;

    if (index_all["default"].find(self.buttons.items, function (btn) {
      return btn.id === "paste";
    })) {
      if (self.pasteAllowed()) {
        self.buttons.get("paste").enable();
      } else {
        self.buttons.get("paste").disable();
      }
    }
  },
  inQueryMode: function inQueryMode() {
    if (this.toolbar) {
      var term = this.toolbar.get("filter").term;

      if (term) {
        return true;
      }
    }

    if (this.additionalCriterias.length > 0) {
      return true;
    }

    if (this.sort_on && this.sort_on !== "getObjPositionInParent") {
      // jshint ignore:line
      return true;
    }

    if (this.sort_order !== "ascending") {
      // jshint ignore:line
      return true;
    }

    return false;
  },
  getSelectedUids: function getSelectedUids(collection) {
    var self = this;

    if (collection === undefined) {
      collection = self.selectedCollection;
    }

    var uids = [];
    collection.each(function (item) {
      uids.push(item.uid());
    });
    return uids;
  },
  getCurrentPath: function getCurrentPath() {
    return this.collection.getCurrentPath();
  },
  setCurrentPath: function setCurrentPath(path) {
    this.collection.setCurrentPath(path);
    this.textfilter.clearTerm();
    this.clearStatus();
  },
  getAjaxUrl: function getAjaxUrl(url) {
    return url.replace("{path}", this.getCurrentPath());
  },
  buttonClickEvent: function buttonClickEvent(button) {
    var self = this;
    var data = null;
    var callback = null;

    if (button.url) {
      self.loading.show(); // handle ajax now

      if (arguments.length > 1) {
        var arg1 = arguments[1];

        if (!arg1.preventDefault) {
          data = arg1;
        }
      }

      if (arguments.length > 2) {
        var arg2 = arguments[2];

        if (typeof arg2 === "function") {
          callback = arg2;
        }
      }

      if (data === null) {
        data = {};
      }

      if (data.selection === undefined) {
        // if selection is overridden by another mechanism
        data.selection = JSON.stringify(self.getSelectedUids());
      }

      data._authenticator = mockup_src_core_utils["a" /* default */].getAuthenticator();

      if (data.folder === undefined) {
        data.folder = self.getCurrentPath();
      }

      var url = self.getAjaxUrl(button.url);
      jquery_js_exposed_default.a.ajax({
        url: url,
        type: "POST",
        data: data,
        success: function success(data) {
          self.ajaxSuccessResponse.apply(self, [data, callback]);
          self.loading.hide();
        },
        error: function error(response) {
          self.ajaxErrorResponse.apply(self, [response, url]);
          self.loading.hide();
        }
      }, self);
    }
  },
  ajaxSuccessResponse: function ajaxSuccessResponse(data, callback) {
    this.clearStatus();
    this.selectedCollection.reset();

    if (data.status === "success") {
      this.collection.reset();
    }

    if (data.msg) {
      // give status message somewhere...
      this.setStatus({
        text: data.msg,
        type: data.status || "warning"
      });
    }

    if (callback !== null && callback !== undefined) {
      callback(data);
    }

    this.collection.pager();
  },
  ajaxErrorResponse: function ajaxErrorResponse(response, url) {
    if (response.status === 404) {
      window.alert(Object(i18n_wrapper["a" /* default */])("operation url ${url} is not valid", {
        url: url
      }));
    } else {
      window.alert(Object(i18n_wrapper["a" /* default */])("there was an error performing the action"));
    }
  },
  setupButtons: function setupButtons() {
    var self = this;
    var items = [];
    var columnsBtn = new views_button["a" /* default */]({
      id: "structure-columns",
      tooltip: Object(i18n_wrapper["a" /* default */])("Configure displayed columns"),
      icon: "th"
    });
    self.columnsView = new columns({
      app: self,
      triggerView: columnsBtn,
      id: "structure-columns",
      placement: "bottom-right"
    });
    items.push(columnsBtn);
    items.push(new selectionbutton({
      title: Object(i18n_wrapper["a" /* default */])("Selected"),
      id: "selected-items",
      tooltip: Object(i18n_wrapper["a" /* default */])("Manage selection"),
      collection: this.selectedCollection
    }));

    if (self.options.rearrange) {
      var rearrangeButton = new views_button["a" /* default */]({
        id: "structure-rearrange",
        title: Object(i18n_wrapper["a" /* default */])("Rearrange"),
        icon: "sort-by-attributes",
        tooltip: Object(i18n_wrapper["a" /* default */])("Rearrange folder contents"),
        url: self.options.rearrange.url
      });
      self.rearrangeView = new rearrange({
        triggerView: rearrangeButton,
        app: self,
        id: "structure-rearrange"
      });
      items.push(rearrangeButton);
    }

    if (self.options.upload && mockup_src_core_utils["a" /* default */].featureSupport.dragAndDrop() && mockup_src_core_utils["a" /* default */].featureSupport.fileApi()) {
      var uploadButton = new views_button["a" /* default */]({
        id: "upload",
        title: Object(i18n_wrapper["a" /* default */])("Upload"),
        tooltip: Object(i18n_wrapper["a" /* default */])("Upload files"),
        icon: "upload"
      });
      self.uploadView = new upload["a" /* default */]({
        triggerView: uploadButton,
        app: self,
        id: "upload"
      });
      items.push(uploadButton);
    }

    var buttons = [];

    index_all["default"].each(self.options.buttons, function (buttonOptions) {
      try {
        var button = new views_button["a" /* default */](buttonOptions);
        buttons.push(button);

        if (button.form) {
          buttonOptions.triggerView = button;
          buttonOptions.app = self;
          var view = new generic_popover(buttonOptions);
          self.forms.push(view.el);
        } else {
          button.on("button:click", self.buttonClickEvent, self);
        }
      } catch (err) {
        app_log.error("Error initializing button " + buttonOptions.title + " " + err);
      }
    });

    self.buttons = new buttongroup({
      items: buttons,
      id: "mainbuttons",
      app: self
    });
    items.push(self.buttons);
    self.textfilter = new textfilter({
      id: "filter",
      app: this
    });
    items.push(self.textfilter);
    this.toolbar = new toolbar({
      items: items
    });
  },
  moveItem: function moveItem(id, delta, subsetIds) {
    var self = this;
    jquery_js_exposed_default.a.ajax({
      url: this.getAjaxUrl(this.options.moveUrl),
      type: "POST",
      data: {
        delta: delta,
        id: id,
        _authenticator: mockup_src_core_utils["a" /* default */].getAuthenticator(),
        subsetIds: JSON.stringify(subsetIds)
      },
      dataType: "json",
      success: function success(data) {
        self.clearStatus();

        if (data.msg) {
          self.setStatus({
            text: data.msg
          });
        } else if (data.status !== "success") {
          // XXX handle error here with something?
          self.setStatus({
            text: "error moving item",
            type: "error"
          });
        }

        self.collection.pager(); // reload it all
      },
      error: function error() {
        self.clearStatus();
        self.setStatus({
          text: "error moving item",
          type: "error"
        });
      }
    });
  },
  clearStatus: function clearStatus(key) {
    var statusContainer = this.$el[0].querySelector(".fc-status-container");
    var statusItem;
    var toBeRemoved = [];

    if (key) {
      // remove specific status, even if marked with ``fixed``.
      toBeRemoved = this.statusMessages.filter(function (item) {
        return item.key === key;
      });
      toBeRemoved.forEach(function (statusItem) {
        try {
          statusContainer.removeChild(statusItem.el);
        } catch (e) {// just ignore.
        }
      });
      this.statusMessages = this.statusMessages.filter(function (item) {
        return item.key !== key;
      });
    } else {
      // remove all status messages except those marked with ``fixed``.
      this.statusMessages.forEach(function (statusItem) {
        if (!statusItem.fixed) {
          try {
            statusContainer.removeChild(statusItem.el);
            toBeRemoved.push(statusItem);
          } catch (e) {// just ignore.
          }
        }
      }.bind(this));
      this.statusMessages = this.statusMessages.filter(function (item) {
        return toBeRemoved.indexOf(item) === -1;
      });
    }
  },
  setStatus: function setStatus(status, btn, fixed, key) {
    if (key && this.statusMessages.filter(function (item) {
      return item.key === key;
    }).length > 0) {
      // Prevent two same status messages
      return;
    }

    var el = this.statusTemplate({
      label: status.label || "",
      text: status.text,
      type: status.type || "warning"
    });
    el = mockup_src_core_utils["a" /* default */].createElementFromHTML(el);

    if (btn) {
      btn = jquery_js_exposed_default()(btn)[0]; // support jquert + bare dom elements

      el.appendChild(btn);
    }

    var status = {
      el: el,
      fixed: fixed,
      key: key // to be used for filtering to prevent double status messages.

    };
    var statusContainer = this.$el[0].querySelector(".fc-status-container");
    statusContainer.appendChild(status.el);
    this.statusMessages.push(status);
    return status;
  },
  render: function render() {
    var self = this;
    self.$el.append(self.toolbar.render().el);

    if (self.wellView) {
      self.$el.find("#btn-" + self.wellView.id).after(self.wellView.render().el);
    }

    self.forms.forEach(function (element) {
      var id = jquery_js_exposed_default()(element).attr("id");
      self.$el.find("#btn-" + id).after(element);
    });
    self.$el.append(mockup_src_core_utils["a" /* default */].createElementFromHTML('<div class="fc-status-container"></div>'));

    if (self.columnsView) {
      self.$el.find("#btn-" + self.columnsView.id).after(self.columnsView.render().el);
    }

    if (self.rearrangeView) {
      self.$el.find("#btn-" + self.rearrangeView.id).after(self.rearrangeView.render().el);
    }

    if (self.uploadView) {
      self.$el.find("#btn-" + self.uploadView.id).after(self.uploadView.render().el);
    }

    self.$el.append(self.tableView.render().el);
    self.$el.append(self.pagingView.render().el); // Backdrop class

    if (self.options.backdropSelector !== null) {
      jquery_js_exposed_default()(self.options.backdropSelector).addClass("ui-backdrop-element");
    } else {
      self.$el.addClass("ui-backdrop-element");
    }

    return self;
  },
  getCookieSetting: function getCookieSetting(name, _default) {
    if (_default === undefined) {
      _default = null;
    }

    var val;

    try {
      val = jquery_js_exposed_default.a.cookie(this.cookieSettingPrefix + name);
      val = jquery_js_exposed_default.a.parseJSON(val).value;
    } catch (e) {
      /* error parsing json, load default here now */
      return _default;
    }

    if (val === undefined || val === null) {
      return _default;
    }

    return val;
  },
  setCookieSetting: function setCookieSetting(name, val) {
    jquery_js_exposed_default.a.cookie(this.cookieSettingPrefix + name, JSON.stringify({
      value: val
    }));
  },
  setAllCookieSettings: function setAllCookieSettings() {
    this.activeColumns = this.getCookieSetting(this.activeColumnsCookie, this.activeColumns);
    var perPage = this.getCookieSetting("perPage", 15);

    if (typeof perPage === "string") {
      perPage = parseInt(perPage);
    }

    this.collection.howManyPer(perPage);
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/structure/structure.js
function structure_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function structure_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { structure_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { structure_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }





/* harmony default export */ var structure = (core_base["a" /* default */].extend({
  name: "structure",
  trigger: ".pat-structure",
  parser: "mockup",
  defaults: {
    // for implementing history changes
    // Example: {base: 'http://mysite.com', appended: '/folder_contents'}
    urlStructure: null,
    vocabularyUrl: null,
    indexOptionsUrl: null,
    // for querystring widget
    contextInfoUrl: null,
    // for add new dropdown and other info
    setDefaultPageUrl: null,
    menuOptions: null,
    // default action menu options per item.
    backdropSelector: ".plone-modal",
    // Element upon which to apply backdrops used for popovers
    activeColumnsCookie: "activeColumns",

    /*
    As the options operate on a merging basis per new attribute
    (key/value pairs) on the option Object in a recursive fashion,
    array items are also treated as Objects so that custom options
    are replaced starting from index 0 up to the length of the
    array.  In the case of buttons, custom buttons are simply
    replaced starting from the first one.  The following defines the
    customized attributes that should be replaced wholesale, with
    the default version prefixed with `_default_`.
    */
    attributes: null,
    _default_attributes: ["CreationDate", "EffectiveDate", "ExpirationDate", "exclude_from_nav", "getIcon", "getMimeIcon", "getObjSize", "getURL", "id", "is_folderish", "last_comment_date", "ModificationDate", "path", "portal_type", "review_state", "Subject", "Title", "total_comments", "UID"],
    activeColumns: null,
    _default_activeColumns: ["ModificationDate", "EffectiveDate", "review_state"],
    availableColumns: null,
    _default_availableColumns: {
      id: "ID",
      ModificationDate: "Last modified",
      EffectiveDate: "Published",
      ExpirationDate: "Expiration",
      CreationDate: "Created",
      review_state: "Review state",
      Subject: "Tags",
      portal_type: "Type",
      is_folderish: "Folder",
      exclude_from_nav: "Excluded from navigation",
      getObjSize: "Object Size",
      last_comment_date: "Last comment date",
      total_comments: "Total comments"
    },
    typeToViewAction: null,
    _default_typeToViewAction: {
      File: "/view",
      Image: "/view",
      Blob: "/view"
    },
    defaultPageTypes: null,
    _default_defaultPageTypes: ["Document", "Event", "News Item", "Collection"],
    momentFormat: "L LT",
    rearrange: {
      properties: {
        id: "ID",
        sortable_title: "Title"
      },
      url: "/rearrange"
    },
    moveUrl: null,
    buttons: null,
    _default_buttons: [{
      tooltip: "Cut",
      title: "Cut",
      url: "/cut"
    }, {
      tooltip: "Copy",
      title: "Copy",
      url: "/copy"
    }, {
      tooltip: "Paste",
      title: "Paste",
      url: "/paste"
    }, {
      tooltip: "Delete",
      title: "Delete",
      url: "/delete",
      context: "danger",
      icon: "trash"
    }, {
      tooltip: "Workflow",
      title: "Workflow",
      url: "/workflow"
    }, {
      tooltip: "Tags",
      title: "Tags",
      url: "/tags"
    }, {
      tooltip: "Properties",
      title: "Properties",
      url: "/properties"
    }, {
      tooltip: "Rename",
      title: "Rename",
      url: "/rename"
    }],
    datatables_options: {},
    upload: {
      uploadMultiple: true,
      showTitle: true
    }
  },
  init: function () {
    var _init = structure_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var self, replaceDefaults;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              self = this;
              /*
              This part replaces the undefined (null) values in the user
              modifiable attributes with the default values.
               May want to consider moving the _default_* values out of the
              options object.
              */

              replaceDefaults = ["attributes", "activeColumns", "availableColumns", "buttons", "typeToViewAction", "defaultPageTypes"];

              index_all["default"].each(replaceDefaults, function (idx) {
                if (self.options[idx] === null) {
                  self.options[idx] = self.options["_default_" + idx];
                }
              });

              self.browsing = true; // so all queries will be correct with QueryHelper

              self.options.collectionUrl = self.options.vocabularyUrl;
              self.options.pattern = self; // the ``attributes`` options key is not compatible with backbone,
              // but queryHelper that will be constructed by the default
              // ResultCollection will expect this to be passed into it.

              self.options.queryHelperAttributes = self.options.attributes;
              delete self.options.attributes;
              _context.next = 10;
              return new views_app(self.options);

            case 10:
              self.view = _context.sent;
              self.$el.append(self.view.render().$el);

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function init() {
      return _init.apply(this, arguments);
    }

    return init;
  }()
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/textareamimetypeselector/textareamimetypeselector.js



/* harmony default export */ var textareamimetypeselector = (core_base["a" /* default */].extend({
  name: "textareamimetypeselector",
  trigger: ".pat-textareamimetypeselector",
  parser: "mockup",
  textarea: undefined,
  current_widget: undefined,
  defaults: {
    textareaName: "",
    widgets: {
      "text/html": {
        pattern: "tinymce",
        patternOptions: {}
      }
    }
  },
  init: function init() {
    var _this = this;

    this.textarea = document.querySelector("[name=\"".concat(this.options.textareaName, "\"]"));
    this.el.addEventListener("input", function (e) {
      return _this.init_textarea(e.target.value);
    });
    this.init_textarea(this.el.value);
  },
  init_textarea: function init_textarea(mimetype) {
    var pattern_config = this.options.widgets[mimetype]; // First, destroy current

    if (this.current_widget) {
      // The pattern must implement the destroy method.
      this.current_widget.destroy();
    } // Then, setup new


    if (pattern_config) {
      this.current_widget = new registry["a" /* default */].patterns[pattern_config.pattern](this.textarea, pattern_config.patternOptions || {});
    }
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/toggle/toggle.js


/* harmony default export */ var toggle_toggle = (core_base["a" /* default */].extend({
  name: "toggle",
  trigger: ".pat-toggle",
  parser: "mockup",
  defaults: {
    attribute: "class",
    event: "click",
    targetScope: "global"
  },
  init: function init() {
    var self = this;

    if (!self.options.target) {
      self.$target = self.$el;
    } else if (self.options.targetScope === "global") {
      self.$target = jquery_js_exposed_default()(self.options.target);
    } else {
      //self.$target = self.$el[self.options.menu](self.options.target);
      self.$target = self.$el.parents(self.options.targetScope).first().find(self.options.target);
    }

    if (!self.$target || self.$target.length === 0) {
      jquery_js_exposed_default.a.error('No target found for "' + self.options.target + '".');
    }

    self.on(self.options.event, function (e) {
      self.toggle();
      e.stopPropagation();
      e.preventDefault();
    });
  },
  isMarked: function isMarked() {
    var self = this;
    var marked = false;

    for (var i = 0; i < this.$target.length; i = i + 1) {
      if (self.options.attribute === "class") {
        if (this.$target.eq(i).hasClass(this.options.value)) {
          marked = true;
        } else {
          marked = false;
          break;
        }
      } else {
        if (this.$target.eq(i).attr(this.options.attribute) === this.options.value) {
          marked = true;
        } else {
          marked = false;
          break;
        }
      }
    }

    return marked;
  },
  toggle: function toggle() {
    var self = this;

    if (self.isMarked()) {
      self.remove();
    } else {
      self.add();
    }
  },
  remove: function remove() {
    var self = this;
    self.emit("remove-attr");

    if (self.options.attribute === "class") {
      self.$target.removeClass(self.options.value);
    } else {
      self.$target.removeAttr(self.options.attribute);
    }

    self.emit("attr-removed");
  },
  add: function add() {
    var self = this;
    self.emit("add-attr");

    if (self.options.attribute === "class") {
      self.$target.addClass(self.options.value);
    } else {
      self.$target.attr(self.options.attribute, self.options.value);
    }

    self.emit("added-attr");
  }
}));
// EXTERNAL MODULE: ./node_modules/mockup/src/pat/toolbar/pattern.toolbar.scss
var pattern_toolbar = __webpack_require__(373);

// CONCATENATED MODULE: ./node_modules/mockup/src/pat/toolbar/toolbar.js







/* harmony default export */ var toolbar_toolbar = (core_base["a" /* default */].extend({
  name: "toolbar",
  trigger: ".pat-toolbar",
  parser: "mockup",
  defaults: {
    containerSelector: "#edit-zone",
    classNames: {
      logo: "plone-toolbar-logo",
      left: "plone-toolbar-left",
      leftDefault: "plone-toolbar-left-default",
      leftExpanded: "plone-toolbar-left-expanded",
      top: "plone-toolbar-top",
      topDefault: "plone-toolbar-top-default",
      topExpanded: "plone-toolbar-top-expanded",
      default: "plone-toolbar-default",
      expanded: "plone-toolbar-expanded",
      active: "active"
    },
    cookieName: "plone-toolbar",
    toolbar_width: "120px",
    submenu_width: "180px",
    desktop_width: "768px"
  },
  pxToInt: function pxToInt(px) {
    return parseInt(px.split("px")[0], 10);
  },
  setupMobile: function setupMobile() {
    var that = this;
    that.$container.css("right", "-" + that.options.toolbar_width); // make sure we are in expanded mode

    jquery_js_exposed_default()("body").addClass(that.options.classNames.leftExpanded);
    jquery_js_exposed_default()("body").addClass(that.options.classNames.expanded);
    jquery_js_exposed_default()("body").addClass(that.options.classNames.left);
    jquery_js_exposed_default()("body").removeClass(that.options.classNames.topExpanded);
    jquery_js_exposed_default()("body").removeClass(that.options.classNames.top);
    jquery_js_exposed_default()("body").removeClass(that.options.classNames.topDefault);
    jquery_js_exposed_default()("body").removeClass(that.options.classNames.default);
    jquery_js_exposed_default()("." + that.options.classNames.logo, that.$container).off("click").on("click", function () {
      var $el = jquery_js_exposed_default()(that.$el);

      if ($el.hasClass("open")) {
        that.$container.css("right", "-" + that.options.toolbar_width);
        jquery_js_exposed_default()("html").css("margin-left", "0");
        jquery_js_exposed_default()("html").css("margin-right", "0");
        $el.removeClass("open");
        jquery_js_exposed_default()("nav li", that.$container).removeClass(that.options.classNames.active);
      } else {
        that.$container.css("right", "0");
        $el.addClass("open");
        jquery_js_exposed_default()("html").css("margin-left", "-" + that.options.toolbar_width);
        jquery_js_exposed_default()("html").css("margin-right", that.options.toolbar_width);
      }
    }); // Remove desktop event binding

    jquery_js_exposed_default()("nav > ul > li", that.$container).has("a .plone-toolbar-caret").off("click"); // Add sub-menu events

    jquery_js_exposed_default()("nav li a", that.$container).has(".plone-toolbar-caret").off("click").on("click", function (e) {
      e.preventDefault();
      e.stopPropagation();
      var $el = jquery_js_exposed_default()(this).parent();

      if ($el.hasClass(that.options.classNames.active)) {
        that.$container.css("right", "0");
        jquery_js_exposed_default()("html").css("margin-left", "-" + that.options.toolbar_width);
        jquery_js_exposed_default()("html").css("margin-right", that.options.toolbar_width);
        jquery_js_exposed_default()("nav li", that.$container).removeClass(that.options.classNames.active);
      } else {
        jquery_js_exposed_default()("nav li", that.$container).removeClass(that.options.classNames.active);
        $el.addClass(that.options.classNames.active);
        that.$container.css("right", that.options.submenu_width);
        var margin = that.pxToInt(that.options.toolbar_width) + that.pxToInt(that.options.submenu_width);
        jquery_js_exposed_default()("html").css("margin-left", "-" + margin + "px");
        jquery_js_exposed_default()("html").css("margin-right", +margin + "px");
      }
    });
  },
  setupDesktop: function setupDesktop() {
    var that = this;

    if (that.state.expanded) {
      jquery_js_exposed_default()("body").addClass(that.options.classNames.expanded);
      jquery_js_exposed_default()("body").addClass(that.state.left ? that.options.classNames.leftExpanded : that.options.classNames.topExpanded);
      jquery_js_exposed_default()("body").removeClass(that.options.classNames.default);
      jquery_js_exposed_default()("body").removeClass(that.options.classNames.leftDefault);
      jquery_js_exposed_default()("body").removeClass(that.options.classNames.topDefault);
    } else {
      jquery_js_exposed_default()("body").addClass(that.options.classNames.default);
      jquery_js_exposed_default()("body").addClass(that.state.left ? that.options.classNames.leftDefault : that.options.classNames.topDefault);
      jquery_js_exposed_default()("body").removeClass(that.options.classNames.expanded);
      jquery_js_exposed_default()("body").removeClass(that.options.classNames.leftExpanded);
      jquery_js_exposed_default()("body").removeClass(that.options.classNames.topExpanded);
    }

    if (!that.state.left) {
      jquery_js_exposed_default()("body").addClass(that.options.classNames.top);
      jquery_js_exposed_default()("body").addClass(that.state.expanded ? that.options.classNames.topExpanded : that.options.classNames.topDefault);
      jquery_js_exposed_default()("body").removeClass(that.options.classNames.left);
      jquery_js_exposed_default()("body").removeClass(that.options.classNames.leftDefault);
      jquery_js_exposed_default()("body").removeClass(that.options.classNames.leftExpanded);
    }

    jquery_js_exposed_default()("." + that.options.classNames.logo, that.$container).off("click").on("click", function () {
      if (that.state.expanded) {
        // currently expanded, need to compress
        that.setState({
          expanded: false
        });
        jquery_js_exposed_default()("body").removeClass(that.options.classNames.expanded);
        jquery_js_exposed_default()("body").addClass(that.options.classNames.default);
        jquery_js_exposed_default()("nav li", that.$container).removeClass(that.options.classNames.active);

        if (that.state.left) {
          jquery_js_exposed_default()("body").addClass(that.options.classNames.leftDefault);
          jquery_js_exposed_default()("body").removeClass(that.options.classNames.leftExpanded);
        } else {
          jquery_js_exposed_default()("body").addClass(that.options.classNames.topDefault);
          jquery_js_exposed_default()("body").removeClass(that.options.classNames.topExpanded);
        }
      } else {
        that.setState({
          expanded: true
        }); // Switch to expanded

        jquery_js_exposed_default()("body").addClass(that.options.classNames.expanded);
        jquery_js_exposed_default()("body").removeClass(that.options.classNames.default);
        jquery_js_exposed_default()("nav li", that.$container).removeClass(that.options.classNames.active);

        if (that.state.left) {
          jquery_js_exposed_default()("body").addClass(that.options.classNames.leftExpanded);
          jquery_js_exposed_default()("body").removeClass(that.options.classNames.leftDefault);
        } else {
          jquery_js_exposed_default()("body").addClass(that.options.classNames.topExpanded);
          jquery_js_exposed_default()("body").removeClass(that.options.classNames.topDefault);
        }
      }

      that.hideElements();
    });
    jquery_js_exposed_default()("nav > ul > li li", that.$container).off("click").on("click", function (event) {
      event.stopImmediatePropagation();
    }); // Remove mobile event binding

    jquery_js_exposed_default()("nav li a", that.$container).has(".plone-toolbar-caret").off("click"); // content menu activated

    jquery_js_exposed_default()("nav > ul > li", that.$container).has("a .plone-toolbar-caret").off("click").on("click", function (event) {
      var $this = jquery_js_exposed_default()(this);
      var active_class = that.options.classNames.active;
      event.preventDefault();
      event.stopPropagation();
      var hasClass = $this.hasClass(active_class);
      var $more_subset = $this.parent("#plone-toolbar-more-subset");

      if ($more_subset.length) {
        // close only the content menus from the subset, keeping the toolbar more list active
        $more_subset.find("li").filter('[id*="contentmenu-"]').removeClass(active_class);
      } else {
        // close existing opened contentmenus
        jquery_js_exposed_default()("." + active_class + "> ul", that.$container).attr("aria-hidden", "true");
        jquery_js_exposed_default()("." + active_class, that.$container).removeClass(active_class); // we need to close the more subset as well not just the content-menus
        // when we click on the personal bar

        jquery_js_exposed_default()("#plone-toolbar-more-subset").hide();
      }

      jquery_js_exposed_default()("nav li > ul", jquery_js_exposed_default()(this)).css({
        "margin-top": ""
      }); // unset this so we get fly-in affect

      if (!hasClass) {
        // open current selected if not already open
        $this.addClass(active_class);
        that.padPulloutContent($this);
      }
    });
    jquery_js_exposed_default()("body").on("click", function (event) {
      var $el = that.$container.find(event.target); // we need to check if the target isn't the nav which can be
      // triggered if we click on the portal-header and plone-toolbar-more-subset
      // is visible which enlarges the nav. In this case we want to hide the
      // active lists because the user assumes that he targeted an element outside
      // the edit-bar

      if (!$el.length || $el.prop("tagName") === "NAV") {
        jquery_js_exposed_default()("nav > ul > li", that.$container).each(function (key, element) {
          jquery_js_exposed_default()(element).removeClass(that.options.classNames.active);
        }); // we need to close the more subset as well not just the content-menus
        // when we click on the body area

        jquery_js_exposed_default()("#plone-toolbar-more-subset").hide();
      }
    });
    that.setHeight();
  },
  padPulloutContent: function padPulloutContent($li) {
    if (!this.state.left || !this.isDesktop()) {
      // only when on left
      return;
    } // try to place content as close to the user click as possible


    var $content = jquery_js_exposed_default()("> ul", $li);
    var $inner = $content.find("> *");
    var $first = $inner.first();
    var $last = $inner.last();
    var insideHeight = $last.position().top - $first.position().top + $last.outerHeight();
    var height = $content.outerHeight(); // WebKit seems to set top position to very very small float value when zoomed,
    // so check if the position top is less than 1px rather than 0.

    var itemLocation = $li.position().top > 1 ? $li.position().top : $li.offset().top; // depends on positioning
    // margin-top + insideHeight should equal total height

    $content.css({
      "margin-top": Math.min(itemLocation, height - insideHeight)
    });
    $content.attr("aria-hidden", "false");
  },
  isDesktop: function isDesktop() {
    return jquery_js_exposed_default()(window).width() > this.pxToInt(this.options.desktop_width);
  },
  _setHeight: function _setHeight() {
    var $items = jquery_js_exposed_default()(".plone-toolbar-main", this.$container);
    $items.css({
      height: ""
    });
    var natualHeight = $items.outerHeight();
    jquery_js_exposed_default()(".scroll-btn", this.$container).remove();
    $items.css({
      "padding-top": ""
    });
    var height = jquery_js_exposed_default()(window).height() - jquery_js_exposed_default()("#personal-bar-container").height() - jquery_js_exposed_default()(".plone-toolbar-logo").height();

    if (height < natualHeight) {
      /* add scroll buttons */
      var $scrollUp = jquery_js_exposed_default()('<li class="scroll-btn up" aria-hidden="true"><a title="' + Object(i18n_wrapper["a" /* default */])("scroll up") + '" href="#"><span class="icon-up"></span><span>&nbsp;</span></a></li>');
      var $scrollDown = jquery_js_exposed_default()('<li class="scroll-btn down" aria-hidden="true"><a title="' + Object(i18n_wrapper["a" /* default */])("scroll down") + '" href="#"><span class="icon-down"></span><span>&nbsp;</span></a></li>');
      $items.prepend($scrollUp);
      $items.append($scrollDown);
      $items.height(height); //set an scroll event listerner to know where we are inside the container

      $items.scroll(function () {
        if ($items.scrollTop() == 0) {
          //if we are in the top we hide the arrow to go up
          $scrollUp.css("display", "none");
        } else {
          //else we display it
          $scrollUp.css("display", "list-item");
        }

        if ($items.scrollTop() + $items.height() == natualHeight) {
          //if we are in the bottom we hide the arrow to go down
          $scrollDown.css("display", "none");
        } else {
          //else we display it
          $scrollDown.css("display", "list-item");
        }
      }); //at the beginning we check if we are in the top to hide the arrow to go up

      if ($items.scrollTop() == 0) {
        $scrollUp.css("display", "none");
      }

      $scrollUp.click(function (e) {
        e.preventDefault();
        $items.scrollTop($items.scrollTop() - 50);
      });
      $scrollDown.click(function (e) {
        e.preventDefault();
        $items.scrollTop($items.scrollTop() + 50);
      });
    }
    /* if there is active, make sure to reposition */


    var $active = jquery_js_exposed_default()("li.active ul:visible", this.$container);

    if ($active.length > 0) {
      this.padPulloutContent($active);
    }
  },
  setHeight: function setHeight() {
    if (!this.state.left || !this.isDesktop()) {
      // only when on left
      return;
    }

    var that = this;
    clearTimeout(that.heightTimeout);
    that.heightTimeout = setTimeout(function () {
      that._setHeight();
    }, 50);
  },
  setState: function setState(state) {
    var that = this;
    that.state = jquery_js_exposed_default.a.extend({}, that.state, state);
    /* only cookie configurable attribute is expanded or contracted */

    jquery_js_exposed_default.a.cookie(that.options.cookieName, JSON.stringify({
      expanded: that.state.expanded
    }), {
      path: "/"
    });
  },
  cloneViewsIntoSubset: function cloneViewsIntoSubset($container, $views, $subset) {
    var i,
        $content_view,
        container = $container[0],
        length = $views.length - 1;
    var view_should_move = container.offsetTop !== 0;

    if (view_should_move) {
      for (i = length; length >= 0; length -= 1) {
        $content_view = $views.eq(i);

        if ($content_view.is(":hidden")) {
          continue;
        }

        $content_view.hide().clone(true, true).appendTo($subset).show();

        if (container.offsetTop === 0) {
          break;
        }
      }
    }
  },
  hideElements: function hideElements() {
    var that = this;

    if (that.state.left) {
      // only when on top
      return;
    }

    var w = jquery_js_exposed_default()(".plone-toolbar-container").width(),
        wtc = jquery_js_exposed_default()(".plone-toolbar-logo").width();
    var $plone_toolbar_main = jquery_js_exposed_default()(".plone-toolbar-main");
    var $toolbar_menus = $plone_toolbar_main.find("> li");
    $toolbar_menus.each(function () {
      wtc += jquery_js_exposed_default()(this).width();
    });
    var $pers_bar_container = jquery_js_exposed_default()("#personal-bar-container");
    $pers_bar_container.find("> li").each(function () {
      wtc += jquery_js_exposed_default()(this).width();
    });
    var $toolbar_more_options = jquery_js_exposed_default()("#plone-toolbar-more-options");
    wtc -= $toolbar_more_options.width();
    var $content_menus = $toolbar_menus.filter('[id^="plone-contentmenu-"]');
    var $content_views = $toolbar_menus.filter('[id^="contentview-"]');

    if (w < wtc) {
      if (!$toolbar_more_options.length) {
        (function () {
          $content_menus.hide();
          $toolbar_more_options = jquery_js_exposed_default()('<li id="plone-toolbar-more-options"><a href="#"><span class="icon-moreOptions" aria-hidden="true"></span><span>' + Object(i18n_wrapper["a" /* default */])("More") + '</span><span class="plone-toolbar-caret"></span></a></li>');
          $plone_toolbar_main.append($toolbar_more_options);
          var $toolbar_more_subset = jquery_js_exposed_default()('<ul id="plone-toolbar-more-subset" style="display: none"></ul>');
          $pers_bar_container.after($toolbar_more_subset); // we want only the list items with id that contains plone-contentmenu and not the children links
          // of these lists therefore we iterate only over the list elements

          $content_menus.each(function () {
            jquery_js_exposed_default()(this).clone(true, true).show().appendTo($toolbar_more_subset);
          });
          that.cloneViewsIntoSubset($pers_bar_container, $content_views, $toolbar_more_subset);
          var active_class = that.options.classNames.active;
          $toolbar_more_options.find("a").on("click", function (event) {
            // close existing opened contentmenus
            jquery_js_exposed_default()("." + active_class, that.$container).removeClass(active_class);
            var $more_list = jquery_js_exposed_default()(this).parent(); // properly toggle active class for toolbar_more list item

            $more_list.toggleClass("active", $toolbar_more_subset.is(":hidden"));
            $toolbar_more_subset.toggle();
            event.preventDefault();
          });
        })();
      }
    } else {
      $toolbar_more_options.remove();
      jquery_js_exposed_default()("#plone-toolbar-more-subset").remove();
      $plone_toolbar_main.children().show();
    } // check if the personal toolbar is not offseted if there isn't enough space
    // and we already have the plone-toolbar-more-options added to the page.


    if ($pers_bar_container[0] && $pers_bar_container[0].offsetTop !== 0) {
      that.cloneViewsIntoSubset($pers_bar_container, $content_views, jquery_js_exposed_default()("#plone-toolbar-more-subset"));
    }
  },
  init: function init() {
    console.log("init toolbar...");
    var that = this;
    that.heightTimeout = 0;
    that.$container = jquery_js_exposed_default()(that.options.containerSelector);
    var toolbar_cookie = jquery_js_exposed_default.a.cookie(that.options.cookieName);
    that.state = {
      expanded: true,
      left: jquery_js_exposed_default()("body").hasClass(that.options.classNames.left)
    };

    if (toolbar_cookie) {
      try {
        that.state = jquery_js_exposed_default.a.extend({}, that.state, jquery_js_exposed_default.a.parseJSON(toolbar_cookie));
      } catch (e) {// ignore
      }
    }

    if (that.isDesktop()) {
      that.setupDesktop();

      if (!that.state.left) {
        // in case its top lets just hide what is not needed
        that.hideElements();
      }
    } else {
      that.setupMobile();
    }

    that.$el.addClass("initialized");
    /* folder contents changes the context.
     This is for usability so the menu changes along with
     the folder contents context */

    jquery_js_exposed_default()("body").off("structure-url-changed").on("structure-url-changed", function (e, path) {
      jquery_js_exposed_default.a.ajax({
        url: jquery_js_exposed_default()("body").attr("data-portal-url") + path + "/@@render-toolbar"
      }).done(function (data) {
        var $el = jquery_js_exposed_default()(mockup_src_core_utils["a" /* default */].parseBodyTag(data));
        $el = $el.find("#edit-zone").length ? $el.find("#edit-zone") : $el;
        that.$el.replaceWith($el);
        registry["a" /* default */].scan($el);
      });
    });
    jquery_js_exposed_default()(window).on("resize", function () {
      if (that.isDesktop()) {
        that.setupDesktop();

        if (!that.state.left) {
          // in case its top lets just hide what is not needed
          that.hideElements();
        }
      } else {
        that.setupMobile();
      }
    });
  }
}));
// CONCATENATED MODULE: ./node_modules/mockup/src/pat/tree/tree.js
function tree_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function tree_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { tree_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { tree_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }


 // needed for ``await`` support



/* harmony default export */ var tree = (core_base["a" /* default */].extend({
  name: "tree",
  trigger: ".pat-tree",
  parser: "mockup",
  defaults: {
    dragAndDrop: false,
    autoOpen: false,
    selectable: true,
    keyboardSupport: true,
    onLoad: null
  },
  init: function init() {
    var _this = this;

    return tree_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var self, optionKey, def, options;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return __webpack_require__.e(/* import() */ 147).then(__webpack_require__.t.bind(null, 674, 7));

            case 2:
              self = _this;
              /* convert all bool options */

              for (optionKey in self.options) {
                def = self.defaults[optionKey];

                if (def !== undefined && typeof def === "boolean") {
                  self.options[optionKey] = mockup_src_core_utils["a" /* default */].bool(self.options[optionKey]);
                }
              }

              if (self.options.onCanMoveTo === undefined) {
                self.options.onCanMoveTo = function (moved, target, position) {
                  /* if not using folder option, just allow, otherwise, only allow if folder */
                  if (position === "inside") {
                    return target.folder === undefined || target.folder === true;
                  }

                  return true;
                };
              }

              if (self.options.data && typeof self.options.data === "string") {
                self.options.data = jquery_js_exposed_default.a.parseJSON(self.options.data);
              }

              if (self.options.onLoad !== null) {
                // delay generating tree...
                options = jquery_js_exposed_default.a.extend({}, self.options);
                jquery_js_exposed_default.a.getJSON(options.dataUrl, function (data) {
                  options.data = data;
                  delete options.dataUrl;
                  self.tree = self.$el.tree(options);
                  self.options.onLoad(self);
                }).fail(function (response) {
                  console.log("failed to load json data");
                });
              } else {
                self.tree = self.$el.tree(self.options);
              }

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  }
}));
// EXTERNAL MODULE: ./node_modules/mockup/src/pat/upload/upload.js + 2 modules
var upload_upload = __webpack_require__(214);

// CONCATENATED MODULE: ./node_modules/mockup/src/patterns.js
/* Patterns bundle configuration.
 * All imports here will go into the compiled bundle.
 */
// Import base
 // first import
// Core


 // Patternslib patterns





 // Import all used patterns for the bundle to be generated






 //import "./pat/filemanager/filemanager";












 //import "./pat/resourceregistry/resourceregistry";




 //import "./pat/thememapper/thememapper";




 // REMOVE obsolete patterns
//import "./pat/pickadate/pickadate";
//import "./pat/tinymce/tinymce";
//import "./pat/texteditor/texteditor";
// Import pattern styles in JavaScript

window.__patternslib_import_styles = true; // Register jQuery globally

window.jQuery = jquery_js_exposed_default.a; // Change default value for pat-tooltip trigger

tooltip["b" /* parser */].parameters.trigger.value = "hover";
registry["a" /* default */].init();

/***/ }),

/***/ 59:
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ 6:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return VERSION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return root; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ArrayProto; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return ObjProto; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return SymbolProto; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return push; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return slice; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return toString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return hasOwnProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return supportsArrayBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return supportsDataView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return nativeIsArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return nativeKeys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return nativeCreate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return nativeIsView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return _isNaN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return _isFinite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return hasEnumBug; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return nonEnumerableProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return MAX_ARRAY_INDEX; });
// Current version.
var VERSION = '1.12.0';

// Establish the root object, `window` (`self`) in the browser, `global`
// on the server, or `this` in some virtual machines. We use `self`
// instead of `window` for `WebWorker` support.
var root = typeof self == 'object' && self.self === self && self ||
          typeof global == 'object' && global.global === global && global ||
          Function('return this')() ||
          {};

// Save bytes in the minified (but not gzipped) version:
var ArrayProto = Array.prototype, ObjProto = Object.prototype;
var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

// Create quick reference variables for speed access to core prototypes.
var push = ArrayProto.push,
    slice = ArrayProto.slice,
    toString = ObjProto.toString,
    hasOwnProperty = ObjProto.hasOwnProperty;

// Modern feature detection.
var supportsArrayBuffer = typeof ArrayBuffer !== 'undefined',
    supportsDataView = typeof DataView !== 'undefined';

// All **ECMAScript 5+** native function implementations that we hope to use
// are declared here.
var nativeIsArray = Array.isArray,
    nativeKeys = Object.keys,
    nativeCreate = Object.create,
    nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;

// Create references to these builtin functions because we override them.
var _isNaN = isNaN,
    _isFinite = isFinite;

// Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
  'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

// The largest integer that can be represented exactly.
var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(59)))

/***/ }),

/***/ 62:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "b", function() { return /* binding */ popperGenerator; });
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ createPopper_createPopper; });

// UNUSED EXPORTS: detectOverflow

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
var getBoundingClientRect = __webpack_require__(64);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
var getWindowScroll = __webpack_require__(92);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindow.js
var getWindow = __webpack_require__(26);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
var instanceOf = __webpack_require__(18);

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}
// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js




function getNodeScroll(node) {
  if (node === Object(getWindow["a" /* default */])(node) || !Object(instanceOf["b" /* isHTMLElement */])(node)) {
    return Object(getWindowScroll["a" /* default */])(node);
  } else {
    return getHTMLElementScroll(node);
  }
}
// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
var getNodeName = __webpack_require__(31);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
var getWindowScrollBarX = __webpack_require__(91);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
var getDocumentElement = __webpack_require__(27);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
var isScrollParent = __webpack_require__(93);

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js






 // Returns the composite rect of an element relative to its offsetParent.
// Composite means it takes into account transforms as well as layout.

function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }

  var documentElement = Object(getDocumentElement["a" /* default */])(offsetParent);
  var rect = Object(getBoundingClientRect["a" /* default */])(elementOrVirtualElement);
  var isOffsetParentAnElement = Object(instanceOf["b" /* isHTMLElement */])(offsetParent);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };

  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (Object(getNodeName["a" /* default */])(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
    Object(isScrollParent["a" /* default */])(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }

    if (Object(instanceOf["b" /* isHTMLElement */])(offsetParent)) {
      offsets = Object(getBoundingClientRect["a" /* default */])(offsetParent);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = Object(getWindowScrollBarX["a" /* default */])(documentElement);
    }
  }

  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
var getLayoutRect = __webpack_require__(90);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js + 1 modules
var listScrollParents = __webpack_require__(95);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js + 1 modules
var getOffsetParent = __webpack_require__(58);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/enums.js
var enums = __webpack_require__(4);

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/orderModifiers.js
 // source: https://stackoverflow.com/questions/49875255

function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function (modifier) {
    map.set(modifier.name, modifier);
  }); // On visiting object, check for its dependencies and visit them recursively

  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function (dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);

        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }

  modifiers.forEach(function (modifier) {
    if (!visited.has(modifier.name)) {
      // check for visited object
      sort(modifier);
    }
  });
  return result;
}

function orderModifiers(modifiers) {
  // order based on dependencies
  var orderedModifiers = order(modifiers); // order based on phase

  return enums["n" /* modifierPhases */].reduce(function (acc, phase) {
    return acc.concat(orderedModifiers.filter(function (modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}
// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn) {
  var pending;
  return function () {
    if (!pending) {
      pending = new Promise(function (resolve) {
        Promise.resolve().then(function () {
          pending = undefined;
          resolve(fn());
        });
      });
    }

    return pending;
  };
}
// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function (merged, current) {
    var existing = merged[current.name];
    merged[current.name] = existing ? Object.assign(Object.assign(Object.assign({}, existing), current), {}, {
      options: Object.assign(Object.assign({}, existing.options), current.options),
      data: Object.assign(Object.assign({}, existing.data), current.data)
    }) : current;
    return merged;
  }, {}); // IE11 does not support Object.values

  return Object.keys(merged).map(function (key) {
    return merged[key];
  });
}
// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/createPopper.js














var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
var DEFAULT_OPTIONS = {
  placement: 'bottom',
  modifiers: [],
  strategy: 'absolute'
};

function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return !args.some(function (element) {
    return !(element && typeof element.getBoundingClientRect === 'function');
  });
}

function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }

  var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper(reference, popper, options) {
    if (options === void 0) {
      options = defaultOptions;
    }

    var state = {
      placement: 'bottom',
      orderedModifiers: [],
      options: Object.assign(Object.assign({}, DEFAULT_OPTIONS), defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference,
        popper: popper
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state: state,
      setOptions: function setOptions(options) {
        cleanupModifierEffects();
        state.options = Object.assign(Object.assign(Object.assign({}, defaultOptions), state.options), options);
        state.scrollParents = {
          reference: Object(instanceOf["a" /* isElement */])(reference) ? Object(listScrollParents["a" /* default */])(reference) : reference.contextElement ? Object(listScrollParents["a" /* default */])(reference.contextElement) : [],
          popper: Object(listScrollParents["a" /* default */])(popper)
        }; // Orders the modifiers based on their dependencies and `phase`
        // properties

        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

        state.orderedModifiers = orderedModifiers.filter(function (m) {
          return m.enabled;
        }); // Validate the provided modifiers so that the consumer will get warned
        // if one of the modifiers is invalid for any reason

        if (false) { var _getComputedStyle, marginTop, marginRight, marginBottom, marginLeft, flipModifier, modifiers; }

        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }

        var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
        // anymore

        if (!areValidElements(reference, popper)) {
          if (false) {}

          return;
        } // Store the reference and popper rects to be read by modifiers


        state.rects = {
          reference: getCompositeRect(reference, Object(getOffsetParent["a" /* default */])(popper), state.options.strategy === 'fixed'),
          popper: Object(getLayoutRect["a" /* default */])(popper)
        }; // Modifiers have the ability to reset the current update cycle. The
        // most common use case for this is the `flip` modifier changing the
        // placement, which then needs to re-run all the modifiers, because the
        // logic was previously ran for the previous placement and is therefore
        // stale/incorrect

        state.reset = false;
        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
        // is filled with the initial data specified by the modifier. This means
        // it doesn't persist and is fresh on each update.
        // To ensure persistent data, use `${name}#persistent`

        state.orderedModifiers.forEach(function (modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;

        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (false) {}

          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }

          var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name;

          if (typeof fn === 'function') {
            state = fn({
              state: state,
              options: _options,
              name: name,
              instance: instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function () {
        return new Promise(function (resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };

    if (!areValidElements(reference, popper)) {
      if (false) {}

      return instance;
    }

    instance.setOptions(options).then(function (state) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state);
      }
    }); // Modifiers have the ability to execute arbitrary code before the first
    // update cycle runs. They will be executed in the same order as the update
    // cycle. This is useful when a modifier adds some persistent data that
    // other modifiers need to use, but the modifier is run after the dependent
    // one.

    function runModifierEffects() {
      state.orderedModifiers.forEach(function (_ref3) {
        var name = _ref3.name,
            _ref3$options = _ref3.options,
            options = _ref3$options === void 0 ? {} : _ref3$options,
            effect = _ref3.effect;

        if (typeof effect === 'function') {
          var cleanupFn = effect({
            state: state,
            name: name,
            instance: instance,
            options: options
          });

          var noopFn = function noopFn() {};

          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }

    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function (fn) {
        return fn();
      });
      effectCleanupFns = [];
    }

    return instance;
  };
}
var createPopper_createPopper = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ 63:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getVariation; });
function getVariation(placement) {
  return placement.split('-')[1];
}

/***/ }),

/***/ 64:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getBoundingClientRect; });
function getBoundingClientRect(element) {
  var rect = element.getBoundingClientRect();
  return {
    width: rect.width,
    height: rect.height,
    top: rect.top,
    right: rect.right,
    bottom: rect.bottom,
    left: rect.left,
    x: rect.left,
    y: rect.top
  };
}

/***/ }),

/***/ 65:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-beta2): dom/data.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const mapData = (() => {
  const storeData = {}
  let id = 1
  return {
    set(element, key, data) {
      if (typeof element.bsKey === 'undefined') {
        element.bsKey = {
          key,
          id
        }
        id++
      }

      storeData[element.bsKey.id] = data
    },
    get(element, key) {
      if (!element || typeof element.bsKey === 'undefined') {
        return null
      }

      const keyProperties = element.bsKey
      if (keyProperties.key === key) {
        return storeData[keyProperties.id]
      }

      return null
    },
    delete(element, key) {
      if (typeof element.bsKey === 'undefined') {
        return
      }

      const keyProperties = element.bsKey
      if (keyProperties.key === key) {
        delete storeData[keyProperties.id]
        delete element.bsKey
      }
    }
  }
})()

const Data = {
  setData(instance, key, data) {
    mapData.set(instance, key, data)
  },
  getData(instance, key) {
    return mapData.get(instance, key)
  },
  removeData(instance, key) {
    mapData.delete(instance, key)
  }
}

/* harmony default export */ __webpack_exports__["a"] = (Data);


/***/ }),

/***/ 72:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getParentNode; });
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(31);
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(27);


function getParentNode(element) {
  if (Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(element) === 'html') {
    return element;
  }

  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || // DOM Element detected
    // $FlowFixMe[incompatible-return]: need a better way to handle this...
    element.host || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    Object(_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(element) // fallback

  );
}

/***/ }),

/***/ 78:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(32);



/* harmony default export */ __webpack_exports__["a"] = (_base__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].extend({
  id: "",
  items: [],
  itemContainer: null,
  isOffsetParent: true,
  idPrefix: "container-",
  render: function render() {
    if (this.options.id) {
      this.$el.attr("id", this.idPrefix + this.options.id);
    }

    this.applyTemplate();
    this.renderItems();
    this.bindEvents();

    if (this.isOffsetParent) {
      this.$el.addClass("ui-offset-parent");
    }

    this.trigger("render", this);
    this.afterRender();
    this.$el.data("component", this);
    return this;
  },
  renderItems: function renderItems() {
    var $container;

    if (this.itemContainer !== null) {
      $container = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this.itemContainer, this.$el);

      if ($container.length === 0) {
        throw "Item Container element not found.";
      }
    } else {
      $container = this.$el;
    }

    underscore__WEBPACK_IMPORTED_MODULE_1__["default"].each(this.items, function (view) {
      if (view.appendInContainer === true) {
        $container.append(view.render().$el);
      } else {
        view.render();
      }
    }, this);
  },
  bindEvents: function bindEvents() {
    var self = this;

    underscore__WEBPACK_IMPORTED_MODULE_1__["default"].each(this.items, function (view) {
      view.on("all", function () {
        var slice = [].slice;
        var eventName = arguments[0];
        var eventTarget;
        var newName = self.id !== "" ? self.id + "." + eventName : eventName;

        if (arguments.length > 1) {
          eventTarget = arguments[1];
        }

        if (newName !== eventName) {
          var newArgs = slice.call(arguments, 0);
          newArgs[0] = newName;
          self.trigger.apply(self, newArgs);
        }

        if (eventTarget !== undefined && eventTarget.isUIView === true) {
          if (eventTarget.propagateEvent(eventName) === true) {
            self.trigger.apply(self, arguments);
          }
        }
      });
    });
  },
  get: function get(id) {
    // Remove the recursive part because it was confusing if two children had the
    // same id
    return underscore__WEBPACK_IMPORTED_MODULE_1__["default"].findWhere(this.items, {
      id: id
    });
  },
  add: function add(item) {
    if (item.id !== undefined && this.get(item.id)) {
      throw "Another item with the same `id` already exists.";
    }

    this.items.push(item);
  }
}));

/***/ }),

/***/ 79:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var require;//! moment.js
//! version : 2.29.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
     true ? module.exports = factory() :
    undefined
}(this, (function () { 'use strict';

    var hookCallback;

    function hooks() {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return (
            input instanceof Array ||
            Object.prototype.toString.call(input) === '[object Array]'
        );
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return (
            input != null &&
            Object.prototype.toString.call(input) === '[object Object]'
        );
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return Object.getOwnPropertyNames(obj).length === 0;
        } else {
            var k;
            for (k in obj) {
                if (hasOwnProp(obj, k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return (
            typeof input === 'number' ||
            Object.prototype.toString.call(input) === '[object Number]'
        );
    }

    function isDate(input) {
        return (
            input instanceof Date ||
            Object.prototype.toString.call(input) === '[object Date]'
        );
    }

    function map(arr, fn) {
        var res = [],
            i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidEra: null,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            era: null,
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false,
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this),
                len = t.length >>> 0,
                i;

            for (i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m),
                parsedParts = some.call(flags.parsedDateParts, function (i) {
                    return i != null;
                }),
                isNowValid =
                    !isNaN(m._d.getTime()) &&
                    flags.overflow < 0 &&
                    !flags.empty &&
                    !flags.invalidEra &&
                    !flags.invalidMonth &&
                    !flags.invalidWeekday &&
                    !flags.weekdayMismatch &&
                    !flags.nullInput &&
                    !flags.invalidFormat &&
                    !flags.userInvalidated &&
                    (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid =
                    isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = (hooks.momentProperties = []),
        updateInProgress = false;

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment(obj) {
        return (
            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
        );
    }

    function warn(msg) {
        if (
            hooks.suppressDeprecationWarnings === false &&
            typeof console !== 'undefined' &&
            console.warn
        ) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [],
                    arg,
                    i,
                    key;
                for (i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (key in arguments[0]) {
                            if (hasOwnProp(arguments[0], key)) {
                                arg += key + ': ' + arguments[0][key] + ', ';
                            }
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(
                    msg +
                        '\nArguments: ' +
                        Array.prototype.slice.call(args).join('') +
                        '\n' +
                        new Error().stack
                );
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return (
            (typeof Function !== 'undefined' && input instanceof Function) ||
            Object.prototype.toString.call(input) === '[object Function]'
        );
    }

    function set(config) {
        var prop, i;
        for (i in config) {
            if (hasOwnProp(config, i)) {
                prop = config[i];
                if (isFunction(prop)) {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' +
                /\d{1,2}/.source
        );
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
            prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (
                hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])
            ) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i,
                res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
    };

    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (
            (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
            absNumber
        );
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
        formatFunctions = {},
        formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(
                    func.apply(this, arguments),
                    token
                );
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i,
            length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '',
                i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i])
                    ? array[i].call(mom, format)
                    : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] =
            formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(
                localFormattingTokens,
                replaceLongDateFormatTokens
            );
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A',
    };

    function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper
            .match(formattingTokens)
            .map(function (tok) {
                if (
                    tok === 'MMMM' ||
                    tok === 'MM' ||
                    tok === 'DD' ||
                    tok === 'dddd'
                ) {
                    return tok.slice(1);
                }
                return tok;
            })
            .join('');

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate() {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d',
        defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        w: 'a week',
        ww: '%d weeks',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
    };

    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output)
            ? output(number, withoutSuffix, string, isFuture)
            : output.replace(/%d/i, number);
    }

    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string'
            ? aliases[units] || aliases[units.toLowerCase()]
            : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [],
            u;
        for (u in unitsObj) {
            if (hasOwnProp(unitsObj, u)) {
                units.push({ unit: u, priority: priorities[u] });
            }
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function absFloor(number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get(mom, unit) {
        return mom.isValid()
            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
            : NaN;
    }

    function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (
                unit === 'FullYear' &&
                isLeapYear(mom.year()) &&
                mom.month() === 1 &&
                mom.date() === 29
            ) {
                value = toInt(value);
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
                    value,
                    mom.month(),
                    daysInMonth(value, mom.month())
                );
            } else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }

    function stringSet(units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units),
                i;
            for (i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    var match1 = /\d/, //       0 - 9
        match2 = /\d\d/, //      00 - 99
        match3 = /\d{3}/, //     000 - 999
        match4 = /\d{4}/, //    0000 - 9999
        match6 = /[+-]?\d{6}/, // -999999 - 999999
        match1to2 = /\d\d?/, //       0 - 99
        match3to4 = /\d\d\d\d?/, //     999 - 9999
        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
        match1to3 = /\d{1,3}/, //       0 - 999
        match1to4 = /\d{1,4}/, //       0 - 9999
        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
        matchUnsigned = /\d+/, //       0 - inf
        matchSigned = /[+-]?\d+/, //    -inf - inf
        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
        // any word (or two) characters or numbers including two/three word month in arabic.
        // includes scottish gaelic two word and hyphenated months
        matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
        regexes;

    regexes = {};

    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex)
            ? regex
            : function (isStrict, localeData) {
                  return isStrict && strictRegex ? strictRegex : regex;
              };
    }

    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(
            s
                .replace('\\', '')
                .replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (
                    matched,
                    p1,
                    p2,
                    p3,
                    p4
                ) {
                    return p1 || p2 || p3 || p4;
                })
        );
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken(token, callback) {
        var i,
            func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,
        WEEK = 7,
        WEEKDAY = 8;

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1
            ? isLeapYear(year)
                ? 29
                : 28
            : 31 - ((modMonth % 7) % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(
            '_'
        ),
        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
        defaultMonthsShortRegex = matchWord,
        defaultMonthsRegex = matchWord;

    function localeMonths(m, format) {
        if (!m) {
            return isArray(this._months)
                ? this._months
                : this._months['standalone'];
        }
        return isArray(this._months)
            ? this._months[m.month()]
            : this._months[
                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                      ? 'format'
                      : 'standalone'
              ][m.month()];
    }

    function localeMonthsShort(m, format) {
        if (!m) {
            return isArray(this._monthsShort)
                ? this._monthsShort
                : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort)
            ? this._monthsShort[m.month()]
            : this._monthsShort[
                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
              ][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i,
            ii,
            mom,
            llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp(
                    '^' + this.months(mom, '').replace('.', '') + '$',
                    'i'
                );
                this._shortMonthsParse[i] = new RegExp(
                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                    'i'
                );
            }
            if (!strict && !this._monthsParse[i]) {
                regex =
                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'MMMM' &&
                this._longMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'MMM' &&
                this._shortMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }

    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict
                ? this._monthsShortStrictRegex
                : this._monthsShortRegex;
        }
    }

    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict
                ? this._monthsStrictRegex
                : this._monthsRegex;
        }
    }

    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._monthsShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] =
            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear() {
        return isLeapYear(this.year());
    }

    function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate(y) {
        var date, args;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear,
            resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear,
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek,
            resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear,
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (
        input,
        week,
        config,
        token
    ) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow: 0, // Sunday is the first day of the week.
        doy: 6, // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek() {
        return this._week.dow;
    }

    function localeFirstDayOfYear() {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        defaultWeekdaysRegex = matchWord,
        defaultWeekdaysShortRegex = matchWord,
        defaultWeekdaysMinRegex = matchWord;

    function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays)
            ? this._weekdays
            : this._weekdays[
                  m && m !== true && this._weekdays.isFormat.test(format)
                      ? 'format'
                      : 'standalone'
              ];
        return m === true
            ? shiftWeekdays(weekdays, this._week.dow)
            : m
            ? weekdays[m.day()]
            : weekdays;
    }

    function localeWeekdaysShort(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : m
            ? this._weekdaysShort[m.day()]
            : this._weekdaysShort;
    }

    function localeWeekdaysMin(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : m
            ? this._weekdaysMin[m.day()]
            : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i,
            ii,
            mom,
            llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._shortWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._minWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
            }
            if (!this._weekdaysParse[i]) {
                regex =
                    '^' +
                    this.weekdays(mom, '') +
                    '|^' +
                    this.weekdaysShort(mom, '') +
                    '|^' +
                    this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'dddd' &&
                this._fullWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'ddd' &&
                this._shortWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'dd' &&
                this._minWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict
                ? this._weekdaysStrictRegex
                : this._weekdaysRegex;
        }
    }

    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict
                ? this._weekdaysShortStrictRegex
                : this._weekdaysShortRegex;
        }
    }

    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict
                ? this._weekdaysMinStrictRegex
                : this._weekdaysMinRegex;
        }
    }

    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [],
            shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom,
            minp,
            shortp,
            longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = regexEscape(this.weekdaysMin(mom, ''));
            shortp = regexEscape(this.weekdaysShort(mom, ''));
            longp = regexEscape(this.weekdays(mom, ''));
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._weekdaysShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
        this._weekdaysMinStrictRegex = new RegExp(
            '^(' + minPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return (
            '' +
            hFormat.apply(this) +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return (
            '' +
            this.hours() +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(
                this.hours(),
                this.minutes(),
                lowercase
            );
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('k', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
        // Setting the hour should keep the time, because the user explicitly
        // specified which hour they want. So trying to maintain the same hour (in
        // a new timezone) makes sense. Adding/subtracting hours does not follow
        // this rule.
        getSetHour = makeGetSet('Hours', true);

    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse,
    };

    // internal storage for locale config files
    var locales = {},
        localeFamilies = {},
        globalLocale;

    function commonPrefix(arr1, arr2) {
        var i,
            minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
            if (arr1[i] !== arr2[i]) {
                return i;
            }
        }
        return minl;
    }

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0,
            j,
            next,
            locale,
            split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (
                    next &&
                    next.length >= j &&
                    commonPrefix(split, next) >= j - 1
                ) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function loadLocale(name) {
        var oldLocale = null,
            aliasedRequire;
        // TODO: Find a better way to register and load all the locales in Node
        if (
            locales[name] === undefined &&
            typeof module !== 'undefined' &&
            module &&
            module.exports
        ) {
            try {
                oldLocale = globalLocale._abbr;
                aliasedRequire = require;
                !(function webpackMissingModule() { var e = new Error("Cannot find module 'undefined'"); e.code = 'MODULE_NOT_FOUND'; throw e; }());
                getSetGlobalLocale(oldLocale);
            } catch (e) {
                // mark as not found to avoid repeating expensive file require call causing high CPU
                // when trying to find en-US, en_US, en-us for every format call
                locales[name] = null; // null means not found
            }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            } else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            } else {
                if (typeof console !== 'undefined' && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn(
                        'Locale ' + key + ' not found. Did you forget to load it?'
                    );
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale(name, config) {
        if (config !== null) {
            var locale,
                parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple(
                    'defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
                );
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config,
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale,
                tmpLocale,
                parentConfig = baseConfig;

            if (locales[name] != null && locales[name].parentLocale != null) {
                // Update existing child locale in-place to avoid memory-leaks
                locales[name].set(mergeConfigs(locales[name]._config, config));
            } else {
                // MERGE
                tmpLocale = loadLocale(name);
                if (tmpLocale != null) {
                    parentConfig = tmpLocale._config;
                }
                config = mergeConfigs(parentConfig, config);
                if (tmpLocale == null) {
                    // updateLocale is called for creating a new locale
                    // Set abbr so it will have a name (getters return
                    // undefined otherwise).
                    config.abbr = name;
                }
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;
            }

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                    if (name === getSetGlobalLocale()) {
                        getSetGlobalLocale(name);
                    }
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow(m) {
        var overflow,
            a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH] < 0 || a[MONTH] > 11
                    ? MONTH
                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                    ? DATE
                    : a[HOUR] < 0 ||
                      a[HOUR] > 24 ||
                      (a[HOUR] === 24 &&
                          (a[MINUTE] !== 0 ||
                              a[SECOND] !== 0 ||
                              a[MILLISECOND] !== 0))
                    ? HOUR
                    : a[MINUTE] < 0 || a[MINUTE] > 59
                    ? MINUTE
                    : a[SECOND] < 0 || a[SECOND] > 59
                    ? SECOND
                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                    ? MILLISECOND
                    : -1;

            if (
                getParsingFlags(m)._overflowDayOfYear &&
                (overflow < YEAR || overflow > DATE)
            ) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
            ['YYYY-DDD', /\d{4}-\d{3}/],
            ['YYYY-MM', /\d{4}-\d\d/, false],
            ['YYYYYYMMDD', /[+-]\d{10}/],
            ['YYYYMMDD', /\d{8}/],
            ['GGGG[W]WWE', /\d{4}W\d{3}/],
            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
            ['YYYYDDD', /\d{7}/],
            ['YYYYMM', /\d{6}/, false],
            ['YYYY', /\d{4}/, false],
        ],
        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
            ['HH:mm', /\d\d:\d\d/],
            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
            ['HHmmss', /\d\d\d\d\d\d/],
            ['HHmm', /\d\d\d\d/],
            ['HH', /\d\d/],
        ],
        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
        rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
        obsOffsets = {
            UT: 0,
            GMT: 0,
            EDT: -4 * 60,
            EST: -5 * 60,
            CDT: -5 * 60,
            CST: -6 * 60,
            MDT: -6 * 60,
            MST: -7 * 60,
            PDT: -7 * 60,
            PST: -8 * 60,
        };

    // date from iso format
    function configFromISO(config) {
        var i,
            l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime,
            dateFormat,
            timeFormat,
            tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    function extractFromRFC2822Strings(
        yearStr,
        monthStr,
        dayStr,
        hourStr,
        minuteStr,
        secondStr
    ) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10),
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s
            .replace(/\([^)]*\)|[\n\t]/g, ' ')
            .replace(/(\s\s+)/g, ' ')
            .replace(/^\s\s*/, '')
            .replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(
                    parsedInput[0],
                    parsedInput[1],
                    parsedInput[2]
                ).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10),
                m = hm % 100,
                h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)),
            parsedArray;
        if (match) {
            parsedArray = extractFromRFC2822Strings(
                match[4],
                match[3],
                match[2],
                match[5],
                match[6],
                match[7]
            );
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        if (config._strict) {
            config._isValid = false;
        } else {
            // Final attempt, use Input Fallback
            hooks.createFromInputFallback(config);
        }
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [
                nowValue.getUTCFullYear(),
                nowValue.getUTCMonth(),
                nowValue.getUTCDate(),
            ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
        var i,
            date,
            input = [],
            currentDate,
            expectedWeekday,
            yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (
                config._dayOfYear > daysInYear(yearToUse) ||
                config._dayOfYear === 0
            ) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] =
                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (
            config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0
        ) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(
            null,
            input
        );
        expectedWeekday = config._useUTC
            ? config._d.getUTCDay()
            : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (
            config._w &&
            typeof config._w.d !== 'undefined' &&
            config._w.d !== expectedWeekday
        ) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(
                w.GG,
                config._a[YEAR],
                weekOfYear(createLocal(), 1, 4).year
            );
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i,
            parsedInput,
            tokens,
            token,
            skipped,
            stringLength = string.length,
            totalParsedInputLength = 0,
            era;

        tokens =
            expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
                [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(
                    string.indexOf(parsedInput) + parsedInput.length
                );
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver =
            stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (
            config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0
        ) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(
            config._locale,
            config._a[HOUR],
            config._meridiem
        );

        // handle era
        era = getParsingFlags(config).era;
        if (era !== null) {
            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }

        configFromArray(config);
        checkOverflow(config);
    }

    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,
            scoreToBeat,
            i,
            currentScore,
            validFormatFound,
            bestFormatIsValid = false;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            validFormatFound = false;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (isValid(tempConfig)) {
                validFormatFound = true;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (!bestFormatIsValid) {
                if (
                    scoreToBeat == null ||
                    currentScore < scoreToBeat ||
                    validFormatFound
                ) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                    if (validFormatFound) {
                        bestFormatIsValid = true;
                    }
                }
            } else {
                if (currentScore < scoreToBeat) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                }
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i),
            dayOrDate = i.day === undefined ? i.date : i.day;
        config._a = map(
            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
            function (obj) {
                return obj && parseInt(obj, 10);
            }
        );

        configFromArray(config);
    }

    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({ nullInput: true });
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (format === true || format === false) {
            strict = format;
            format = undefined;
        }

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if (
            (isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)
        ) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other < this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        ),
        prototypeMax = deprecate(
            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other > this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +new Date();
    };

    var ordering = [
        'year',
        'quarter',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second',
        'millisecond',
    ];

    function isDurationValid(m) {
        var key,
            unitHasDecimal = false,
            i;
        for (key in m) {
            if (
                hasOwnProp(m, key) &&
                !(
                    indexOf.call(ordering, key) !== -1 &&
                    (m[key] == null || !isNaN(m[key]))
                )
            ) {
                return false;
            }
        }

        for (i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds =
            +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration(obj) {
        return obj instanceof Duration;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if (
                (dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
            ) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    // FORMATTING

    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset(),
                sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return (
                sign +
                zeroFill(~~(offset / 60), 2) +
                separator +
                zeroFill(~~offset % 60, 2)
            );
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher),
            chunk,
            parts,
            minutes;

        if (matches === null) {
            return null;
        }

        chunk = matches[matches.length - 1] || [];
        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff =
                (isMoment(input) || isDate(input)
                    ? input.valueOf()
                    : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset());
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(
                        this,
                        createDuration(input - offset, 'm'),
                        1,
                        false
                    );
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset() {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            } else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime() {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {},
            other;

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted =
                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        // and further modified to allow for strings containing both week and day
        isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration(input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months,
            };
        } else if (isNumber(input) || !isNaN(+input)) {
            duration = {};
            if (key) {
                duration[key] = +input;
            } else {
                duration.milliseconds = +input;
            }
        } else if ((match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
            };
        } else if ((match = isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign),
            };
        } else if (duration == null) {
            // checks for null or undefined
            duration = {};
        } else if (
            typeof duration === 'object' &&
            ('from' in duration || 'to' in duration)
        ) {
            diffRes = momentsDifference(
                createLocal(duration.from),
                createLocal(duration.to)
            );

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
            ret._isValid = input._isValid;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months =
            other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return { milliseconds: 0, months: 0 };
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(
                    name,
                    'moment().' +
                        name +
                        '(period, number) is deprecated. Please use moment().' +
                        name +
                        '(number, period). ' +
                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
                );
                tmp = val;
                val = period;
                period = tmp;
            }

            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add = createAdder(1, 'add'),
        subtract = createAdder(-1, 'subtract');

    function isString(input) {
        return typeof input === 'string' || input instanceof String;
    }

    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
    function isMomentInput(input) {
        return (
            isMoment(input) ||
            isDate(input) ||
            isString(input) ||
            isNumber(input) ||
            isNumberOrStringArray(input) ||
            isMomentInputObject(input) ||
            input === null ||
            input === undefined
        );
    }

    function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'years',
                'year',
                'y',
                'months',
                'month',
                'M',
                'days',
                'day',
                'd',
                'dates',
                'date',
                'D',
                'hours',
                'hour',
                'h',
                'minutes',
                'minute',
                'm',
                'seconds',
                'second',
                's',
                'milliseconds',
                'millisecond',
                'ms',
            ],
            i,
            property;

        for (i = 0; i < properties.length; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function isNumberOrStringArray(input) {
        var arrayTest = isArray(input),
            dataTypeTest = false;
        if (arrayTest) {
            dataTypeTest =
                input.filter(function (item) {
                    return !isNumber(item) && isString(input);
                }).length === 0;
        }
        return arrayTest && dataTypeTest;
    }

    function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'sameDay',
                'nextDay',
                'lastDay',
                'nextWeek',
                'lastWeek',
                'sameElse',
            ],
            i,
            property;

        for (i = 0; i < properties.length; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6
            ? 'sameElse'
            : diff < -1
            ? 'lastWeek'
            : diff < 0
            ? 'lastDay'
            : diff < 1
            ? 'sameDay'
            : diff < 2
            ? 'nextDay'
            : diff < 7
            ? 'nextWeek'
            : 'sameElse';
    }

    function calendar$1(time, formats) {
        // Support for single parameter, formats only overload to the calendar function
        if (arguments.length === 1) {
            if (!arguments[0]) {
                time = undefined;
                formats = undefined;
            } else if (isMomentInput(arguments[0])) {
                time = arguments[0];
                formats = undefined;
            } else if (isCalendarSpec(arguments[0])) {
                formats = arguments[0];
                time = undefined;
            }
        }
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse',
            output =
                formats &&
                (isFunction(formats[format])
                    ? formats[format].call(this, now)
                    : formats[format]);

        return this.format(
            output || this.localeData().calendar(format, this, createLocal(now))
        );
    }

    function clone() {
        return new Moment(this);
    }

    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (
            (inclusivity[0] === '('
                ? this.isAfter(localFrom, units)
                : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')'
                ? this.isBefore(localTo, units)
                : !this.isAfter(localTo, units))
        );
    }

    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return (
                this.clone().startOf(units).valueOf() <= inputMs &&
                inputMs <= this.clone().endOf(units).valueOf()
            );
        }
    }

    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff(input, units, asFloat) {
        var that, zoneDelta, output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year':
                output = monthDiff(this, that) / 12;
                break;
            case 'month':
                output = monthDiff(this, that);
                break;
            case 'quarter':
                output = monthDiff(this, that) / 3;
                break;
            case 'second':
                output = (this - that) / 1e3;
                break; // 1000
            case 'minute':
                output = (this - that) / 6e4;
                break; // 1000 * 60
            case 'hour':
                output = (this - that) / 36e5;
                break; // 1000 * 60 * 60
            case 'day':
                output = (this - that - zoneDelta) / 864e5;
                break; // 1000 * 60 * 60 * 24, negate dst
            case 'week':
                output = (this - that - zoneDelta) / 6048e5;
                break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default:
                output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff(a, b) {
        if (a.date() < b.date()) {
            // end-of-month calculations work correct when the start month has more
            // days than the end month.
            return -monthDiff(b, a);
        }
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2,
            adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true,
            m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(
                m,
                utc
                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
            );
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                    .toISOString()
                    .replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(
            m,
            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
        );
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect() {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment',
            zone = '',
            prefix,
            year,
            datetime,
            suffix;
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        prefix = '[' + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        datetime = '-MM-DD[T]HH:mm:ss.SSS';
        suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format(inputString) {
        if (!inputString) {
            inputString = this.isUtc()
                ? hooks.defaultFormatUtc
                : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ to: this, from: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ from: this, to: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData() {
        return this._locale;
    }

    var MS_PER_SECOND = 1000,
        MS_PER_MINUTE = 60 * MS_PER_SECOND,
        MS_PER_HOUR = 60 * MS_PER_MINUTE,
        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return ((dividend % divisor) + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(
                    this.year(),
                    this.month() - (this.month() % 3),
                    1
                );
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - this.weekday()
                );
                break;
            case 'isoWeek':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - (this.isoWeekday() - 1)
                );
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(
                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                    MS_PER_HOUR
                );
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time =
                    startOfDate(
                        this.year(),
                        this.month() - (this.month() % 3) + 3,
                        1
                    ) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - this.weekday() + 7
                    ) - 1;
                break;
            case 'isoWeek':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - (this.isoWeekday() - 1) + 7
                    ) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time +=
                    MS_PER_HOUR -
                    mod$1(
                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                        MS_PER_HOUR
                    ) -
                    1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }

    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate() {
        return new Date(this.valueOf());
    }

    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond(),
        ];
    }

    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds(),
        };
    }

    function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2() {
        return isValid(this);
    }

    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt() {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict,
        };
    }

    addFormatToken('N', 0, 0, 'eraAbbr');
    addFormatToken('NN', 0, 0, 'eraAbbr');
    addFormatToken('NNN', 0, 0, 'eraAbbr');
    addFormatToken('NNNN', 0, 0, 'eraName');
    addFormatToken('NNNNN', 0, 0, 'eraNarrow');

    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
    addFormatToken('y', ['yy', 2], 0, 'eraYear');
    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

    addRegexToken('N', matchEraAbbr);
    addRegexToken('NN', matchEraAbbr);
    addRegexToken('NNN', matchEraAbbr);
    addRegexToken('NNNN', matchEraName);
    addRegexToken('NNNNN', matchEraNarrow);

    addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (
        input,
        array,
        config,
        token
    ) {
        var era = config._locale.erasParse(input, token, config._strict);
        if (era) {
            getParsingFlags(config).era = era;
        } else {
            getParsingFlags(config).invalidEra = input;
        }
    });

    addRegexToken('y', matchUnsigned);
    addRegexToken('yy', matchUnsigned);
    addRegexToken('yyy', matchUnsigned);
    addRegexToken('yyyy', matchUnsigned);
    addRegexToken('yo', matchEraYearOrdinal);

    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
    addParseToken(['yo'], function (input, array, config, token) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
            match = input.match(config._locale._eraYearOrdinalRegex);
        }

        if (config._locale.eraYearOrdinalParse) {
            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
            array[YEAR] = parseInt(input, 10);
        }
    });

    function localeEras(m, format) {
        var i,
            l,
            date,
            eras = this._eras || getLocale('en')._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
            switch (typeof eras[i].since) {
                case 'string':
                    // truncate time
                    date = hooks(eras[i].since).startOf('day');
                    eras[i].since = date.valueOf();
                    break;
            }

            switch (typeof eras[i].until) {
                case 'undefined':
                    eras[i].until = +Infinity;
                    break;
                case 'string':
                    // truncate time
                    date = hooks(eras[i].until).startOf('day').valueOf();
                    eras[i].until = date.valueOf();
                    break;
            }
        }
        return eras;
    }

    function localeErasParse(eraName, format, strict) {
        var i,
            l,
            eras = this.eras(),
            name,
            abbr,
            narrow;
        eraName = eraName.toUpperCase();

        for (i = 0, l = eras.length; i < l; ++i) {
            name = eras[i].name.toUpperCase();
            abbr = eras[i].abbr.toUpperCase();
            narrow = eras[i].narrow.toUpperCase();

            if (strict) {
                switch (format) {
                    case 'N':
                    case 'NN':
                    case 'NNN':
                        if (abbr === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNN':
                        if (name === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNNN':
                        if (narrow === eraName) {
                            return eras[i];
                        }
                        break;
                }
            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                return eras[i];
            }
        }
    }

    function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? +1 : -1;
        if (year === undefined) {
            return hooks(era.since).year();
        } else {
            return hooks(era.since).year() + (year - era.offset) * dir;
        }
    }

    function getEraName() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].name;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].name;
            }
        }

        return '';
    }

    function getEraNarrow() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].narrow;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].narrow;
            }
        }

        return '';
    }

    function getEraAbbr() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].abbr;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].abbr;
            }
        }

        return '';
    }

    function getEraYear() {
        var i,
            l,
            dir,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            dir = eras[i].since <= eras[i].until ? +1 : -1;

            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (
                (eras[i].since <= val && val <= eras[i].until) ||
                (eras[i].until <= val && val <= eras[i].since)
            ) {
                return (
                    (this.year() - hooks(eras[i].since).year()) * dir +
                    eras[i].offset
                );
            }
        }

        return this.year();
    }

    function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNameRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
    }

    function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, '_erasAbbrRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }

    function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNarrowRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }

    function matchEraAbbr(isStrict, locale) {
        return locale.erasAbbrRegex(isStrict);
    }

    function matchEraName(isStrict, locale) {
        return locale.erasNameRegex(isStrict);
    }

    function matchEraNarrow(isStrict, locale) {
        return locale.erasNarrowRegex(isStrict);
    }

    function matchEraYearOrdinal(isStrict, locale) {
        return locale._eraYearOrdinalRegex || matchUnsigned;
    }

    function computeErasParse() {
        var abbrPieces = [],
            namePieces = [],
            narrowPieces = [],
            mixedPieces = [],
            i,
            l,
            eras = this.eras();

        for (i = 0, l = eras.length; i < l; ++i) {
            namePieces.push(regexEscape(eras[i].name));
            abbrPieces.push(regexEscape(eras[i].abbr));
            narrowPieces.push(regexEscape(eras[i].narrow));

            mixedPieces.push(regexEscape(eras[i].name));
            mixedPieces.push(regexEscape(eras[i].abbr));
            mixedPieces.push(regexEscape(eras[i].narrow));
        }

        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
        this._erasNarrowRegex = new RegExp(
            '^(' + narrowPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);

    // PARSING

    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (
        input,
        week,
        config,
        token
    ) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy
        );
    }

    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.isoWeek(),
            this.isoWeekday(),
            1,
            4
        );
    }

    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }

    function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
    }

    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter(input) {
        return input == null
            ? Math.ceil((this.month() + 1) / 3)
            : this.month((input - 1) * 3 + (this.month() % 3));
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict
            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
            : locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear(input) {
        var dayOfYear =
            Math.round(
                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
            ) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });

    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);

    var token, getSetMillisecond;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }

    getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return 'Moment<' + this.format() + '>';
        };
    }
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
        'dates accessor is deprecated. Use date instead.',
        getSetDayOfMonth
    );
    proto.months = deprecate(
        'months accessor is deprecated. Use month instead',
        getSetMonth
    );
    proto.years = deprecate(
        'years accessor is deprecated. Use year instead',
        getSetYear
    );
    proto.zone = deprecate(
        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
        getSetZone
    );
    proto.isDSTShifted = deprecate(
        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
        isDaylightSavingTimeShifted
    );

    function createUnix(input) {
        return createLocal(input * 1000);
    }

    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat(string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;

    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;

    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1(format, index, field, setter) {
        var locale = getLocale(),
            utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i,
            out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0,
            i,
            out = [];

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        eras: [
            {
                since: '0001-01-01',
                until: +Infinity,
                offset: 1,
                name: 'Anno Domini',
                narrow: 'AD',
                abbr: 'AD',
            },
            {
                since: '0000-12-31',
                until: -Infinity,
                offset: 1,
                name: 'Before Christ',
                narrow: 'BC',
                abbr: 'BC',
            },
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    toInt((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    // Side effect imports

    hooks.lang = deprecate(
        'moment.lang is deprecated. Use moment.locale instead.',
        getSetGlobalLocale
    );
    hooks.langData = deprecate(
        'moment.langData is deprecated. Use moment.localeData instead.',
        getLocale
    );

    var mathAbs = Math.abs;

    function abs() {
        var data = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);

        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);

        return this;
    }

    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble() {
        var milliseconds = this._milliseconds,
            days = this._days,
            months = this._months,
            data = this._data,
            seconds,
            minutes,
            hours,
            years,
            monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (
            !(
                (milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0)
            )
        ) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;

        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;

        hours = absFloor(minutes / 60);
        data.hours = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days = days;
        data.months = months;
        data.years = years;

        return this;
    }

    function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return (days * 4800) / 146097;
    }

    function monthsToDays(months) {
        // the reverse of daysToMonths
        return (months * 146097) / 4800;
    }

    function as(units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days,
            months,
            milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':
                    return months;
                case 'quarter':
                    return months / 3;
                case 'year':
                    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week':
                    return days / 7 + milliseconds / 6048e5;
                case 'day':
                    return days + milliseconds / 864e5;
                case 'hour':
                    return days * 24 + milliseconds / 36e5;
                case 'minute':
                    return days * 1440 + milliseconds / 6e4;
                case 'second':
                    return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond':
                    return Math.floor(days * 864e5) + milliseconds;
                default:
                    throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1() {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms'),
        asSeconds = makeAs('s'),
        asMinutes = makeAs('m'),
        asHours = makeAs('h'),
        asDays = makeAs('d'),
        asWeeks = makeAs('w'),
        asMonths = makeAs('M'),
        asQuarters = makeAs('Q'),
        asYears = makeAs('y');

    function clone$1() {
        return createDuration(this);
    }

    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds'),
        seconds = makeGetter('seconds'),
        minutes = makeGetter('minutes'),
        hours = makeGetter('hours'),
        days = makeGetter('days'),
        months = makeGetter('months'),
        years = makeGetter('years');

    function weeks() {
        return absFloor(this.days() / 7);
    }

    var round = Math.round,
        thresholds = {
            ss: 44, // a few seconds to seconds
            s: 45, // seconds to minute
            m: 45, // minutes to hour
            h: 22, // hours to day
            d: 26, // days to month/week
            w: null, // weeks to month
            M: 11, // months to year
        };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
        var duration = createDuration(posNegDuration).abs(),
            seconds = round(duration.as('s')),
            minutes = round(duration.as('m')),
            hours = round(duration.as('h')),
            days = round(duration.as('d')),
            months = round(duration.as('M')),
            weeks = round(duration.as('w')),
            years = round(duration.as('y')),
            a =
                (seconds <= thresholds.ss && ['s', seconds]) ||
                (seconds < thresholds.s && ['ss', seconds]) ||
                (minutes <= 1 && ['m']) ||
                (minutes < thresholds.m && ['mm', minutes]) ||
                (hours <= 1 && ['h']) ||
                (hours < thresholds.h && ['hh', hours]) ||
                (days <= 1 && ['d']) ||
                (days < thresholds.d && ['dd', days]);

        if (thresholds.w != null) {
            a =
                a ||
                (weeks <= 1 && ['w']) ||
                (weeks < thresholds.w && ['ww', weeks]);
        }
        a = a ||
            (months <= 1 && ['M']) ||
            (months < thresholds.M && ['MM', months]) ||
            (years <= 1 && ['y']) || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof roundingFunction === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var withSuffix = false,
            th = thresholds,
            locale,
            output;

        if (typeof argWithSuffix === 'object') {
            argThresholds = argWithSuffix;
            argWithSuffix = false;
        }
        if (typeof argWithSuffix === 'boolean') {
            withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === 'object') {
            th = Object.assign({}, thresholds, argThresholds);
            if (argThresholds.s != null && argThresholds.ss == null) {
                th.ss = argThresholds.s - 1;
            }
        }

        locale = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return (x > 0) - (x < 0) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000,
            days = abs$1(this._days),
            months = abs$1(this._months),
            minutes,
            hours,
            years,
            s,
            total = this.asSeconds(),
            totalSign,
            ymSign,
            daysSign,
            hmsSign;

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

        totalSign = total < 0 ? '-' : '';
        ymSign = sign(this._months) !== sign(total) ? '-' : '';
        daysSign = sign(this._days) !== sign(total) ? '-' : '';
        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return (
            totalSign +
            'P' +
            (years ? ymSign + years + 'Y' : '') +
            (months ? ymSign + months + 'M' : '') +
            (days ? daysSign + days + 'D' : '') +
            (hours || minutes || seconds ? 'T' : '') +
            (hours ? hmsSign + hours + 'H' : '') +
            (minutes ? hmsSign + minutes + 'M' : '') +
            (seconds ? hmsSign + s + 'S' : '')
        );
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;

    proto$2.toIsoString = deprecate(
        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
        toISOString$1
    );
    proto$2.lang = lang;

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    //! moment.js

    hooks.version = '2.29.1';

    setHookCallback(createLocal);

    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD', // <input type="date" />
        TIME: 'HH:mm', // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW', // <input type="week" />
        MONTH: 'YYYY-MM', // <input type="month" />
    };

    return hooks;

})));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(215)(module)))

/***/ }),

/***/ 8:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);


var QueryHelper = function QueryHelper(options) {
  /* if pattern argument provided, it can implement the interface of:
   *    - browsing: boolean if currently browsing
   *    - currentPath: string of current path to apply to search if browsing
   *    - basePath: default path to provide if no subpath used
   */
  var self = this;
  var defaults = {
    pattern: null,
    // must be passed in
    vocabularyUrl: null,
    searchParam: "SearchableText",
    // query string param to pass to search url
    pathOperator: "plone.app.querystring.operation.string.path",
    attributes: ["UID", "Title", "Description", "getURL", "portal_type"],
    batchSize: 10,
    // number of results to retrive
    baseCriteria: [],
    sort_on: "is_folderish",
    sort_order: "reverse",
    pathDepth: 1
  };
  self.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, defaults, options);
  self.pattern = self.options.pattern;

  if (self.pattern === undefined || self.pattern === null) {
    self.pattern = {
      browsing: false,
      basePath: "/"
    };
  }

  if (self.options.url && !self.options.vocabularyUrl) {
    self.options.vocabularyUrl = self.options.url;
  } else if (self.pattern.vocabularyUrl) {
    self.options.vocabularyUrl = self.pattern.vocabularyUrl;
  }

  self.valid = Boolean(self.options.vocabularyUrl);

  self.getBatch = function (page) {
    return {
      page: page ? page : 1,
      size: self.options.batchSize
    };
  };

  self.getCurrentPath = function () {
    var pattern = self.pattern;
    var currentPath;
    /* If currentPath is set on the QueryHelper object, use that first.
     * Then, check on the pattern.
     * Finally, see if it is a function and call it if it is.
     */

    if (self.currentPath) {
      currentPath = self.currentPath;
    } else {
      currentPath = pattern.currentPath;
    }

    if (typeof currentPath === "function") {
      currentPath = currentPath();
    }

    var path = currentPath;

    if (!path) {
      if (pattern.basePath) {
        path = pattern.basePath;
      } else if (pattern.options.basePath) {
        path = pattern.options.basePath;
      } else {
        path = "/";
      }
    }

    return path;
  };

  self.getCriterias = function (term, searchOptions) {
    if (searchOptions === undefined) {
      searchOptions = {};
    }

    searchOptions = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, {
      useBaseCriteria: true,
      additionalCriterias: []
    }, searchOptions);
    var criterias = [];

    if (searchOptions.useBaseCriteria) {
      criterias = self.options.baseCriteria.slice(0);
    }

    if (term) {
      term += "*";
      criterias.push({
        i: self.options.searchParam,
        o: "plone.app.querystring.operation.string.contains",
        v: term
      });
    }

    if (searchOptions.searchPath) {
      criterias.push({
        i: "path",
        o: self.options.pathOperator,
        v: searchOptions.searchPath + "::" + self.options.pathDepth
      });
    } else if (self.pattern.browsing) {
      criterias.push({
        i: "path",
        o: self.options.pathOperator,
        v: self.getCurrentPath() + "::" + self.options.pathDepth
      });
    }

    criterias = criterias.concat(searchOptions.additionalCriterias);
    return criterias;
  };

  self.getQueryData = function (term, page) {
    var data = {
      query: JSON.stringify({
        criteria: self.getCriterias(term),
        sort_on: self.options.sort_on,
        sort_order: self.options.sort_order
      }),
      attributes: JSON.stringify(self.options.attributes)
    };

    if (page) {
      data.batch = JSON.stringify(self.getBatch(page));
    }

    return data;
  };

  self.getUrl = function () {
    var url = self.options.vocabularyUrl;

    if (url.indexOf("?") === -1) {
      url += "?";
    } else {
      url += "&";
    }

    return url + jquery__WEBPACK_IMPORTED_MODULE_0___default.a.param(self.getQueryData());
  };

  self.selectAjax = function () {
    return {
      url: self.options.vocabularyUrl,
      dataType: "JSON",
      quietMillis: 100,
      data: function data(term, page) {
        return self.getQueryData(term, page);
      },
      results: function results(data, page) {
        var more = page * 10 < data.total; // whether or not there are more results available
        // notice we return the value of more so Select2 knows if more results can be loaded

        return {
          results: data.results,
          more: more
        };
      }
    };
  };

  self.search = function (term, operation, value, callback, useBaseCriteria, type) {
    if (useBaseCriteria === undefined) {
      useBaseCriteria = true;
    }

    if (type === undefined) {
      type = "GET";
    }

    var criteria = [];

    if (useBaseCriteria) {
      criteria = self.options.baseCriteria.slice(0);
    }

    criteria.push({
      i: term,
      o: operation,
      v: value
    });
    var data = {
      query: JSON.stringify({
        criteria: criteria
      }),
      attributes: JSON.stringify(self.options.attributes)
    };
    jquery__WEBPACK_IMPORTED_MODULE_0___default.a.ajax({
      url: self.options.vocabularyUrl,
      dataType: "JSON",
      data: data,
      type: type,
      success: callback
    });
  };

  return self;
};

var Loading = function Loading(options) {
  /*
   * Options:
   *   backdrop(pattern): if you want to have the progress indicator work
   *                      seamlessly with backdrop pattern
   *   zIndex(integer or function): to override default z-index used
   */
  var self = this;
  self.className = "plone-loader";
  var defaults = {
    backdrop: null,
    zIndex: 10005 // can be a function

  };

  if (!options) {
    options = {};
  }

  self.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, defaults, options);

  self.init = function () {
    self.$el = jquery__WEBPACK_IMPORTED_MODULE_0___default()("." + self.className);

    if (self.$el.length === 0) {
      self.$el = jquery__WEBPACK_IMPORTED_MODULE_0___default()("<div><div></div></div>");
      self.$el.addClass(self.className).hide().appendTo("body");
    }
  };

  self.show = function (closable) {
    self.init();
    self.$el.show();
    var zIndex = self.options.zIndex;

    if (typeof zIndex === "function") {
      zIndex = Math.max(zIndex(), 10005);
    } else {
      // go through all modals and backdrops and make sure we have a higher
      // z-index to use
      zIndex = 10005;
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(".plone-modal-wrapper,.plone-modal-backdrop").each(function () {
        zIndex = Math.max(zIndex, jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).css("zIndex") || 10005);
      });
      zIndex += 1;
    }

    self.$el.css("zIndex", zIndex);

    if (closable === undefined) {
      closable = true;
    }

    if (self.options.backdrop) {
      self.options.backdrop.closeOnClick = closable;
      self.options.backdrop.closeOnEsc = closable;
      self.options.backdrop.init();
      self.options.backdrop.show();
    }
  };

  self.hide = function () {
    self.init();
    self.$el.hide();
  };

  return self;
};

var getAuthenticator = function getAuthenticator() {
  var $el = jquery__WEBPACK_IMPORTED_MODULE_0___default()('input[name="_authenticator"]');

  if ($el.length === 0) {
    $el = jquery__WEBPACK_IMPORTED_MODULE_0___default()('a[href*="_authenticator"]');

    if ($el.length > 0) {
      return $el.attr("href").split("_authenticator=")[1];
    }

    return "";
  } else {
    return $el.val();
  }
};

var generateId = function generateId(prefix) {
  if (prefix === undefined) {
    prefix = "id";
  }

  return prefix + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
};

var setId = function setId($el, prefix) {
  if (prefix === undefined) {
    prefix = "id";
  }

  var id = $el.attr("id");

  if (id === undefined) {
    id = generateId(prefix);
  } else {
    /* hopefully we don't screw anything up here... changing the id
     * in some cases so we get a decent selector */
    id = id.replace(/\./g, "-");
  }

  $el.attr("id", id);
  return id;
};

var getWindow = function getWindow() {
  var win = window;

  if (win.parent !== window) {
    win = win.parent;
  }

  return win;
};

var parseBodyTag = function parseBodyTag(txt) {
  return jquery__WEBPACK_IMPORTED_MODULE_0___default()(/<body[^>]*>[^]*<\/body>/im.exec(txt)[0].replace("<body", "<div").replace("</body>", "</div>")).eq(0).html();
};

var featureSupport = {
  /* Well tested feature support for things we use in mockup.
   * All gathered from: http://diveintohtml5.info/everything.html
   * Alternative to using some form of modernizr.
   */
  dragAndDrop: function dragAndDrop() {
    return "draggable" in document.createElement("span");
  },
  fileApi: function fileApi() {
    return typeof FileReader != "undefined"; // jshint ignore:line
  },
  history: function history() {
    return !!(window.history && window.history.pushState);
  }
};

var bool = function bool(val) {
  if (typeof val === "string") {
    val = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.trim(val).toLowerCase();
  }

  return ["false", false, "0", 0, "", undefined, null].indexOf(val) === -1;
};

var escapeHTML = function escapeHTML(val) {
  return jquery__WEBPACK_IMPORTED_MODULE_0___default()("<div/>").text(val).html();
};

var removeHTML = function removeHTML(val) {
  return val.replace(/<[^>]+>/gi, "");
};

var storage = {
  // Simple local storage wrapper, which doesn't break down if it's not available.
  get: function get(name) {
    if (window.localStorage) {
      var val = window.localStorage[name];
      return typeof val === "string" ? JSON.parse(val) : undefined;
    }
  },
  set: function set(name, val) {
    if (window.localStorage) {
      window.localStorage[name] = JSON.stringify(val);
    }
  }
};

var createElementFromHTML = function createElementFromHTML(htmlString) {
  // From: https://stackoverflow.com/a/494348/1337474
  var div = document.createElement("div");
  div.innerHTML = htmlString.trim();
  return div.firstChild;
};

/* harmony default export */ __webpack_exports__["a"] = ({
  bool: bool,
  escapeHTML: escapeHTML,
  removeHTML: removeHTML,
  featureSupport: featureSupport,
  generateId: generateId,
  getAuthenticator: getAuthenticator,
  getWindow: getWindow,
  Loading: Loading,
  loading: new Loading(),
  // provide default loader
  parseBodyTag: parseBodyTag,
  QueryHelper: QueryHelper,
  setId: setId,
  storage: storage,
  createElementFromHTML: createElementFromHTML
});

/***/ }),

/***/ 85:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(31);
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18);

 // This modifier takes the styles prepared by the `computeStyles` modifier
// and applies them to the HTMLElements such as popper and arrow

function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function (name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name]; // arrow is optional + virtual elements

    if (!Object(_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__[/* isHTMLElement */ "b"])(element) || !Object(_dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(element)) {
      return;
    } // Flow doesn't support to extend this property, but it's the most
    // effective way to apply styles to an HTMLElement
    // $FlowFixMe[cannot-write]


    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function (name) {
      var value = attributes[name];

      if (value === false) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value === true ? '' : value);
      }
    });
  });
}

function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: '0',
      top: '0',
      margin: '0'
    },
    arrow: {
      position: 'absolute'
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);

  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }

  return function () {
    Object.keys(state.elements).forEach(function (name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

      var style = styleProperties.reduce(function (style, property) {
        style[property] = '';
        return style;
      }, {}); // arrow is optional + virtual elements

      if (!Object(_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__[/* isHTMLElement */ "b"])(element) || !Object(_dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(element)) {
        return;
      }

      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'applyStyles',
  enabled: true,
  phase: 'write',
  fn: applyStyles,
  effect: effect,
  requires: ['computeStyles']
});

/***/ }),

/***/ 86:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export mapToStyles */
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(58);
/* harmony import */ var _dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(26);
/* harmony import */ var _dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(27);
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(29);





 // eslint-disable-next-line import/no-unused-modules

var round = Math.round;
var unsetSides = {
  top: 'auto',
  right: 'auto',
  bottom: 'auto',
  left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.

function roundOffsetsByDPR(_ref) {
  var x = _ref.x,
      y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(round(x * dpr) / dpr) || 0,
    y: round(round(y * dpr) / dpr) || 0
  };
}

function mapToStyles(_ref2) {
  var _Object$assign2;

  var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive,
      roundOffsets = _ref2.roundOffsets;

  var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === 'function' ? roundOffsets(offsets) : offsets,
      _ref3$x = _ref3.x,
      x = _ref3$x === void 0 ? 0 : _ref3$x,
      _ref3$y = _ref3.y,
      y = _ref3$y === void 0 ? 0 : _ref3$y;

  var hasX = offsets.hasOwnProperty('x');
  var hasY = offsets.hasOwnProperty('y');
  var sideX = _enums_js__WEBPACK_IMPORTED_MODULE_0__[/* left */ "l"];
  var sideY = _enums_js__WEBPACK_IMPORTED_MODULE_0__[/* top */ "u"];
  var win = window;

  if (adaptive) {
    var offsetParent = Object(_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(popper);

    if (offsetParent === Object(_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"])(popper)) {
      offsetParent = Object(_dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"])(popper);
    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it

    /*:: offsetParent = (offsetParent: Element); */


    if (placement === _enums_js__WEBPACK_IMPORTED_MODULE_0__[/* top */ "u"]) {
      sideY = _enums_js__WEBPACK_IMPORTED_MODULE_0__[/* bottom */ "i"];
      y -= offsetParent.clientHeight - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }

    if (placement === _enums_js__WEBPACK_IMPORTED_MODULE_0__[/* left */ "l"]) {
      sideX = _enums_js__WEBPACK_IMPORTED_MODULE_0__[/* right */ "s"];
      x -= offsetParent.clientWidth - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }

  var commonStyles = Object.assign({
    position: position
  }, adaptive && unsetSides);

  if (gpuAcceleration) {
    var _Object$assign;

    return Object.assign(Object.assign({}, commonStyles), {}, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) < 2 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }

  return Object.assign(Object.assign({}, commonStyles), {}, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}

function computeStyles(_ref4) {
  var state = _ref4.state,
      options = _ref4.options;
  var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
      _options$roundOffsets = options.roundOffsets,
      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

  if (false) { var transitionProperty; }

  var commonStyles = {
    placement: Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration: gpuAcceleration
  };

  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign(Object.assign({}, state.styles.popper), mapToStyles(Object.assign(Object.assign({}, commonStyles), {}, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive: adaptive,
      roundOffsets: roundOffsets
    })));
  }

  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign(Object.assign({}, state.styles.arrow), mapToStyles(Object.assign(Object.assign({}, commonStyles), {}, {
      offsets: state.modifiersData.arrow,
      position: 'absolute',
      adaptive: false,
      roundOffsets: roundOffsets
    })));
  }

  state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), {}, {
    'data-popper-placement': state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'computeStyles',
  enabled: true,
  phase: 'beforeWrite',
  fn: computeStyles,
  data: {}
});

/***/ }),

/***/ 87:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(26);
 // eslint-disable-next-line import/no-unused-modules

var passive = {
  passive: true
};

function effect(_ref) {
  var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options;
  var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize;
  var window = Object(_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

  if (scroll) {
    scrollParents.forEach(function (scrollParent) {
      scrollParent.addEventListener('scroll', instance.update, passive);
    });
  }

  if (resize) {
    window.addEventListener('resize', instance.update, passive);
  }

  return function () {
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.removeEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.removeEventListener('resize', instance.update, passive);
    }
  };
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'eventListeners',
  enabled: true,
  phase: 'write',
  fn: function fn() {},
  effect: effect,
  data: {}
});

/***/ }),

/***/ 88:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _utils_computeOffsets_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(143);


function popperOffsets(_ref) {
  var state = _ref.state,
      name = _ref.name;
  // Offsets are the actual position the popper needs to have to be
  // properly positioned near its reference element
  // This is the most basic placement, and will be adjusted by
  // the modifiers in the next step
  state.modifiersData[name] = Object(_utils_computeOffsets_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: 'absolute',
    placement: state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'popperOffsets',
  enabled: true,
  phase: 'read',
  fn: popperOffsets,
  data: {}
});

/***/ }),

/***/ 89:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getMainAxisFromPlacement; });
function getMainAxisFromPlacement(placement) {
  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
}

/***/ }),

/***/ 90:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getLayoutRect; });
// Returns the layout rect of an element relative to its offsetParent. Layout
// means it doesn't take into account transforms.
function getLayoutRect(element) {
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: element.offsetWidth,
    height: element.offsetHeight
  };
}

/***/ }),

/***/ 91:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getWindowScrollBarX; });
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(64);
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(27);
/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(92);



function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  // Popper 1 is broken in this case and never had a bug report so let's assume
  // it's not an issue. I don't think anyone ever specifies width on <html>
  // anyway.
  // Browsers where the left scrollbar doesn't cause an issue report `0` for
  // this (e.g. Edge 2019, IE11, Safari)
  return Object(_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(Object(_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(element)).left + Object(_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"])(element).scrollLeft;
}

/***/ }),

/***/ 92:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getWindowScroll; });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(26);

function getWindowScroll(node) {
  var win = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft: scrollLeft,
    scrollTop: scrollTop
  };
}

/***/ }),

/***/ 93:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return isScrollParent; });
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(36);

function isScrollParent(element) {
  // Firefox wants us to check `-x` and `-y` variations as well
  var _getComputedStyle = Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY;

  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

/***/ }),

/***/ 94:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return within; });
function within(min, value, max) {
  return Math.max(min, Math.min(value, max));
}

/***/ }),

/***/ 95:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ listScrollParents; });

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
var getParentNode = __webpack_require__(72);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
var isScrollParent = __webpack_require__(93);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
var getNodeName = __webpack_require__(31);

// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
var instanceOf = __webpack_require__(18);

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js




function getScrollParent(node) {
  if (['html', 'body', '#document'].indexOf(Object(getNodeName["a" /* default */])(node)) >= 0) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
  }

  if (Object(instanceOf["b" /* isHTMLElement */])(node) && Object(isScrollParent["a" /* default */])(node)) {
    return node;
  }

  return getScrollParent(Object(getParentNode["a" /* default */])(node));
}
// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindow.js
var getWindow = __webpack_require__(26);

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js




/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/

function listScrollParents(element, list) {
  if (list === void 0) {
    list = [];
  }

  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === element.ownerDocument.body;
  var win = Object(getWindow["a" /* default */])(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], Object(isScrollParent["a" /* default */])(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
  updatedList.concat(listScrollParents(Object(getParentNode["a" /* default */])(target)));
}

/***/ })

/******/ });